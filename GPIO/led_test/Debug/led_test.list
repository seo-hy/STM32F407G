
led_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ab8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08007c40  08007c40  00017c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007c5c  08007c5c  00017c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007c64  08007c64  00017c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007c68  08007c68  00017c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000090  20000000  08007c6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
  8 .bss          00000804  20000090  20000090  00020090  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000894  20000894  00020090  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001a242  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003a96  00000000  00000000  0003a302  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000011f8  00000000  00000000  0003dd98  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001058  00000000  00000000  0003ef90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00009a87  00000000  00000000  0003ffe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00005b9f  00000000  00000000  00049a6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004f60e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004aa8  00000000  00000000  0004f68c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007c28 	.word	0x08007c28

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08007c28 	.word	0x08007c28

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b08c      	sub	sp, #48	; 0x30
 80004dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	f107 031c 	add.w	r3, r7, #28
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004ee:	2300      	movs	r3, #0
 80004f0:	61bb      	str	r3, [r7, #24]
 80004f2:	4a71      	ldr	r2, [pc, #452]	; (80006b8 <MX_GPIO_Init+0x1e0>)
 80004f4:	4b70      	ldr	r3, [pc, #448]	; (80006b8 <MX_GPIO_Init+0x1e0>)
 80004f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f8:	f043 0310 	orr.w	r3, r3, #16
 80004fc:	6313      	str	r3, [r2, #48]	; 0x30
 80004fe:	4b6e      	ldr	r3, [pc, #440]	; (80006b8 <MX_GPIO_Init+0x1e0>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	f003 0310 	and.w	r3, r3, #16
 8000506:	61bb      	str	r3, [r7, #24]
 8000508:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050a:	2300      	movs	r3, #0
 800050c:	617b      	str	r3, [r7, #20]
 800050e:	4a6a      	ldr	r2, [pc, #424]	; (80006b8 <MX_GPIO_Init+0x1e0>)
 8000510:	4b69      	ldr	r3, [pc, #420]	; (80006b8 <MX_GPIO_Init+0x1e0>)
 8000512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000514:	f043 0304 	orr.w	r3, r3, #4
 8000518:	6313      	str	r3, [r2, #48]	; 0x30
 800051a:	4b67      	ldr	r3, [pc, #412]	; (80006b8 <MX_GPIO_Init+0x1e0>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	f003 0304 	and.w	r3, r3, #4
 8000522:	617b      	str	r3, [r7, #20]
 8000524:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000526:	2300      	movs	r3, #0
 8000528:	613b      	str	r3, [r7, #16]
 800052a:	4a63      	ldr	r2, [pc, #396]	; (80006b8 <MX_GPIO_Init+0x1e0>)
 800052c:	4b62      	ldr	r3, [pc, #392]	; (80006b8 <MX_GPIO_Init+0x1e0>)
 800052e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000534:	6313      	str	r3, [r2, #48]	; 0x30
 8000536:	4b60      	ldr	r3, [pc, #384]	; (80006b8 <MX_GPIO_Init+0x1e0>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800053e:	613b      	str	r3, [r7, #16]
 8000540:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000542:	2300      	movs	r3, #0
 8000544:	60fb      	str	r3, [r7, #12]
 8000546:	4a5c      	ldr	r2, [pc, #368]	; (80006b8 <MX_GPIO_Init+0x1e0>)
 8000548:	4b5b      	ldr	r3, [pc, #364]	; (80006b8 <MX_GPIO_Init+0x1e0>)
 800054a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	6313      	str	r3, [r2, #48]	; 0x30
 8000552:	4b59      	ldr	r3, [pc, #356]	; (80006b8 <MX_GPIO_Init+0x1e0>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055e:	2300      	movs	r3, #0
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	4a55      	ldr	r2, [pc, #340]	; (80006b8 <MX_GPIO_Init+0x1e0>)
 8000564:	4b54      	ldr	r3, [pc, #336]	; (80006b8 <MX_GPIO_Init+0x1e0>)
 8000566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000568:	f043 0302 	orr.w	r3, r3, #2
 800056c:	6313      	str	r3, [r2, #48]	; 0x30
 800056e:	4b52      	ldr	r3, [pc, #328]	; (80006b8 <MX_GPIO_Init+0x1e0>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	f003 0302 	and.w	r3, r3, #2
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800057a:	2300      	movs	r3, #0
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	4a4e      	ldr	r2, [pc, #312]	; (80006b8 <MX_GPIO_Init+0x1e0>)
 8000580:	4b4d      	ldr	r3, [pc, #308]	; (80006b8 <MX_GPIO_Init+0x1e0>)
 8000582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000584:	f043 0308 	orr.w	r3, r3, #8
 8000588:	6313      	str	r3, [r2, #48]	; 0x30
 800058a:	4b4b      	ldr	r3, [pc, #300]	; (80006b8 <MX_GPIO_Init+0x1e0>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	f003 0308 	and.w	r3, r3, #8
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	2108      	movs	r1, #8
 800059a:	4848      	ldr	r0, [pc, #288]	; (80006bc <MX_GPIO_Init+0x1e4>)
 800059c:	f000 ff04 	bl	80013a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	2101      	movs	r1, #1
 80005a4:	4846      	ldr	r0, [pc, #280]	; (80006c0 <MX_GPIO_Init+0x1e8>)
 80005a6:	f000 feff 	bl	80013a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80005aa:	2200      	movs	r2, #0
 80005ac:	f24f 0110 	movw	r1, #61456	; 0xf010
 80005b0:	4844      	ldr	r0, [pc, #272]	; (80006c4 <MX_GPIO_Init+0x1ec>)
 80005b2:	f000 fef9 	bl	80013a8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80005b6:	2308      	movs	r3, #8
 80005b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ba:	2301      	movs	r3, #1
 80005bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	2300      	movs	r3, #0
 80005c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c2:	2300      	movs	r3, #0
 80005c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80005c6:	f107 031c 	add.w	r3, r7, #28
 80005ca:	4619      	mov	r1, r3
 80005cc:	483b      	ldr	r0, [pc, #236]	; (80006bc <MX_GPIO_Init+0x1e4>)
 80005ce:	f000 fd39 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80005d2:	2301      	movs	r3, #1
 80005d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d6:	2301      	movs	r3, #1
 80005d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005da:	2300      	movs	r3, #0
 80005dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005de:	2300      	movs	r3, #0
 80005e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80005e2:	f107 031c 	add.w	r3, r7, #28
 80005e6:	4619      	mov	r1, r3
 80005e8:	4835      	ldr	r0, [pc, #212]	; (80006c0 <MX_GPIO_Init+0x1e8>)
 80005ea:	f000 fd2b 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80005ee:	2308      	movs	r3, #8
 80005f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005f2:	2302      	movs	r3, #2
 80005f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f6:	2300      	movs	r3, #0
 80005f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fa:	2300      	movs	r3, #0
 80005fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80005fe:	2305      	movs	r3, #5
 8000600:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000602:	f107 031c 	add.w	r3, r7, #28
 8000606:	4619      	mov	r1, r3
 8000608:	482d      	ldr	r0, [pc, #180]	; (80006c0 <MX_GPIO_Init+0x1e8>)
 800060a:	f000 fd1b 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800060e:	2301      	movs	r3, #1
 8000610:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000612:	2300      	movs	r3, #0
 8000614:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000616:	2300      	movs	r3, #0
 8000618:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061a:	f107 031c 	add.w	r3, r7, #28
 800061e:	4619      	mov	r1, r3
 8000620:	4829      	ldr	r0, [pc, #164]	; (80006c8 <MX_GPIO_Init+0x1f0>)
 8000622:	f000 fd0f 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000626:	2304      	movs	r3, #4
 8000628:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800062a:	2300      	movs	r3, #0
 800062c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062e:	2300      	movs	r3, #0
 8000630:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000632:	f107 031c 	add.w	r3, r7, #28
 8000636:	4619      	mov	r1, r3
 8000638:	4824      	ldr	r0, [pc, #144]	; (80006cc <MX_GPIO_Init+0x1f4>)
 800063a:	f000 fd03 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800063e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000642:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000644:	2302      	movs	r3, #2
 8000646:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064c:	2300      	movs	r3, #0
 800064e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000650:	2305      	movs	r3, #5
 8000652:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000654:	f107 031c 	add.w	r3, r7, #28
 8000658:	4619      	mov	r1, r3
 800065a:	481c      	ldr	r0, [pc, #112]	; (80006cc <MX_GPIO_Init+0x1f4>)
 800065c:	f000 fcf2 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000660:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000664:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000666:	2301      	movs	r3, #1
 8000668:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066e:	2300      	movs	r3, #0
 8000670:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	4619      	mov	r1, r3
 8000678:	4812      	ldr	r0, [pc, #72]	; (80006c4 <MX_GPIO_Init+0x1ec>)
 800067a:	f000 fce3 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800067e:	2320      	movs	r3, #32
 8000680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000682:	2300      	movs	r3, #0
 8000684:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800068a:	f107 031c 	add.w	r3, r7, #28
 800068e:	4619      	mov	r1, r3
 8000690:	480c      	ldr	r0, [pc, #48]	; (80006c4 <MX_GPIO_Init+0x1ec>)
 8000692:	f000 fcd7 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000696:	2302      	movs	r3, #2
 8000698:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800069a:	4b0d      	ldr	r3, [pc, #52]	; (80006d0 <MX_GPIO_Init+0x1f8>)
 800069c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80006a2:	f107 031c 	add.w	r3, r7, #28
 80006a6:	4619      	mov	r1, r3
 80006a8:	4804      	ldr	r0, [pc, #16]	; (80006bc <MX_GPIO_Init+0x1e4>)
 80006aa:	f000 fccb 	bl	8001044 <HAL_GPIO_Init>

}
 80006ae:	bf00      	nop
 80006b0:	3730      	adds	r7, #48	; 0x30
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40021000 	.word	0x40021000
 80006c0:	40020800 	.word	0x40020800
 80006c4:	40020c00 	.word	0x40020c00
 80006c8:	40020000 	.word	0x40020000
 80006cc:	40020400 	.word	0x40020400
 80006d0:	10120000 	.word	0x10120000

080006d4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006d8:	4b12      	ldr	r3, [pc, #72]	; (8000724 <MX_I2C1_Init+0x50>)
 80006da:	4a13      	ldr	r2, [pc, #76]	; (8000728 <MX_I2C1_Init+0x54>)
 80006dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006de:	4b11      	ldr	r3, [pc, #68]	; (8000724 <MX_I2C1_Init+0x50>)
 80006e0:	4a12      	ldr	r2, [pc, #72]	; (800072c <MX_I2C1_Init+0x58>)
 80006e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006e4:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <MX_I2C1_Init+0x50>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006ea:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <MX_I2C1_Init+0x50>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006f0:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <MX_I2C1_Init+0x50>)
 80006f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f8:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <MX_I2C1_Init+0x50>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006fe:	4b09      	ldr	r3, [pc, #36]	; (8000724 <MX_I2C1_Init+0x50>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000704:	4b07      	ldr	r3, [pc, #28]	; (8000724 <MX_I2C1_Init+0x50>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800070a:	4b06      	ldr	r3, [pc, #24]	; (8000724 <MX_I2C1_Init+0x50>)
 800070c:	2200      	movs	r2, #0
 800070e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000710:	4804      	ldr	r0, [pc, #16]	; (8000724 <MX_I2C1_Init+0x50>)
 8000712:	f002 fbe1 	bl	8002ed8 <HAL_I2C_Init>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800071c:	f000 f9d2 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	200000bc 	.word	0x200000bc
 8000728:	40005400 	.word	0x40005400
 800072c:	000186a0 	.word	0x000186a0

08000730 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08a      	sub	sp, #40	; 0x28
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000738:	f107 0314 	add.w	r3, r7, #20
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a19      	ldr	r2, [pc, #100]	; (80007b4 <HAL_I2C_MspInit+0x84>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d12c      	bne.n	80007ac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	613b      	str	r3, [r7, #16]
 8000756:	4a18      	ldr	r2, [pc, #96]	; (80007b8 <HAL_I2C_MspInit+0x88>)
 8000758:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <HAL_I2C_MspInit+0x88>)
 800075a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075c:	f043 0302 	orr.w	r3, r3, #2
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <HAL_I2C_MspInit+0x88>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0302 	and.w	r3, r3, #2
 800076a:	613b      	str	r3, [r7, #16]
 800076c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800076e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000772:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000774:	2312      	movs	r3, #18
 8000776:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000778:	2301      	movs	r3, #1
 800077a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077c:	2300      	movs	r3, #0
 800077e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000780:	2304      	movs	r3, #4
 8000782:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	4619      	mov	r1, r3
 800078a:	480c      	ldr	r0, [pc, #48]	; (80007bc <HAL_I2C_MspInit+0x8c>)
 800078c:	f000 fc5a 	bl	8001044 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000790:	2300      	movs	r3, #0
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	4a08      	ldr	r2, [pc, #32]	; (80007b8 <HAL_I2C_MspInit+0x88>)
 8000796:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <HAL_I2C_MspInit+0x88>)
 8000798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800079e:	6413      	str	r3, [r2, #64]	; 0x40
 80007a0:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <HAL_I2C_MspInit+0x88>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007ac:	bf00      	nop
 80007ae:	3728      	adds	r7, #40	; 0x28
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40005400 	.word	0x40005400
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40020400 	.word	0x40020400

080007c0 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007c4:	4b13      	ldr	r3, [pc, #76]	; (8000814 <MX_I2S3_Init+0x54>)
 80007c6:	4a14      	ldr	r2, [pc, #80]	; (8000818 <MX_I2S3_Init+0x58>)
 80007c8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007ca:	4b12      	ldr	r3, [pc, #72]	; (8000814 <MX_I2S3_Init+0x54>)
 80007cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007d0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007d2:	4b10      	ldr	r3, [pc, #64]	; (8000814 <MX_I2S3_Init+0x54>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007d8:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <MX_I2S3_Init+0x54>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007de:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <MX_I2S3_Init+0x54>)
 80007e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <MX_I2S3_Init+0x54>)
 80007e8:	4a0c      	ldr	r2, [pc, #48]	; (800081c <MX_I2S3_Init+0x5c>)
 80007ea:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007ec:	4b09      	ldr	r3, [pc, #36]	; (8000814 <MX_I2S3_Init+0x54>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007f2:	4b08      	ldr	r3, [pc, #32]	; (8000814 <MX_I2S3_Init+0x54>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <MX_I2S3_Init+0x54>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007fe:	4805      	ldr	r0, [pc, #20]	; (8000814 <MX_I2S3_Init+0x54>)
 8000800:	f002 fca2 	bl	8003148 <HAL_I2S_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800080a:	f000 f95b 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000110 	.word	0x20000110
 8000818:	40003c00 	.word	0x40003c00
 800081c:	00017700 	.word	0x00017700

08000820 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08a      	sub	sp, #40	; 0x28
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI3)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a28      	ldr	r2, [pc, #160]	; (80008e0 <HAL_I2S_MspInit+0xc0>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d14a      	bne.n	80008d8 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	613b      	str	r3, [r7, #16]
 8000846:	4a27      	ldr	r2, [pc, #156]	; (80008e4 <HAL_I2S_MspInit+0xc4>)
 8000848:	4b26      	ldr	r3, [pc, #152]	; (80008e4 <HAL_I2S_MspInit+0xc4>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000850:	6413      	str	r3, [r2, #64]	; 0x40
 8000852:	4b24      	ldr	r3, [pc, #144]	; (80008e4 <HAL_I2S_MspInit+0xc4>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000856:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800085a:	613b      	str	r3, [r7, #16]
 800085c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	4a20      	ldr	r2, [pc, #128]	; (80008e4 <HAL_I2S_MspInit+0xc4>)
 8000864:	4b1f      	ldr	r3, [pc, #124]	; (80008e4 <HAL_I2S_MspInit+0xc4>)
 8000866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b1d      	ldr	r3, [pc, #116]	; (80008e4 <HAL_I2S_MspInit+0xc4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	60bb      	str	r3, [r7, #8]
 800087e:	4a19      	ldr	r2, [pc, #100]	; (80008e4 <HAL_I2S_MspInit+0xc4>)
 8000880:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <HAL_I2S_MspInit+0xc4>)
 8000882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000884:	f043 0304 	orr.w	r3, r3, #4
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <HAL_I2S_MspInit+0xc4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0304 	and.w	r3, r3, #4
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000896:	2310      	movs	r3, #16
 8000898:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089a:	2302      	movs	r3, #2
 800089c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008a6:	2306      	movs	r3, #6
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	4619      	mov	r1, r3
 80008b0:	480d      	ldr	r0, [pc, #52]	; (80008e8 <HAL_I2S_MspInit+0xc8>)
 80008b2:	f000 fbc7 	bl	8001044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008b6:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008bc:	2302      	movs	r3, #2
 80008be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008c8:	2306      	movs	r3, #6
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	4619      	mov	r1, r3
 80008d2:	4806      	ldr	r0, [pc, #24]	; (80008ec <HAL_I2S_MspInit+0xcc>)
 80008d4:	f000 fbb6 	bl	8001044 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80008d8:	bf00      	nop
 80008da:	3728      	adds	r7, #40	; 0x28
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40003c00 	.word	0x40003c00
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40020000 	.word	0x40020000
 80008ec:	40020800 	.word	0x40020800

080008f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f4:	f000 fa02 	bl	8000cfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f8:	f000 f862 	bl	80009c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008fc:	f7ff fdec 	bl	80004d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000900:	f7ff fee8 	bl	80006d4 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000904:	f7ff ff5c 	bl	80007c0 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000908:	f000 f8e0 	bl	8000acc <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800090c:	f006 fd5c 	bl	80073c8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET); //Yellow
 8000910:	2200      	movs	r2, #0
 8000912:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000916:	4828      	ldr	r0, [pc, #160]	; (80009b8 <main+0xc8>)
 8000918:	f000 fd46 	bl	80013a8 <HAL_GPIO_WritePin>
 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET); //Orange
 800091c:	2200      	movs	r2, #0
 800091e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000922:	4825      	ldr	r0, [pc, #148]	; (80009b8 <main+0xc8>)
 8000924:	f000 fd40 	bl	80013a8 <HAL_GPIO_WritePin>
 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET); //Red
 8000928:	2200      	movs	r2, #0
 800092a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800092e:	4822      	ldr	r0, [pc, #136]	; (80009b8 <main+0xc8>)
 8000930:	f000 fd3a 	bl	80013a8 <HAL_GPIO_WritePin>
 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET); //Blue
 8000934:	2200      	movs	r2, #0
 8000936:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800093a:	481f      	ldr	r0, [pc, #124]	; (80009b8 <main+0xc8>)
 800093c:	f000 fd34 	bl	80013a8 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==GPIO_PIN_SET){
 8000940:	2101      	movs	r1, #1
 8000942:	481e      	ldr	r0, [pc, #120]	; (80009bc <main+0xcc>)
 8000944:	f000 fd18 	bl	8001378 <HAL_GPIO_ReadPin>
 8000948:	4603      	mov	r3, r0
 800094a:	2b01      	cmp	r3, #1
 800094c:	d118      	bne.n	8000980 <main+0x90>
		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET); //Yellow
 800094e:	2201      	movs	r2, #1
 8000950:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000954:	4818      	ldr	r0, [pc, #96]	; (80009b8 <main+0xc8>)
 8000956:	f000 fd27 	bl	80013a8 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); //Orange
 800095a:	2201      	movs	r2, #1
 800095c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000960:	4815      	ldr	r0, [pc, #84]	; (80009b8 <main+0xc8>)
 8000962:	f000 fd21 	bl	80013a8 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET); //Red
 8000966:	2201      	movs	r2, #1
 8000968:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800096c:	4812      	ldr	r0, [pc, #72]	; (80009b8 <main+0xc8>)
 800096e:	f000 fd1b 	bl	80013a8 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET); //Blue
 8000972:	2201      	movs	r2, #1
 8000974:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000978:	480f      	ldr	r0, [pc, #60]	; (80009b8 <main+0xc8>)
 800097a:	f000 fd15 	bl	80013a8 <HAL_GPIO_WritePin>
 800097e:	e017      	b.n	80009b0 <main+0xc0>

	}else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET); //Yellow
 8000980:	2200      	movs	r2, #0
 8000982:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000986:	480c      	ldr	r0, [pc, #48]	; (80009b8 <main+0xc8>)
 8000988:	f000 fd0e 	bl	80013a8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET); //Orange
 800098c:	2200      	movs	r2, #0
 800098e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000992:	4809      	ldr	r0, [pc, #36]	; (80009b8 <main+0xc8>)
 8000994:	f000 fd08 	bl	80013a8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET); //Red
 8000998:	2200      	movs	r2, #0
 800099a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800099e:	4806      	ldr	r0, [pc, #24]	; (80009b8 <main+0xc8>)
 80009a0:	f000 fd02 	bl	80013a8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET); //Blue
 80009a4:	2200      	movs	r2, #0
 80009a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009aa:	4803      	ldr	r0, [pc, #12]	; (80009b8 <main+0xc8>)
 80009ac:	f000 fcfc 	bl	80013a8 <HAL_GPIO_WritePin>
	}

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80009b0:	f006 fd30 	bl	8007414 <MX_USB_HOST_Process>
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==GPIO_PIN_SET){
 80009b4:	e7c4      	b.n	8000940 <main+0x50>
 80009b6:	bf00      	nop
 80009b8:	40020c00 	.word	0x40020c00
 80009bc:	40020000 	.word	0x40020000

080009c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b098      	sub	sp, #96	; 0x60
 80009c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009ca:	2230      	movs	r2, #48	; 0x30
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f007 f864 	bl	8007a9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009e4:	f107 030c 	add.w	r3, r7, #12
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	60bb      	str	r3, [r7, #8]
 80009f6:	4a31      	ldr	r2, [pc, #196]	; (8000abc <SystemClock_Config+0xfc>)
 80009f8:	4b30      	ldr	r3, [pc, #192]	; (8000abc <SystemClock_Config+0xfc>)
 80009fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a00:	6413      	str	r3, [r2, #64]	; 0x40
 8000a02:	4b2e      	ldr	r3, [pc, #184]	; (8000abc <SystemClock_Config+0xfc>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0a:	60bb      	str	r3, [r7, #8]
 8000a0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a0e:	2300      	movs	r3, #0
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	4a2b      	ldr	r2, [pc, #172]	; (8000ac0 <SystemClock_Config+0x100>)
 8000a14:	4b2a      	ldr	r3, [pc, #168]	; (8000ac0 <SystemClock_Config+0x100>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a1c:	6013      	str	r3, [r2, #0]
 8000a1e:	4b28      	ldr	r3, [pc, #160]	; (8000ac0 <SystemClock_Config+0x100>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a32:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a34:	2302      	movs	r3, #2
 8000a36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a38:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a3e:	2308      	movs	r3, #8
 8000a40:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a42:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a46:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a4c:	2307      	movs	r3, #7
 8000a4e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a54:	4618      	mov	r0, r3
 8000a56:	f003 f815 	bl	8003a84 <HAL_RCC_OscConfig>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000a60:	f000 f830 	bl	8000ac4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a64:	230f      	movs	r3, #15
 8000a66:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a70:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a74:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a7a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a7c:	f107 031c 	add.w	r3, r7, #28
 8000a80:	2105      	movs	r1, #5
 8000a82:	4618      	mov	r0, r3
 8000a84:	f003 fa76 	bl	8003f74 <HAL_RCC_ClockConfig>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000a8e:	f000 f819 	bl	8000ac4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a92:	2301      	movs	r3, #1
 8000a94:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a96:	23c0      	movs	r3, #192	; 0xc0
 8000a98:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a9e:	f107 030c 	add.w	r3, r7, #12
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f003 fc44 	bl	8004330 <HAL_RCCEx_PeriphCLKConfig>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000aae:	f000 f809 	bl	8000ac4 <Error_Handler>
  }
}
 8000ab2:	bf00      	nop
 8000ab4:	3760      	adds	r7, #96	; 0x60
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40007000 	.word	0x40007000

08000ac4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aca:	e7fe      	b.n	8000aca <Error_Handler+0x6>

08000acc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000ad0:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <MX_SPI1_Init+0x64>)
 8000ad2:	4a18      	ldr	r2, [pc, #96]	; (8000b34 <MX_SPI1_Init+0x68>)
 8000ad4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ad6:	4b16      	ldr	r3, [pc, #88]	; (8000b30 <MX_SPI1_Init+0x64>)
 8000ad8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000adc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ade:	4b14      	ldr	r3, [pc, #80]	; (8000b30 <MX_SPI1_Init+0x64>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <MX_SPI1_Init+0x64>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aea:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <MX_SPI1_Init+0x64>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000af0:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <MX_SPI1_Init+0x64>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000af6:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <MX_SPI1_Init+0x64>)
 8000af8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000afc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000afe:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <MX_SPI1_Init+0x64>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b04:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <MX_SPI1_Init+0x64>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b0a:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <MX_SPI1_Init+0x64>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b10:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <MX_SPI1_Init+0x64>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b16:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <MX_SPI1_Init+0x64>)
 8000b18:	220a      	movs	r2, #10
 8000b1a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b1c:	4804      	ldr	r0, [pc, #16]	; (8000b30 <MX_SPI1_Init+0x64>)
 8000b1e:	f003 fd45 	bl	80045ac <HAL_SPI_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b28:	f7ff ffcc 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000158 	.word	0x20000158
 8000b34:	40013000 	.word	0x40013000

08000b38 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08a      	sub	sp, #40	; 0x28
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a19      	ldr	r2, [pc, #100]	; (8000bbc <HAL_SPI_MspInit+0x84>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d12b      	bne.n	8000bb2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	613b      	str	r3, [r7, #16]
 8000b5e:	4a18      	ldr	r2, [pc, #96]	; (8000bc0 <HAL_SPI_MspInit+0x88>)
 8000b60:	4b17      	ldr	r3, [pc, #92]	; (8000bc0 <HAL_SPI_MspInit+0x88>)
 8000b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b68:	6453      	str	r3, [r2, #68]	; 0x44
 8000b6a:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <HAL_SPI_MspInit+0x88>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	4a11      	ldr	r2, [pc, #68]	; (8000bc0 <HAL_SPI_MspInit+0x88>)
 8000b7c:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <HAL_SPI_MspInit+0x88>)
 8000b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <HAL_SPI_MspInit+0x88>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b92:	23e0      	movs	r3, #224	; 0xe0
 8000b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	2302      	movs	r3, #2
 8000b98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ba2:	2305      	movs	r3, #5
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4619      	mov	r1, r3
 8000bac:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <HAL_SPI_MspInit+0x8c>)
 8000bae:	f000 fa49 	bl	8001044 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000bb2:	bf00      	nop
 8000bb4:	3728      	adds	r7, #40	; 0x28
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40013000 	.word	0x40013000
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40020000 	.word	0x40020000

08000bc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	607b      	str	r3, [r7, #4]
 8000bd2:	4a10      	ldr	r2, [pc, #64]	; (8000c14 <HAL_MspInit+0x4c>)
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <HAL_MspInit+0x4c>)
 8000bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bde:	4b0d      	ldr	r3, [pc, #52]	; (8000c14 <HAL_MspInit+0x4c>)
 8000be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	603b      	str	r3, [r7, #0]
 8000bee:	4a09      	ldr	r2, [pc, #36]	; (8000c14 <HAL_MspInit+0x4c>)
 8000bf0:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <HAL_MspInit+0x4c>)
 8000bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <HAL_MspInit+0x4c>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c02:	603b      	str	r3, [r7, #0]
 8000c04:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c06:	2007      	movs	r0, #7
 8000c08:	f000 f9da 	bl	8000fc0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40023800 	.word	0x40023800

08000c18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <NMI_Handler+0x4>

08000c1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c22:	e7fe      	b.n	8000c22 <HardFault_Handler+0x4>

08000c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <MemManage_Handler+0x4>

08000c2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c2e:	e7fe      	b.n	8000c2e <BusFault_Handler+0x4>

08000c30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <UsageFault_Handler+0x4>

08000c36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c64:	f000 f89c 	bl	8000da0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c70:	4802      	ldr	r0, [pc, #8]	; (8000c7c <OTG_FS_IRQHandler+0x10>)
 8000c72:	f000 fe1d 	bl	80018b0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	2000058c 	.word	0x2000058c

08000c80 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <_sbrk+0x50>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d102      	bne.n	8000c96 <_sbrk+0x16>
		heap_end = &end;
 8000c90:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <_sbrk+0x50>)
 8000c92:	4a10      	ldr	r2, [pc, #64]	; (8000cd4 <_sbrk+0x54>)
 8000c94:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000c96:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <_sbrk+0x50>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <_sbrk+0x50>)
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	466a      	mov	r2, sp
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d907      	bls.n	8000cba <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000caa:	f006 febd 	bl	8007a28 <__errno>
 8000cae:	4602      	mov	r2, r0
 8000cb0:	230c      	movs	r3, #12
 8000cb2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb8:	e006      	b.n	8000cc8 <_sbrk+0x48>
	}

	heap_end += incr;
 8000cba:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <_sbrk+0x50>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	4a03      	ldr	r2, [pc, #12]	; (8000cd0 <_sbrk+0x50>)
 8000cc4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3710      	adds	r7, #16
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	200000ac 	.word	0x200000ac
 8000cd4:	20000894 	.word	0x20000894

08000cd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cdc:	4a06      	ldr	r2, [pc, #24]	; (8000cf8 <SystemInit+0x20>)
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <SystemInit+0x20>)
 8000ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ce4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ce8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d00:	4a0e      	ldr	r2, [pc, #56]	; (8000d3c <HAL_Init+0x40>)
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <HAL_Init+0x40>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d0c:	4a0b      	ldr	r2, [pc, #44]	; (8000d3c <HAL_Init+0x40>)
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <HAL_Init+0x40>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d18:	4a08      	ldr	r2, [pc, #32]	; (8000d3c <HAL_Init+0x40>)
 8000d1a:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <HAL_Init+0x40>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d24:	2003      	movs	r0, #3
 8000d26:	f000 f94b 	bl	8000fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d2a:	2000      	movs	r0, #0
 8000d2c:	f000 f808 	bl	8000d40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d30:	f7ff ff4a 	bl	8000bc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40023c00 	.word	0x40023c00

08000d40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d48:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <HAL_InitTick+0x54>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <HAL_InitTick+0x58>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	4619      	mov	r1, r3
 8000d52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 f963 	bl	800102a <HAL_SYSTICK_Config>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e00e      	b.n	8000d8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2b0f      	cmp	r3, #15
 8000d72:	d80a      	bhi.n	8000d8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d74:	2200      	movs	r2, #0
 8000d76:	6879      	ldr	r1, [r7, #4]
 8000d78:	f04f 30ff 	mov.w	r0, #4294967295
 8000d7c:	f000 f92b 	bl	8000fd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d80:	4a06      	ldr	r2, [pc, #24]	; (8000d9c <HAL_InitTick+0x5c>)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d86:	2300      	movs	r3, #0
 8000d88:	e000      	b.n	8000d8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000000 	.word	0x20000000
 8000d98:	20000008 	.word	0x20000008
 8000d9c:	20000004 	.word	0x20000004

08000da0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_IncTick+0x20>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	461a      	mov	r2, r3
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <HAL_IncTick+0x24>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4413      	add	r3, r2
 8000db0:	4a04      	ldr	r2, [pc, #16]	; (8000dc4 <HAL_IncTick+0x24>)
 8000db2:	6013      	str	r3, [r2, #0]
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	20000008 	.word	0x20000008
 8000dc4:	200001b0 	.word	0x200001b0

08000dc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  return uwTick;
 8000dcc:	4b03      	ldr	r3, [pc, #12]	; (8000ddc <HAL_GetTick+0x14>)
 8000dce:	681b      	ldr	r3, [r3, #0]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	200001b0 	.word	0x200001b0

08000de0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000de8:	f7ff ffee 	bl	8000dc8 <HAL_GetTick>
 8000dec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df8:	d005      	beq.n	8000e06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <HAL_Delay+0x40>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	461a      	mov	r2, r3
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	4413      	add	r3, r2
 8000e04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e06:	bf00      	nop
 8000e08:	f7ff ffde 	bl	8000dc8 <HAL_GetTick>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	1ad2      	subs	r2, r2, r3
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d3f7      	bcc.n	8000e08 <HAL_Delay+0x28>
  {
  }
}
 8000e18:	bf00      	nop
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20000008 	.word	0x20000008

08000e24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e34:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <__NVIC_SetPriorityGrouping+0x44>)
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e3a:	68ba      	ldr	r2, [r7, #8]
 8000e3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e40:	4013      	ands	r3, r2
 8000e42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e56:	4a04      	ldr	r2, [pc, #16]	; (8000e68 <__NVIC_SetPriorityGrouping+0x44>)
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	60d3      	str	r3, [r2, #12]
}
 8000e5c:	bf00      	nop
 8000e5e:	3714      	adds	r7, #20
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e70:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <__NVIC_GetPriorityGrouping+0x18>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	0a1b      	lsrs	r3, r3, #8
 8000e76:	f003 0307 	and.w	r3, r3, #7
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	db0b      	blt.n	8000eb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e9a:	4909      	ldr	r1, [pc, #36]	; (8000ec0 <__NVIC_EnableIRQ+0x38>)
 8000e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea0:	095b      	lsrs	r3, r3, #5
 8000ea2:	79fa      	ldrb	r2, [r7, #7]
 8000ea4:	f002 021f 	and.w	r2, r2, #31
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	fa00 f202 	lsl.w	r2, r0, r2
 8000eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eb2:	bf00      	nop
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	e000e100 	.word	0xe000e100

08000ec4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	6039      	str	r1, [r7, #0]
 8000ece:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	db0a      	blt.n	8000eee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed8:	490d      	ldr	r1, [pc, #52]	; (8000f10 <__NVIC_SetPriority+0x4c>)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	683a      	ldr	r2, [r7, #0]
 8000ee0:	b2d2      	uxtb	r2, r2
 8000ee2:	0112      	lsls	r2, r2, #4
 8000ee4:	b2d2      	uxtb	r2, r2
 8000ee6:	440b      	add	r3, r1
 8000ee8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eec:	e00a      	b.n	8000f04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eee:	4909      	ldr	r1, [pc, #36]	; (8000f14 <__NVIC_SetPriority+0x50>)
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	f003 030f 	and.w	r3, r3, #15
 8000ef6:	3b04      	subs	r3, #4
 8000ef8:	683a      	ldr	r2, [r7, #0]
 8000efa:	b2d2      	uxtb	r2, r2
 8000efc:	0112      	lsls	r2, r2, #4
 8000efe:	b2d2      	uxtb	r2, r2
 8000f00:	440b      	add	r3, r1
 8000f02:	761a      	strb	r2, [r3, #24]
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e000e100 	.word	0xe000e100
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b089      	sub	sp, #36	; 0x24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	f1c3 0307 	rsb	r3, r3, #7
 8000f32:	2b04      	cmp	r3, #4
 8000f34:	bf28      	it	cs
 8000f36:	2304      	movcs	r3, #4
 8000f38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3304      	adds	r3, #4
 8000f3e:	2b06      	cmp	r3, #6
 8000f40:	d902      	bls.n	8000f48 <NVIC_EncodePriority+0x30>
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	3b03      	subs	r3, #3
 8000f46:	e000      	b.n	8000f4a <NVIC_EncodePriority+0x32>
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	1e5a      	subs	r2, r3, #1
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	401a      	ands	r2, r3
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f5e:	2101      	movs	r1, #1
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	fa01 f303 	lsl.w	r3, r1, r3
 8000f66:	1e59      	subs	r1, r3, #1
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f6c:	4313      	orrs	r3, r2
         );
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3724      	adds	r7, #36	; 0x24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
	...

08000f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f8c:	d301      	bcc.n	8000f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e00f      	b.n	8000fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f92:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <SysTick_Config+0x40>)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f9a:	210f      	movs	r1, #15
 8000f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa0:	f7ff ff90 	bl	8000ec4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa4:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <SysTick_Config+0x40>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000faa:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <SysTick_Config+0x40>)
 8000fac:	2207      	movs	r2, #7
 8000fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	e000e010 	.word	0xe000e010

08000fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f7ff ff2b 	bl	8000e24 <__NVIC_SetPriorityGrouping>
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b086      	sub	sp, #24
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	4603      	mov	r3, r0
 8000fde:	60b9      	str	r1, [r7, #8]
 8000fe0:	607a      	str	r2, [r7, #4]
 8000fe2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe8:	f7ff ff40 	bl	8000e6c <__NVIC_GetPriorityGrouping>
 8000fec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	68b9      	ldr	r1, [r7, #8]
 8000ff2:	6978      	ldr	r0, [r7, #20]
 8000ff4:	f7ff ff90 	bl	8000f18 <NVIC_EncodePriority>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ffe:	4611      	mov	r1, r2
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ff5f 	bl	8000ec4 <__NVIC_SetPriority>
}
 8001006:	bf00      	nop
 8001008:	3718      	adds	r7, #24
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	4603      	mov	r3, r0
 8001016:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff ff33 	bl	8000e88 <__NVIC_EnableIRQ>
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b082      	sub	sp, #8
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f7ff ffa2 	bl	8000f7c <SysTick_Config>
 8001038:	4603      	mov	r3, r0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001044:	b480      	push	{r7}
 8001046:	b089      	sub	sp, #36	; 0x24
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001056:	2300      	movs	r3, #0
 8001058:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800105a:	2300      	movs	r3, #0
 800105c:	61fb      	str	r3, [r7, #28]
 800105e:	e16b      	b.n	8001338 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001060:	2201      	movs	r2, #1
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	4013      	ands	r3, r2
 8001072:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	429a      	cmp	r2, r3
 800107a:	f040 815a 	bne.w	8001332 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f003 0303 	and.w	r3, r3, #3
 8001086:	2b01      	cmp	r3, #1
 8001088:	d005      	beq.n	8001096 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001092:	2b02      	cmp	r3, #2
 8001094:	d130      	bne.n	80010f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	2203      	movs	r2, #3
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4013      	ands	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	68da      	ldr	r2, [r3, #12]
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4313      	orrs	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010cc:	2201      	movs	r2, #1
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	091b      	lsrs	r3, r3, #4
 80010e2:	f003 0201 	and.w	r2, r3, #1
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 0303 	and.w	r3, r3, #3
 8001100:	2b03      	cmp	r3, #3
 8001102:	d017      	beq.n	8001134 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	2203      	movs	r2, #3
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	689a      	ldr	r2, [r3, #8]
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 0303 	and.w	r3, r3, #3
 800113c:	2b02      	cmp	r3, #2
 800113e:	d123      	bne.n	8001188 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	08da      	lsrs	r2, r3, #3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3208      	adds	r2, #8
 8001148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800114c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	f003 0307 	and.w	r3, r3, #7
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	220f      	movs	r2, #15
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4013      	ands	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	691a      	ldr	r2, [r3, #16]
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4313      	orrs	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	08da      	lsrs	r2, r3, #3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	3208      	adds	r2, #8
 8001182:	69b9      	ldr	r1, [r7, #24]
 8001184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	2203      	movs	r2, #3
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4013      	ands	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 0203 	and.w	r2, r3, #3
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	f000 80b4 	beq.w	8001332 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	4a5f      	ldr	r2, [pc, #380]	; (800134c <HAL_GPIO_Init+0x308>)
 80011d0:	4b5e      	ldr	r3, [pc, #376]	; (800134c <HAL_GPIO_Init+0x308>)
 80011d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d8:	6453      	str	r3, [r2, #68]	; 0x44
 80011da:	4b5c      	ldr	r3, [pc, #368]	; (800134c <HAL_GPIO_Init+0x308>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011e6:	4a5a      	ldr	r2, [pc, #360]	; (8001350 <HAL_GPIO_Init+0x30c>)
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	089b      	lsrs	r3, r3, #2
 80011ec:	3302      	adds	r3, #2
 80011ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f003 0303 	and.w	r3, r3, #3
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	220f      	movs	r2, #15
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43db      	mvns	r3, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4013      	ands	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a51      	ldr	r2, [pc, #324]	; (8001354 <HAL_GPIO_Init+0x310>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d02b      	beq.n	800126a <HAL_GPIO_Init+0x226>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a50      	ldr	r2, [pc, #320]	; (8001358 <HAL_GPIO_Init+0x314>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d025      	beq.n	8001266 <HAL_GPIO_Init+0x222>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a4f      	ldr	r2, [pc, #316]	; (800135c <HAL_GPIO_Init+0x318>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d01f      	beq.n	8001262 <HAL_GPIO_Init+0x21e>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a4e      	ldr	r2, [pc, #312]	; (8001360 <HAL_GPIO_Init+0x31c>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d019      	beq.n	800125e <HAL_GPIO_Init+0x21a>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a4d      	ldr	r2, [pc, #308]	; (8001364 <HAL_GPIO_Init+0x320>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d013      	beq.n	800125a <HAL_GPIO_Init+0x216>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a4c      	ldr	r2, [pc, #304]	; (8001368 <HAL_GPIO_Init+0x324>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d00d      	beq.n	8001256 <HAL_GPIO_Init+0x212>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a4b      	ldr	r2, [pc, #300]	; (800136c <HAL_GPIO_Init+0x328>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d007      	beq.n	8001252 <HAL_GPIO_Init+0x20e>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a4a      	ldr	r2, [pc, #296]	; (8001370 <HAL_GPIO_Init+0x32c>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d101      	bne.n	800124e <HAL_GPIO_Init+0x20a>
 800124a:	2307      	movs	r3, #7
 800124c:	e00e      	b.n	800126c <HAL_GPIO_Init+0x228>
 800124e:	2308      	movs	r3, #8
 8001250:	e00c      	b.n	800126c <HAL_GPIO_Init+0x228>
 8001252:	2306      	movs	r3, #6
 8001254:	e00a      	b.n	800126c <HAL_GPIO_Init+0x228>
 8001256:	2305      	movs	r3, #5
 8001258:	e008      	b.n	800126c <HAL_GPIO_Init+0x228>
 800125a:	2304      	movs	r3, #4
 800125c:	e006      	b.n	800126c <HAL_GPIO_Init+0x228>
 800125e:	2303      	movs	r3, #3
 8001260:	e004      	b.n	800126c <HAL_GPIO_Init+0x228>
 8001262:	2302      	movs	r3, #2
 8001264:	e002      	b.n	800126c <HAL_GPIO_Init+0x228>
 8001266:	2301      	movs	r3, #1
 8001268:	e000      	b.n	800126c <HAL_GPIO_Init+0x228>
 800126a:	2300      	movs	r3, #0
 800126c:	69fa      	ldr	r2, [r7, #28]
 800126e:	f002 0203 	and.w	r2, r2, #3
 8001272:	0092      	lsls	r2, r2, #2
 8001274:	4093      	lsls	r3, r2
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4313      	orrs	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800127c:	4934      	ldr	r1, [pc, #208]	; (8001350 <HAL_GPIO_Init+0x30c>)
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	089b      	lsrs	r3, r3, #2
 8001282:	3302      	adds	r3, #2
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800128a:	4b3a      	ldr	r3, [pc, #232]	; (8001374 <HAL_GPIO_Init+0x330>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	43db      	mvns	r3, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4013      	ands	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012ae:	4a31      	ldr	r2, [pc, #196]	; (8001374 <HAL_GPIO_Init+0x330>)
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012b4:	4b2f      	ldr	r3, [pc, #188]	; (8001374 <HAL_GPIO_Init+0x330>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	43db      	mvns	r3, r3
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4013      	ands	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d003      	beq.n	80012d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012d8:	4a26      	ldr	r2, [pc, #152]	; (8001374 <HAL_GPIO_Init+0x330>)
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012de:	4b25      	ldr	r3, [pc, #148]	; (8001374 <HAL_GPIO_Init+0x330>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	43db      	mvns	r3, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4013      	ands	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001302:	4a1c      	ldr	r2, [pc, #112]	; (8001374 <HAL_GPIO_Init+0x330>)
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001308:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <HAL_GPIO_Init+0x330>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d003      	beq.n	800132c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	4313      	orrs	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800132c:	4a11      	ldr	r2, [pc, #68]	; (8001374 <HAL_GPIO_Init+0x330>)
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	3301      	adds	r3, #1
 8001336:	61fb      	str	r3, [r7, #28]
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	2b0f      	cmp	r3, #15
 800133c:	f67f ae90 	bls.w	8001060 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001340:	bf00      	nop
 8001342:	3724      	adds	r7, #36	; 0x24
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	40023800 	.word	0x40023800
 8001350:	40013800 	.word	0x40013800
 8001354:	40020000 	.word	0x40020000
 8001358:	40020400 	.word	0x40020400
 800135c:	40020800 	.word	0x40020800
 8001360:	40020c00 	.word	0x40020c00
 8001364:	40021000 	.word	0x40021000
 8001368:	40021400 	.word	0x40021400
 800136c:	40021800 	.word	0x40021800
 8001370:	40021c00 	.word	0x40021c00
 8001374:	40013c00 	.word	0x40013c00

08001378 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	460b      	mov	r3, r1
 8001382:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	691a      	ldr	r2, [r3, #16]
 8001388:	887b      	ldrh	r3, [r7, #2]
 800138a:	4013      	ands	r3, r2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d002      	beq.n	8001396 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001390:	2301      	movs	r3, #1
 8001392:	73fb      	strb	r3, [r7, #15]
 8001394:	e001      	b.n	800139a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001396:	2300      	movs	r3, #0
 8001398:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800139a:	7bfb      	ldrb	r3, [r7, #15]
}
 800139c:	4618      	mov	r0, r3
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	460b      	mov	r3, r1
 80013b2:	807b      	strh	r3, [r7, #2]
 80013b4:	4613      	mov	r3, r2
 80013b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013b8:	787b      	ldrb	r3, [r7, #1]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d003      	beq.n	80013c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013be:	887a      	ldrh	r2, [r7, #2]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013c4:	e003      	b.n	80013ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013c6:	887b      	ldrh	r3, [r7, #2]
 80013c8:	041a      	lsls	r2, r3, #16
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	619a      	str	r2, [r3, #24]
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80013da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013dc:	b08f      	sub	sp, #60	; 0x3c
 80013de:	af0a      	add	r7, sp, #40	; 0x28
 80013e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d101      	bne.n	80013ec <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e054      	b.n	8001496 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d106      	bne.n	800140c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f006 f83c 	bl	8007484 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2203      	movs	r2, #3
 8001410:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800141c:	2b00      	cmp	r3, #0
 800141e:	d102      	bne.n	8001426 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4618      	mov	r0, r3
 800142c:	f003 f9b8 	bl	80047a0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	603b      	str	r3, [r7, #0]
 8001436:	687e      	ldr	r6, [r7, #4]
 8001438:	466d      	mov	r5, sp
 800143a:	f106 0410 	add.w	r4, r6, #16
 800143e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001440:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001442:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001444:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001446:	e894 0003 	ldmia.w	r4, {r0, r1}
 800144a:	e885 0003 	stmia.w	r5, {r0, r1}
 800144e:	1d33      	adds	r3, r6, #4
 8001450:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001452:	6838      	ldr	r0, [r7, #0]
 8001454:	f003 f932 	bl	80046bc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2101      	movs	r1, #1
 800145e:	4618      	mov	r0, r3
 8001460:	f003 f9af 	bl	80047c2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	603b      	str	r3, [r7, #0]
 800146a:	687e      	ldr	r6, [r7, #4]
 800146c:	466d      	mov	r5, sp
 800146e:	f106 0410 	add.w	r4, r6, #16
 8001472:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001474:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001476:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001478:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800147a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800147e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001482:	1d33      	adds	r3, r6, #4
 8001484:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001486:	6838      	ldr	r0, [r7, #0]
 8001488:	f003 fac2 	bl	8004a10 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2201      	movs	r2, #1
 8001490:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3714      	adds	r7, #20
 800149a:	46bd      	mov	sp, r7
 800149c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800149e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800149e:	b590      	push	{r4, r7, lr}
 80014a0:	b089      	sub	sp, #36	; 0x24
 80014a2:	af04      	add	r7, sp, #16
 80014a4:	6078      	str	r0, [r7, #4]
 80014a6:	4608      	mov	r0, r1
 80014a8:	4611      	mov	r1, r2
 80014aa:	461a      	mov	r2, r3
 80014ac:	4603      	mov	r3, r0
 80014ae:	70fb      	strb	r3, [r7, #3]
 80014b0:	460b      	mov	r3, r1
 80014b2:	70bb      	strb	r3, [r7, #2]
 80014b4:	4613      	mov	r3, r2
 80014b6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d101      	bne.n	80014c6 <HAL_HCD_HC_Init+0x28>
 80014c2:	2302      	movs	r3, #2
 80014c4:	e076      	b.n	80015b4 <HAL_HCD_HC_Init+0x116>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2201      	movs	r2, #1
 80014ca:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80014ce:	78fb      	ldrb	r3, [r7, #3]
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	212c      	movs	r1, #44	; 0x2c
 80014d4:	fb01 f303 	mul.w	r3, r1, r3
 80014d8:	4413      	add	r3, r2
 80014da:	333d      	adds	r3, #61	; 0x3d
 80014dc:	2200      	movs	r2, #0
 80014de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80014e0:	78fb      	ldrb	r3, [r7, #3]
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	212c      	movs	r1, #44	; 0x2c
 80014e6:	fb01 f303 	mul.w	r3, r1, r3
 80014ea:	4413      	add	r3, r2
 80014ec:	3338      	adds	r3, #56	; 0x38
 80014ee:	787a      	ldrb	r2, [r7, #1]
 80014f0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80014f2:	78fb      	ldrb	r3, [r7, #3]
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	212c      	movs	r1, #44	; 0x2c
 80014f8:	fb01 f303 	mul.w	r3, r1, r3
 80014fc:	4413      	add	r3, r2
 80014fe:	3340      	adds	r3, #64	; 0x40
 8001500:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001502:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001504:	78fb      	ldrb	r3, [r7, #3]
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	212c      	movs	r1, #44	; 0x2c
 800150a:	fb01 f303 	mul.w	r3, r1, r3
 800150e:	4413      	add	r3, r2
 8001510:	3339      	adds	r3, #57	; 0x39
 8001512:	78fa      	ldrb	r2, [r7, #3]
 8001514:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001516:	78fb      	ldrb	r3, [r7, #3]
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	212c      	movs	r1, #44	; 0x2c
 800151c:	fb01 f303 	mul.w	r3, r1, r3
 8001520:	4413      	add	r3, r2
 8001522:	333f      	adds	r3, #63	; 0x3f
 8001524:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001528:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800152a:	78fb      	ldrb	r3, [r7, #3]
 800152c:	78ba      	ldrb	r2, [r7, #2]
 800152e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001532:	b2d0      	uxtb	r0, r2
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	212c      	movs	r1, #44	; 0x2c
 8001538:	fb01 f303 	mul.w	r3, r1, r3
 800153c:	4413      	add	r3, r2
 800153e:	333a      	adds	r3, #58	; 0x3a
 8001540:	4602      	mov	r2, r0
 8001542:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001544:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001548:	2b00      	cmp	r3, #0
 800154a:	da09      	bge.n	8001560 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800154c:	78fb      	ldrb	r3, [r7, #3]
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	212c      	movs	r1, #44	; 0x2c
 8001552:	fb01 f303 	mul.w	r3, r1, r3
 8001556:	4413      	add	r3, r2
 8001558:	333b      	adds	r3, #59	; 0x3b
 800155a:	2201      	movs	r2, #1
 800155c:	701a      	strb	r2, [r3, #0]
 800155e:	e008      	b.n	8001572 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001560:	78fb      	ldrb	r3, [r7, #3]
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	212c      	movs	r1, #44	; 0x2c
 8001566:	fb01 f303 	mul.w	r3, r1, r3
 800156a:	4413      	add	r3, r2
 800156c:	333b      	adds	r3, #59	; 0x3b
 800156e:	2200      	movs	r2, #0
 8001570:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001572:	78fb      	ldrb	r3, [r7, #3]
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	212c      	movs	r1, #44	; 0x2c
 8001578:	fb01 f303 	mul.w	r3, r1, r3
 800157c:	4413      	add	r3, r2
 800157e:	333c      	adds	r3, #60	; 0x3c
 8001580:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001584:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6818      	ldr	r0, [r3, #0]
 800158a:	787c      	ldrb	r4, [r7, #1]
 800158c:	78ba      	ldrb	r2, [r7, #2]
 800158e:	78f9      	ldrb	r1, [r7, #3]
 8001590:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001592:	9302      	str	r3, [sp, #8]
 8001594:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001598:	9301      	str	r3, [sp, #4]
 800159a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800159e:	9300      	str	r3, [sp, #0]
 80015a0:	4623      	mov	r3, r4
 80015a2:	f003 fbbf 	bl	8004d24 <USB_HC_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd90      	pop	{r4, r7, pc}

080015bc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80015c8:	2300      	movs	r3, #0
 80015ca:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d101      	bne.n	80015da <HAL_HCD_HC_Halt+0x1e>
 80015d6:	2302      	movs	r3, #2
 80015d8:	e00f      	b.n	80015fa <HAL_HCD_HC_Halt+0x3e>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2201      	movs	r2, #1
 80015de:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	78fa      	ldrb	r2, [r7, #3]
 80015e8:	4611      	mov	r1, r2
 80015ea:	4618      	mov	r0, r3
 80015ec:	f003 fe09 	bl	8005202 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80015f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
	...

08001604 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	4608      	mov	r0, r1
 800160e:	4611      	mov	r1, r2
 8001610:	461a      	mov	r2, r3
 8001612:	4603      	mov	r3, r0
 8001614:	70fb      	strb	r3, [r7, #3]
 8001616:	460b      	mov	r3, r1
 8001618:	70bb      	strb	r3, [r7, #2]
 800161a:	4613      	mov	r3, r2
 800161c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800161e:	78fb      	ldrb	r3, [r7, #3]
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	212c      	movs	r1, #44	; 0x2c
 8001624:	fb01 f303 	mul.w	r3, r1, r3
 8001628:	4413      	add	r3, r2
 800162a:	333b      	adds	r3, #59	; 0x3b
 800162c:	78ba      	ldrb	r2, [r7, #2]
 800162e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001630:	78fb      	ldrb	r3, [r7, #3]
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	212c      	movs	r1, #44	; 0x2c
 8001636:	fb01 f303 	mul.w	r3, r1, r3
 800163a:	4413      	add	r3, r2
 800163c:	333f      	adds	r3, #63	; 0x3f
 800163e:	787a      	ldrb	r2, [r7, #1]
 8001640:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001642:	7c3b      	ldrb	r3, [r7, #16]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d112      	bne.n	800166e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001648:	78fb      	ldrb	r3, [r7, #3]
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	212c      	movs	r1, #44	; 0x2c
 800164e:	fb01 f303 	mul.w	r3, r1, r3
 8001652:	4413      	add	r3, r2
 8001654:	3342      	adds	r3, #66	; 0x42
 8001656:	2203      	movs	r2, #3
 8001658:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800165a:	78fb      	ldrb	r3, [r7, #3]
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	212c      	movs	r1, #44	; 0x2c
 8001660:	fb01 f303 	mul.w	r3, r1, r3
 8001664:	4413      	add	r3, r2
 8001666:	333d      	adds	r3, #61	; 0x3d
 8001668:	7f3a      	ldrb	r2, [r7, #28]
 800166a:	701a      	strb	r2, [r3, #0]
 800166c:	e008      	b.n	8001680 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800166e:	78fb      	ldrb	r3, [r7, #3]
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	212c      	movs	r1, #44	; 0x2c
 8001674:	fb01 f303 	mul.w	r3, r1, r3
 8001678:	4413      	add	r3, r2
 800167a:	3342      	adds	r3, #66	; 0x42
 800167c:	2202      	movs	r2, #2
 800167e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001680:	787b      	ldrb	r3, [r7, #1]
 8001682:	2b03      	cmp	r3, #3
 8001684:	f200 80c6 	bhi.w	8001814 <HAL_HCD_HC_SubmitRequest+0x210>
 8001688:	a201      	add	r2, pc, #4	; (adr r2, 8001690 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800168a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800168e:	bf00      	nop
 8001690:	080016a1 	.word	0x080016a1
 8001694:	08001801 	.word	0x08001801
 8001698:	08001705 	.word	0x08001705
 800169c:	08001783 	.word	0x08001783
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80016a0:	7c3b      	ldrb	r3, [r7, #16]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	f040 80b8 	bne.w	8001818 <HAL_HCD_HC_SubmitRequest+0x214>
 80016a8:	78bb      	ldrb	r3, [r7, #2]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f040 80b4 	bne.w	8001818 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80016b0:	8b3b      	ldrh	r3, [r7, #24]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d108      	bne.n	80016c8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80016b6:	78fb      	ldrb	r3, [r7, #3]
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	212c      	movs	r1, #44	; 0x2c
 80016bc:	fb01 f303 	mul.w	r3, r1, r3
 80016c0:	4413      	add	r3, r2
 80016c2:	3355      	adds	r3, #85	; 0x55
 80016c4:	2201      	movs	r2, #1
 80016c6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80016c8:	78fb      	ldrb	r3, [r7, #3]
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	212c      	movs	r1, #44	; 0x2c
 80016ce:	fb01 f303 	mul.w	r3, r1, r3
 80016d2:	4413      	add	r3, r2
 80016d4:	3355      	adds	r3, #85	; 0x55
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d109      	bne.n	80016f0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016dc:	78fb      	ldrb	r3, [r7, #3]
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	212c      	movs	r1, #44	; 0x2c
 80016e2:	fb01 f303 	mul.w	r3, r1, r3
 80016e6:	4413      	add	r3, r2
 80016e8:	3342      	adds	r3, #66	; 0x42
 80016ea:	2200      	movs	r2, #0
 80016ec:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80016ee:	e093      	b.n	8001818 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016f0:	78fb      	ldrb	r3, [r7, #3]
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	212c      	movs	r1, #44	; 0x2c
 80016f6:	fb01 f303 	mul.w	r3, r1, r3
 80016fa:	4413      	add	r3, r2
 80016fc:	3342      	adds	r3, #66	; 0x42
 80016fe:	2202      	movs	r2, #2
 8001700:	701a      	strb	r2, [r3, #0]
      break;
 8001702:	e089      	b.n	8001818 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001704:	78bb      	ldrb	r3, [r7, #2]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d11d      	bne.n	8001746 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800170a:	78fb      	ldrb	r3, [r7, #3]
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	212c      	movs	r1, #44	; 0x2c
 8001710:	fb01 f303 	mul.w	r3, r1, r3
 8001714:	4413      	add	r3, r2
 8001716:	3355      	adds	r3, #85	; 0x55
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d109      	bne.n	8001732 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800171e:	78fb      	ldrb	r3, [r7, #3]
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	212c      	movs	r1, #44	; 0x2c
 8001724:	fb01 f303 	mul.w	r3, r1, r3
 8001728:	4413      	add	r3, r2
 800172a:	3342      	adds	r3, #66	; 0x42
 800172c:	2200      	movs	r2, #0
 800172e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001730:	e073      	b.n	800181a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001732:	78fb      	ldrb	r3, [r7, #3]
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	212c      	movs	r1, #44	; 0x2c
 8001738:	fb01 f303 	mul.w	r3, r1, r3
 800173c:	4413      	add	r3, r2
 800173e:	3342      	adds	r3, #66	; 0x42
 8001740:	2202      	movs	r2, #2
 8001742:	701a      	strb	r2, [r3, #0]
      break;
 8001744:	e069      	b.n	800181a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001746:	78fb      	ldrb	r3, [r7, #3]
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	212c      	movs	r1, #44	; 0x2c
 800174c:	fb01 f303 	mul.w	r3, r1, r3
 8001750:	4413      	add	r3, r2
 8001752:	3354      	adds	r3, #84	; 0x54
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d109      	bne.n	800176e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800175a:	78fb      	ldrb	r3, [r7, #3]
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	212c      	movs	r1, #44	; 0x2c
 8001760:	fb01 f303 	mul.w	r3, r1, r3
 8001764:	4413      	add	r3, r2
 8001766:	3342      	adds	r3, #66	; 0x42
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]
      break;
 800176c:	e055      	b.n	800181a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800176e:	78fb      	ldrb	r3, [r7, #3]
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	212c      	movs	r1, #44	; 0x2c
 8001774:	fb01 f303 	mul.w	r3, r1, r3
 8001778:	4413      	add	r3, r2
 800177a:	3342      	adds	r3, #66	; 0x42
 800177c:	2202      	movs	r2, #2
 800177e:	701a      	strb	r2, [r3, #0]
      break;
 8001780:	e04b      	b.n	800181a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001782:	78bb      	ldrb	r3, [r7, #2]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d11d      	bne.n	80017c4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001788:	78fb      	ldrb	r3, [r7, #3]
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	212c      	movs	r1, #44	; 0x2c
 800178e:	fb01 f303 	mul.w	r3, r1, r3
 8001792:	4413      	add	r3, r2
 8001794:	3355      	adds	r3, #85	; 0x55
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d109      	bne.n	80017b0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800179c:	78fb      	ldrb	r3, [r7, #3]
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	212c      	movs	r1, #44	; 0x2c
 80017a2:	fb01 f303 	mul.w	r3, r1, r3
 80017a6:	4413      	add	r3, r2
 80017a8:	3342      	adds	r3, #66	; 0x42
 80017aa:	2200      	movs	r2, #0
 80017ac:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80017ae:	e034      	b.n	800181a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017b0:	78fb      	ldrb	r3, [r7, #3]
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	212c      	movs	r1, #44	; 0x2c
 80017b6:	fb01 f303 	mul.w	r3, r1, r3
 80017ba:	4413      	add	r3, r2
 80017bc:	3342      	adds	r3, #66	; 0x42
 80017be:	2202      	movs	r2, #2
 80017c0:	701a      	strb	r2, [r3, #0]
      break;
 80017c2:	e02a      	b.n	800181a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80017c4:	78fb      	ldrb	r3, [r7, #3]
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	212c      	movs	r1, #44	; 0x2c
 80017ca:	fb01 f303 	mul.w	r3, r1, r3
 80017ce:	4413      	add	r3, r2
 80017d0:	3354      	adds	r3, #84	; 0x54
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d109      	bne.n	80017ec <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017d8:	78fb      	ldrb	r3, [r7, #3]
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	212c      	movs	r1, #44	; 0x2c
 80017de:	fb01 f303 	mul.w	r3, r1, r3
 80017e2:	4413      	add	r3, r2
 80017e4:	3342      	adds	r3, #66	; 0x42
 80017e6:	2200      	movs	r2, #0
 80017e8:	701a      	strb	r2, [r3, #0]
      break;
 80017ea:	e016      	b.n	800181a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017ec:	78fb      	ldrb	r3, [r7, #3]
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	212c      	movs	r1, #44	; 0x2c
 80017f2:	fb01 f303 	mul.w	r3, r1, r3
 80017f6:	4413      	add	r3, r2
 80017f8:	3342      	adds	r3, #66	; 0x42
 80017fa:	2202      	movs	r2, #2
 80017fc:	701a      	strb	r2, [r3, #0]
      break;
 80017fe:	e00c      	b.n	800181a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001800:	78fb      	ldrb	r3, [r7, #3]
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	212c      	movs	r1, #44	; 0x2c
 8001806:	fb01 f303 	mul.w	r3, r1, r3
 800180a:	4413      	add	r3, r2
 800180c:	3342      	adds	r3, #66	; 0x42
 800180e:	2200      	movs	r2, #0
 8001810:	701a      	strb	r2, [r3, #0]
      break;
 8001812:	e002      	b.n	800181a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001814:	bf00      	nop
 8001816:	e000      	b.n	800181a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001818:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800181a:	78fb      	ldrb	r3, [r7, #3]
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	212c      	movs	r1, #44	; 0x2c
 8001820:	fb01 f303 	mul.w	r3, r1, r3
 8001824:	4413      	add	r3, r2
 8001826:	3344      	adds	r3, #68	; 0x44
 8001828:	697a      	ldr	r2, [r7, #20]
 800182a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800182c:	78fb      	ldrb	r3, [r7, #3]
 800182e:	8b3a      	ldrh	r2, [r7, #24]
 8001830:	6879      	ldr	r1, [r7, #4]
 8001832:	202c      	movs	r0, #44	; 0x2c
 8001834:	fb00 f303 	mul.w	r3, r0, r3
 8001838:	440b      	add	r3, r1
 800183a:	334c      	adds	r3, #76	; 0x4c
 800183c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800183e:	78fb      	ldrb	r3, [r7, #3]
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	212c      	movs	r1, #44	; 0x2c
 8001844:	fb01 f303 	mul.w	r3, r1, r3
 8001848:	4413      	add	r3, r2
 800184a:	3360      	adds	r3, #96	; 0x60
 800184c:	2200      	movs	r2, #0
 800184e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001850:	78fb      	ldrb	r3, [r7, #3]
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	212c      	movs	r1, #44	; 0x2c
 8001856:	fb01 f303 	mul.w	r3, r1, r3
 800185a:	4413      	add	r3, r2
 800185c:	3350      	adds	r3, #80	; 0x50
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001862:	78fb      	ldrb	r3, [r7, #3]
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	212c      	movs	r1, #44	; 0x2c
 8001868:	fb01 f303 	mul.w	r3, r1, r3
 800186c:	4413      	add	r3, r2
 800186e:	3339      	adds	r3, #57	; 0x39
 8001870:	78fa      	ldrb	r2, [r7, #3]
 8001872:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001874:	78fb      	ldrb	r3, [r7, #3]
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	212c      	movs	r1, #44	; 0x2c
 800187a:	fb01 f303 	mul.w	r3, r1, r3
 800187e:	4413      	add	r3, r2
 8001880:	3361      	adds	r3, #97	; 0x61
 8001882:	2200      	movs	r2, #0
 8001884:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6818      	ldr	r0, [r3, #0]
 800188a:	78fb      	ldrb	r3, [r7, #3]
 800188c:	222c      	movs	r2, #44	; 0x2c
 800188e:	fb02 f303 	mul.w	r3, r2, r3
 8001892:	3338      	adds	r3, #56	; 0x38
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	18d1      	adds	r1, r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	b2db      	uxtb	r3, r3
 800189e:	461a      	mov	r2, r3
 80018a0:	f003 fb56 	bl	8004f50 <USB_HC_StartXfer>
 80018a4:	4603      	mov	r3, r0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop

080018b0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f003 f85f 	bl	800498a <USB_GetMode>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	f040 80ef 	bne.w	8001ab2 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4618      	mov	r0, r3
 80018da:	f003 f843 	bl	8004964 <USB_ReadInterrupts>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f000 80e5 	beq.w	8001ab0 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f003 f83a 	bl	8004964 <USB_ReadInterrupts>
 80018f0:	4603      	mov	r3, r0
 80018f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80018fa:	d104      	bne.n	8001906 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001904:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f003 f82a 	bl	8004964 <USB_ReadInterrupts>
 8001910:	4603      	mov	r3, r0
 8001912:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001916:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800191a:	d104      	bne.n	8001926 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001924:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f003 f81a 	bl	8004964 <USB_ReadInterrupts>
 8001930:	4603      	mov	r3, r0
 8001932:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001936:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800193a:	d104      	bne.n	8001946 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001944:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f003 f80a 	bl	8004964 <USB_ReadInterrupts>
 8001950:	4603      	mov	r3, r0
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b02      	cmp	r3, #2
 8001958:	d103      	bne.n	8001962 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2202      	movs	r2, #2
 8001960:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f002 fffc 	bl	8004964 <USB_ReadInterrupts>
 800196c:	4603      	mov	r3, r0
 800196e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001972:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001976:	d115      	bne.n	80019a4 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001980:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	2b00      	cmp	r3, #0
 8001990:	d108      	bne.n	80019a4 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f005 fdf4 	bl	8007580 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2101      	movs	r1, #1
 800199e:	4618      	mov	r0, r3
 80019a0:	f003 f8f4 	bl	8004b8c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f002 ffdb 	bl	8004964 <USB_ReadInterrupts>
 80019ae:	4603      	mov	r3, r0
 80019b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019b8:	d102      	bne.n	80019c0 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f001 fa18 	bl	8002df0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f002 ffcd 	bl	8004964 <USB_ReadInterrupts>
 80019ca:	4603      	mov	r3, r0
 80019cc:	f003 0308 	and.w	r3, r3, #8
 80019d0:	2b08      	cmp	r3, #8
 80019d2:	d106      	bne.n	80019e2 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f005 fdb7 	bl	8007548 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2208      	movs	r2, #8
 80019e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f002 ffbc 	bl	8004964 <USB_ReadInterrupts>
 80019ec:	4603      	mov	r3, r0
 80019ee:	f003 0310 	and.w	r3, r3, #16
 80019f2:	2b10      	cmp	r3, #16
 80019f4:	d101      	bne.n	80019fa <HAL_HCD_IRQHandler+0x14a>
 80019f6:	2301      	movs	r3, #1
 80019f8:	e000      	b.n	80019fc <HAL_HCD_IRQHandler+0x14c>
 80019fa:	2300      	movs	r3, #0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d012      	beq.n	8001a26 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	6812      	ldr	r2, [r2, #0]
 8001a08:	6992      	ldr	r2, [r2, #24]
 8001a0a:	f022 0210 	bic.w	r2, r2, #16
 8001a0e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f001 f91c 	bl	8002c4e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	6812      	ldr	r2, [r2, #0]
 8001a1e:	6992      	ldr	r2, [r2, #24]
 8001a20:	f042 0210 	orr.w	r2, r2, #16
 8001a24:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f002 ff9a 	bl	8004964 <USB_ReadInterrupts>
 8001a30:	4603      	mov	r3, r0
 8001a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a3a:	d13a      	bne.n	8001ab2 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f003 fbcd 	bl	80051e0 <USB_HC_ReadInterrupt>
 8001a46:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a48:	2300      	movs	r3, #0
 8001a4a:	617b      	str	r3, [r7, #20]
 8001a4c:	e025      	b.n	8001a9a <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	f003 030f 	and.w	r3, r3, #15
 8001a54:	68ba      	ldr	r2, [r7, #8]
 8001a56:	fa22 f303 	lsr.w	r3, r2, r3
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d018      	beq.n	8001a94 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	015a      	lsls	r2, r3, #5
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	4413      	add	r3, r2
 8001a6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a78:	d106      	bne.n	8001a88 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	4619      	mov	r1, r3
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f000 f8ab 	bl	8001bdc <HCD_HC_IN_IRQHandler>
 8001a86:	e005      	b.n	8001a94 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f000 fcd4 	bl	800243c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	3301      	adds	r3, #1
 8001a98:	617b      	str	r3, [r7, #20]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	689a      	ldr	r2, [r3, #8]
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d8d4      	bhi.n	8001a4e <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aac:	615a      	str	r2, [r3, #20]
 8001aae:	e000      	b.n	8001ab2 <HAL_HCD_IRQHandler+0x202>
      return;
 8001ab0:	bf00      	nop
    }
  }
}
 8001ab2:	3718      	adds	r7, #24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d101      	bne.n	8001ace <HAL_HCD_Start+0x16>
 8001aca:	2302      	movs	r3, #2
 8001acc:	e013      	b.n	8001af6 <HAL_HCD_Start+0x3e>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f002 fe4f 	bl	800477e <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f003 f8b8 	bl	8004c5c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b082      	sub	sp, #8
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d101      	bne.n	8001b14 <HAL_HCD_Stop+0x16>
 8001b10:	2302      	movs	r3, #2
 8001b12:	e00d      	b.n	8001b30 <HAL_HCD_Stop+0x32>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f003 fcd1 	bl	80054c8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f003 f85d 	bl	8004c04 <USB_ResetPort>
 8001b4a:	4603      	mov	r3, r0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001b60:	78fb      	ldrb	r3, [r7, #3]
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	212c      	movs	r1, #44	; 0x2c
 8001b66:	fb01 f303 	mul.w	r3, r1, r3
 8001b6a:	4413      	add	r3, r2
 8001b6c:	3360      	adds	r3, #96	; 0x60
 8001b6e:	781b      	ldrb	r3, [r3, #0]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	460b      	mov	r3, r1
 8001b86:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001b88:	78fb      	ldrb	r3, [r7, #3]
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	212c      	movs	r1, #44	; 0x2c
 8001b8e:	fb01 f303 	mul.w	r3, r1, r3
 8001b92:	4413      	add	r3, r2
 8001b94:	3350      	adds	r3, #80	; 0x50
 8001b96:	681b      	ldr	r3, [r3, #0]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f003 f8a5 	bl	8004d00 <USB_GetCurrentFrame>
 8001bb6:	4603      	mov	r3, r0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f003 f880 	bl	8004cd2 <USB_GetHostSpeed>
 8001bd2:	4603      	mov	r3, r0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	460b      	mov	r3, r1
 8001be6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001bf2:	78fb      	ldrb	r3, [r7, #3]
 8001bf4:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	015a      	lsls	r2, r3, #5
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	2b04      	cmp	r3, #4
 8001c0a:	d11a      	bne.n	8001c42 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	015a      	lsls	r2, r3, #5
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	4413      	add	r3, r2
 8001c14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c18:	461a      	mov	r2, r3
 8001c1a:	2304      	movs	r3, #4
 8001c1c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	015a      	lsls	r2, r3, #5
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	4413      	add	r3, r2
 8001c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	015a      	lsls	r2, r3, #5
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	4413      	add	r3, r2
 8001c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	f043 0302 	orr.w	r3, r3, #2
 8001c3e:	60cb      	str	r3, [r1, #12]
 8001c40:	e105      	b.n	8001e4e <HCD_HC_IN_IRQHandler+0x272>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	015a      	lsls	r2, r3, #5
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	4413      	add	r3, r2
 8001c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c58:	d12c      	bne.n	8001cb4 <HCD_HC_IN_IRQHandler+0xd8>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	015a      	lsls	r2, r3, #5
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	4413      	add	r3, r2
 8001c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c66:	461a      	mov	r2, r3
 8001c68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c6c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	212c      	movs	r1, #44	; 0x2c
 8001c74:	fb01 f303 	mul.w	r3, r1, r3
 8001c78:	4413      	add	r3, r2
 8001c7a:	3361      	adds	r3, #97	; 0x61
 8001c7c:	2207      	movs	r2, #7
 8001c7e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	015a      	lsls	r2, r3, #5
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	4413      	add	r3, r2
 8001c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	015a      	lsls	r2, r3, #5
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	4413      	add	r3, r2
 8001c96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	f043 0302 	orr.w	r3, r3, #2
 8001ca0:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	4611      	mov	r1, r2
 8001cac:	4618      	mov	r0, r3
 8001cae:	f003 faa8 	bl	8005202 <USB_HC_Halt>
 8001cb2:	e0cc      	b.n	8001e4e <HCD_HC_IN_IRQHandler+0x272>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	015a      	lsls	r2, r3, #5
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	4413      	add	r3, r2
 8001cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 0320 	and.w	r3, r3, #32
 8001cc6:	2b20      	cmp	r3, #32
 8001cc8:	d109      	bne.n	8001cde <HCD_HC_IN_IRQHandler+0x102>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	015a      	lsls	r2, r3, #5
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	2320      	movs	r3, #32
 8001cda:	6093      	str	r3, [r2, #8]
 8001cdc:	e0b7      	b.n	8001e4e <HCD_HC_IN_IRQHandler+0x272>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	015a      	lsls	r2, r3, #5
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f003 0308 	and.w	r3, r3, #8
 8001cf0:	2b08      	cmp	r3, #8
 8001cf2:	d134      	bne.n	8001d5e <HCD_HC_IN_IRQHandler+0x182>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	015a      	lsls	r2, r3, #5
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d00:	4619      	mov	r1, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	015a      	lsls	r2, r3, #5
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	4413      	add	r3, r2
 8001d0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	f043 0302 	orr.w	r3, r3, #2
 8001d14:	60cb      	str	r3, [r1, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	212c      	movs	r1, #44	; 0x2c
 8001d1c:	fb01 f303 	mul.w	r3, r1, r3
 8001d20:	4413      	add	r3, r2
 8001d22:	3361      	adds	r3, #97	; 0x61
 8001d24:	2205      	movs	r2, #5
 8001d26:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	015a      	lsls	r2, r3, #5
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	4413      	add	r3, r2
 8001d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d34:	461a      	mov	r2, r3
 8001d36:	2310      	movs	r3, #16
 8001d38:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	015a      	lsls	r2, r3, #5
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	4413      	add	r3, r2
 8001d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d46:	461a      	mov	r2, r3
 8001d48:	2308      	movs	r3, #8
 8001d4a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	4611      	mov	r1, r2
 8001d56:	4618      	mov	r0, r3
 8001d58:	f003 fa53 	bl	8005202 <USB_HC_Halt>
 8001d5c:	e077      	b.n	8001e4e <HCD_HC_IN_IRQHandler+0x272>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	015a      	lsls	r2, r3, #5
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	4413      	add	r3, r2
 8001d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d74:	d135      	bne.n	8001de2 <HCD_HC_IN_IRQHandler+0x206>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	015a      	lsls	r2, r3, #5
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d82:	4619      	mov	r1, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	015a      	lsls	r2, r3, #5
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	f043 0302 	orr.w	r3, r3, #2
 8001d96:	60cb      	str	r3, [r1, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	212c      	movs	r1, #44	; 0x2c
 8001d9e:	fb01 f303 	mul.w	r3, r1, r3
 8001da2:	4413      	add	r3, r2
 8001da4:	3361      	adds	r3, #97	; 0x61
 8001da6:	2208      	movs	r2, #8
 8001da8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	015a      	lsls	r2, r3, #5
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	4413      	add	r3, r2
 8001db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001db6:	461a      	mov	r2, r3
 8001db8:	2310      	movs	r3, #16
 8001dba:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	015a      	lsls	r2, r3, #5
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc8:	461a      	mov	r2, r3
 8001dca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dce:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68fa      	ldr	r2, [r7, #12]
 8001dd6:	b2d2      	uxtb	r2, r2
 8001dd8:	4611      	mov	r1, r2
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f003 fa11 	bl	8005202 <USB_HC_Halt>
 8001de0:	e035      	b.n	8001e4e <HCD_HC_IN_IRQHandler+0x272>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	015a      	lsls	r2, r3, #5
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	4413      	add	r3, r2
 8001dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001df4:	2b80      	cmp	r3, #128	; 0x80
 8001df6:	d12a      	bne.n	8001e4e <HCD_HC_IN_IRQHandler+0x272>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	015a      	lsls	r2, r3, #5
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	4413      	add	r3, r2
 8001e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e04:	4619      	mov	r1, r3
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	015a      	lsls	r2, r3, #5
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	f043 0302 	orr.w	r3, r3, #2
 8001e18:	60cb      	str	r3, [r1, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	212c      	movs	r1, #44	; 0x2c
 8001e20:	fb01 f303 	mul.w	r3, r1, r3
 8001e24:	4413      	add	r3, r2
 8001e26:	3361      	adds	r3, #97	; 0x61
 8001e28:	2206      	movs	r2, #6
 8001e2a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68fa      	ldr	r2, [r7, #12]
 8001e32:	b2d2      	uxtb	r2, r2
 8001e34:	4611      	mov	r1, r2
 8001e36:	4618      	mov	r0, r3
 8001e38:	f003 f9e3 	bl	8005202 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	015a      	lsls	r2, r3, #5
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	4413      	add	r3, r2
 8001e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e48:	461a      	mov	r2, r3
 8001e4a:	2380      	movs	r3, #128	; 0x80
 8001e4c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	015a      	lsls	r2, r3, #5
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	4413      	add	r3, r2
 8001e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e64:	d123      	bne.n	8001eae <HCD_HC_IN_IRQHandler+0x2d2>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	015a      	lsls	r2, r3, #5
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e72:	4619      	mov	r1, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	015a      	lsls	r2, r3, #5
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	f043 0302 	orr.w	r3, r3, #2
 8001e86:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	b2d2      	uxtb	r2, r2
 8001e90:	4611      	mov	r1, r2
 8001e92:	4618      	mov	r0, r3
 8001e94:	f003 f9b5 	bl	8005202 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	015a      	lsls	r2, r3, #5
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eaa:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001eac:	e2c2      	b.n	8002434 <HCD_HC_IN_IRQHandler+0x858>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	015a      	lsls	r2, r3, #5
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	f040 811f 	bne.w	8002104 <HCD_HC_IN_IRQHandler+0x528>
    if (hhcd->Init.dma_enable != 0U)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d019      	beq.n	8001f02 <HCD_HC_IN_IRQHandler+0x326>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	212c      	movs	r1, #44	; 0x2c
 8001ed4:	fb01 f303 	mul.w	r3, r1, r3
 8001ed8:	4413      	add	r3, r2
 8001eda:	3348      	adds	r3, #72	; 0x48
 8001edc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	0159      	lsls	r1, r3, #5
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	440b      	add	r3, r1
 8001ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001ef0:	1ad2      	subs	r2, r2, r3
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	202c      	movs	r0, #44	; 0x2c
 8001ef8:	fb00 f303 	mul.w	r3, r0, r3
 8001efc:	440b      	add	r3, r1
 8001efe:	3350      	adds	r3, #80	; 0x50
 8001f00:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	212c      	movs	r1, #44	; 0x2c
 8001f08:	fb01 f303 	mul.w	r3, r1, r3
 8001f0c:	4413      	add	r3, r2
 8001f0e:	3361      	adds	r3, #97	; 0x61
 8001f10:	2201      	movs	r2, #1
 8001f12:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	212c      	movs	r1, #44	; 0x2c
 8001f1a:	fb01 f303 	mul.w	r3, r1, r3
 8001f1e:	4413      	add	r3, r2
 8001f20:	335c      	adds	r3, #92	; 0x5c
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	015a      	lsls	r2, r3, #5
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f32:	461a      	mov	r2, r3
 8001f34:	2301      	movs	r3, #1
 8001f36:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	212c      	movs	r1, #44	; 0x2c
 8001f3e:	fb01 f303 	mul.w	r3, r1, r3
 8001f42:	4413      	add	r3, r2
 8001f44:	333f      	adds	r3, #63	; 0x3f
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d009      	beq.n	8001f60 <HCD_HC_IN_IRQHandler+0x384>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	212c      	movs	r1, #44	; 0x2c
 8001f52:	fb01 f303 	mul.w	r3, r1, r3
 8001f56:	4413      	add	r3, r2
 8001f58:	333f      	adds	r3, #63	; 0x3f
 8001f5a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d122      	bne.n	8001fa6 <HCD_HC_IN_IRQHandler+0x3ca>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	015a      	lsls	r2, r3, #5
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	4413      	add	r3, r2
 8001f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	015a      	lsls	r2, r3, #5
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	4413      	add	r3, r2
 8001f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	f043 0302 	orr.w	r3, r3, #2
 8001f80:	60cb      	str	r3, [r1, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	b2d2      	uxtb	r2, r2
 8001f8a:	4611      	mov	r1, r2
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f003 f938 	bl	8005202 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	015a      	lsls	r2, r3, #5
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	4413      	add	r3, r2
 8001f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	2310      	movs	r3, #16
 8001fa2:	6093      	str	r3, [r2, #8]
 8001fa4:	e069      	b.n	800207a <HCD_HC_IN_IRQHandler+0x49e>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	212c      	movs	r1, #44	; 0x2c
 8001fac:	fb01 f303 	mul.w	r3, r1, r3
 8001fb0:	4413      	add	r3, r2
 8001fb2:	333f      	adds	r3, #63	; 0x3f
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	2b03      	cmp	r3, #3
 8001fb8:	d129      	bne.n	800200e <HCD_HC_IN_IRQHandler+0x432>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	015a      	lsls	r2, r3, #5
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	015a      	lsls	r2, r3, #5
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	4413      	add	r3, r2
 8001fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001fda:	600b      	str	r3, [r1, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	212c      	movs	r1, #44	; 0x2c
 8001fe2:	fb01 f303 	mul.w	r3, r1, r3
 8001fe6:	4413      	add	r3, r2
 8001fe8:	3360      	adds	r3, #96	; 0x60
 8001fea:	2201      	movs	r2, #1
 8001fec:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	b2d8      	uxtb	r0, r3
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	212c      	movs	r1, #44	; 0x2c
 8001ff8:	fb01 f303 	mul.w	r3, r1, r3
 8001ffc:	4413      	add	r3, r2
 8001ffe:	3360      	adds	r3, #96	; 0x60
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	461a      	mov	r2, r3
 8002004:	4601      	mov	r1, r0
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f005 fac8 	bl	800759c <HAL_HCD_HC_NotifyURBChange_Callback>
 800200c:	e035      	b.n	800207a <HCD_HC_IN_IRQHandler+0x49e>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	212c      	movs	r1, #44	; 0x2c
 8002014:	fb01 f303 	mul.w	r3, r1, r3
 8002018:	4413      	add	r3, r2
 800201a:	333f      	adds	r3, #63	; 0x3f
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d12b      	bne.n	800207a <HCD_HC_IN_IRQHandler+0x49e>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	212c      	movs	r1, #44	; 0x2c
 8002028:	fb01 f303 	mul.w	r3, r1, r3
 800202c:	4413      	add	r3, r2
 800202e:	3360      	adds	r3, #96	; 0x60
 8002030:	2201      	movs	r2, #1
 8002032:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	212c      	movs	r1, #44	; 0x2c
 800203a:	fb01 f303 	mul.w	r3, r1, r3
 800203e:	4413      	add	r3, r2
 8002040:	3354      	adds	r3, #84	; 0x54
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	f083 0301 	eor.w	r3, r3, #1
 8002048:	b2d8      	uxtb	r0, r3
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	212c      	movs	r1, #44	; 0x2c
 8002050:	fb01 f303 	mul.w	r3, r1, r3
 8002054:	4413      	add	r3, r2
 8002056:	3354      	adds	r3, #84	; 0x54
 8002058:	4602      	mov	r2, r0
 800205a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	b2d8      	uxtb	r0, r3
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	212c      	movs	r1, #44	; 0x2c
 8002066:	fb01 f303 	mul.w	r3, r1, r3
 800206a:	4413      	add	r3, r2
 800206c:	3360      	adds	r3, #96	; 0x60
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	461a      	mov	r2, r3
 8002072:	4601      	mov	r1, r0
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f005 fa91 	bl	800759c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d12b      	bne.n	80020da <HCD_HC_IN_IRQHandler+0x4fe>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	212c      	movs	r1, #44	; 0x2c
 8002088:	fb01 f303 	mul.w	r3, r1, r3
 800208c:	4413      	add	r3, r2
 800208e:	3348      	adds	r3, #72	; 0x48
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	202c      	movs	r0, #44	; 0x2c
 8002098:	fb00 f202 	mul.w	r2, r0, r2
 800209c:	440a      	add	r2, r1
 800209e:	3240      	adds	r2, #64	; 0x40
 80020a0:	8812      	ldrh	r2, [r2, #0]
 80020a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f000 81c2 	beq.w	8002434 <HCD_HC_IN_IRQHandler+0x858>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	212c      	movs	r1, #44	; 0x2c
 80020b6:	fb01 f303 	mul.w	r3, r1, r3
 80020ba:	4413      	add	r3, r2
 80020bc:	3354      	adds	r3, #84	; 0x54
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	f083 0301 	eor.w	r3, r3, #1
 80020c4:	b2d8      	uxtb	r0, r3
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	212c      	movs	r1, #44	; 0x2c
 80020cc:	fb01 f303 	mul.w	r3, r1, r3
 80020d0:	4413      	add	r3, r2
 80020d2:	3354      	adds	r3, #84	; 0x54
 80020d4:	4602      	mov	r2, r0
 80020d6:	701a      	strb	r2, [r3, #0]
}
 80020d8:	e1ac      	b.n	8002434 <HCD_HC_IN_IRQHandler+0x858>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	212c      	movs	r1, #44	; 0x2c
 80020e0:	fb01 f303 	mul.w	r3, r1, r3
 80020e4:	4413      	add	r3, r2
 80020e6:	3354      	adds	r3, #84	; 0x54
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	f083 0301 	eor.w	r3, r3, #1
 80020ee:	b2d8      	uxtb	r0, r3
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	212c      	movs	r1, #44	; 0x2c
 80020f6:	fb01 f303 	mul.w	r3, r1, r3
 80020fa:	4413      	add	r3, r2
 80020fc:	3354      	adds	r3, #84	; 0x54
 80020fe:	4602      	mov	r2, r0
 8002100:	701a      	strb	r2, [r3, #0]
}
 8002102:	e197      	b.n	8002434 <HCD_HC_IN_IRQHandler+0x858>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	015a      	lsls	r2, r3, #5
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	4413      	add	r3, r2
 800210c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b02      	cmp	r3, #2
 8002118:	f040 8108 	bne.w	800232c <HCD_HC_IN_IRQHandler+0x750>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	015a      	lsls	r2, r3, #5
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	4413      	add	r3, r2
 8002124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002128:	4619      	mov	r1, r3
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	015a      	lsls	r2, r3, #5
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	4413      	add	r3, r2
 8002132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	f023 0302 	bic.w	r3, r3, #2
 800213c:	60cb      	str	r3, [r1, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	212c      	movs	r1, #44	; 0x2c
 8002144:	fb01 f303 	mul.w	r3, r1, r3
 8002148:	4413      	add	r3, r2
 800214a:	3361      	adds	r3, #97	; 0x61
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d109      	bne.n	8002166 <HCD_HC_IN_IRQHandler+0x58a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	212c      	movs	r1, #44	; 0x2c
 8002158:	fb01 f303 	mul.w	r3, r1, r3
 800215c:	4413      	add	r3, r2
 800215e:	3360      	adds	r3, #96	; 0x60
 8002160:	2201      	movs	r2, #1
 8002162:	701a      	strb	r2, [r3, #0]
 8002164:	e0c9      	b.n	80022fa <HCD_HC_IN_IRQHandler+0x71e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	212c      	movs	r1, #44	; 0x2c
 800216c:	fb01 f303 	mul.w	r3, r1, r3
 8002170:	4413      	add	r3, r2
 8002172:	3361      	adds	r3, #97	; 0x61
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b05      	cmp	r3, #5
 8002178:	d109      	bne.n	800218e <HCD_HC_IN_IRQHandler+0x5b2>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	212c      	movs	r1, #44	; 0x2c
 8002180:	fb01 f303 	mul.w	r3, r1, r3
 8002184:	4413      	add	r3, r2
 8002186:	3360      	adds	r3, #96	; 0x60
 8002188:	2205      	movs	r2, #5
 800218a:	701a      	strb	r2, [r3, #0]
 800218c:	e0b5      	b.n	80022fa <HCD_HC_IN_IRQHandler+0x71e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	212c      	movs	r1, #44	; 0x2c
 8002194:	fb01 f303 	mul.w	r3, r1, r3
 8002198:	4413      	add	r3, r2
 800219a:	3361      	adds	r3, #97	; 0x61
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	2b06      	cmp	r3, #6
 80021a0:	d009      	beq.n	80021b6 <HCD_HC_IN_IRQHandler+0x5da>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	212c      	movs	r1, #44	; 0x2c
 80021a8:	fb01 f303 	mul.w	r3, r1, r3
 80021ac:	4413      	add	r3, r2
 80021ae:	3361      	adds	r3, #97	; 0x61
 80021b0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021b2:	2b08      	cmp	r3, #8
 80021b4:	d150      	bne.n	8002258 <HCD_HC_IN_IRQHandler+0x67c>
      hhcd->hc[ch_num].ErrCnt++;
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	212c      	movs	r1, #44	; 0x2c
 80021bc:	fb01 f303 	mul.w	r3, r1, r3
 80021c0:	4413      	add	r3, r2
 80021c2:	335c      	adds	r3, #92	; 0x5c
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	1c5a      	adds	r2, r3, #1
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	202c      	movs	r0, #44	; 0x2c
 80021ce:	fb00 f303 	mul.w	r3, r0, r3
 80021d2:	440b      	add	r3, r1
 80021d4:	335c      	adds	r3, #92	; 0x5c
 80021d6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	212c      	movs	r1, #44	; 0x2c
 80021de:	fb01 f303 	mul.w	r3, r1, r3
 80021e2:	4413      	add	r3, r2
 80021e4:	335c      	adds	r3, #92	; 0x5c
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d912      	bls.n	8002212 <HCD_HC_IN_IRQHandler+0x636>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	212c      	movs	r1, #44	; 0x2c
 80021f2:	fb01 f303 	mul.w	r3, r1, r3
 80021f6:	4413      	add	r3, r2
 80021f8:	335c      	adds	r3, #92	; 0x5c
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	212c      	movs	r1, #44	; 0x2c
 8002204:	fb01 f303 	mul.w	r3, r1, r3
 8002208:	4413      	add	r3, r2
 800220a:	3360      	adds	r3, #96	; 0x60
 800220c:	2204      	movs	r2, #4
 800220e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002210:	e073      	b.n	80022fa <HCD_HC_IN_IRQHandler+0x71e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	212c      	movs	r1, #44	; 0x2c
 8002218:	fb01 f303 	mul.w	r3, r1, r3
 800221c:	4413      	add	r3, r2
 800221e:	3360      	adds	r3, #96	; 0x60
 8002220:	2202      	movs	r2, #2
 8002222:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	015a      	lsls	r2, r3, #5
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	4413      	add	r3, r2
 800222c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800223a:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002242:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	015a      	lsls	r2, r3, #5
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	4413      	add	r3, r2
 800224c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002250:	461a      	mov	r2, r3
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002256:	e050      	b.n	80022fa <HCD_HC_IN_IRQHandler+0x71e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	212c      	movs	r1, #44	; 0x2c
 800225e:	fb01 f303 	mul.w	r3, r1, r3
 8002262:	4413      	add	r3, r2
 8002264:	3361      	adds	r3, #97	; 0x61
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b03      	cmp	r3, #3
 800226a:	d122      	bne.n	80022b2 <HCD_HC_IN_IRQHandler+0x6d6>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	212c      	movs	r1, #44	; 0x2c
 8002272:	fb01 f303 	mul.w	r3, r1, r3
 8002276:	4413      	add	r3, r2
 8002278:	3360      	adds	r3, #96	; 0x60
 800227a:	2202      	movs	r2, #2
 800227c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	015a      	lsls	r2, r3, #5
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	4413      	add	r3, r2
 8002286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002294:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800229c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	015a      	lsls	r2, r3, #5
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	4413      	add	r3, r2
 80022a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022aa:	461a      	mov	r2, r3
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	6013      	str	r3, [r2, #0]
 80022b0:	e023      	b.n	80022fa <HCD_HC_IN_IRQHandler+0x71e>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	212c      	movs	r1, #44	; 0x2c
 80022b8:	fb01 f303 	mul.w	r3, r1, r3
 80022bc:	4413      	add	r3, r2
 80022be:	3361      	adds	r3, #97	; 0x61
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b07      	cmp	r3, #7
 80022c4:	d119      	bne.n	80022fa <HCD_HC_IN_IRQHandler+0x71e>
      hhcd->hc[ch_num].ErrCnt++;
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	212c      	movs	r1, #44	; 0x2c
 80022cc:	fb01 f303 	mul.w	r3, r1, r3
 80022d0:	4413      	add	r3, r2
 80022d2:	335c      	adds	r3, #92	; 0x5c
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	1c5a      	adds	r2, r3, #1
 80022d8:	6879      	ldr	r1, [r7, #4]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	202c      	movs	r0, #44	; 0x2c
 80022de:	fb00 f303 	mul.w	r3, r0, r3
 80022e2:	440b      	add	r3, r1
 80022e4:	335c      	adds	r3, #92	; 0x5c
 80022e6:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	212c      	movs	r1, #44	; 0x2c
 80022ee:	fb01 f303 	mul.w	r3, r1, r3
 80022f2:	4413      	add	r3, r2
 80022f4:	3360      	adds	r3, #96	; 0x60
 80022f6:	2204      	movs	r2, #4
 80022f8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	015a      	lsls	r2, r3, #5
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	4413      	add	r3, r2
 8002302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002306:	461a      	mov	r2, r3
 8002308:	2302      	movs	r3, #2
 800230a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	b2d8      	uxtb	r0, r3
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	212c      	movs	r1, #44	; 0x2c
 8002316:	fb01 f303 	mul.w	r3, r1, r3
 800231a:	4413      	add	r3, r2
 800231c:	3360      	adds	r3, #96	; 0x60
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	461a      	mov	r2, r3
 8002322:	4601      	mov	r1, r0
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f005 f939 	bl	800759c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800232a:	e083      	b.n	8002434 <HCD_HC_IN_IRQHandler+0x858>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	015a      	lsls	r2, r3, #5
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	4413      	add	r3, r2
 8002334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f003 0310 	and.w	r3, r3, #16
 800233e:	2b10      	cmp	r3, #16
 8002340:	d178      	bne.n	8002434 <HCD_HC_IN_IRQHandler+0x858>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	212c      	movs	r1, #44	; 0x2c
 8002348:	fb01 f303 	mul.w	r3, r1, r3
 800234c:	4413      	add	r3, r2
 800234e:	333f      	adds	r3, #63	; 0x3f
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	2b03      	cmp	r3, #3
 8002354:	d122      	bne.n	800239c <HCD_HC_IN_IRQHandler+0x7c0>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	212c      	movs	r1, #44	; 0x2c
 800235c:	fb01 f303 	mul.w	r3, r1, r3
 8002360:	4413      	add	r3, r2
 8002362:	335c      	adds	r3, #92	; 0x5c
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	015a      	lsls	r2, r3, #5
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	4413      	add	r3, r2
 8002370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002374:	4619      	mov	r1, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	015a      	lsls	r2, r3, #5
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	4413      	add	r3, r2
 800237e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	f043 0302 	orr.w	r3, r3, #2
 8002388:	60cb      	str	r3, [r1, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	4611      	mov	r1, r2
 8002394:	4618      	mov	r0, r3
 8002396:	f002 ff34 	bl	8005202 <USB_HC_Halt>
 800239a:	e042      	b.n	8002422 <HCD_HC_IN_IRQHandler+0x846>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	212c      	movs	r1, #44	; 0x2c
 80023a2:	fb01 f303 	mul.w	r3, r1, r3
 80023a6:	4413      	add	r3, r2
 80023a8:	333f      	adds	r3, #63	; 0x3f
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d009      	beq.n	80023c4 <HCD_HC_IN_IRQHandler+0x7e8>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	212c      	movs	r1, #44	; 0x2c
 80023b6:	fb01 f303 	mul.w	r3, r1, r3
 80023ba:	4413      	add	r3, r2
 80023bc:	333f      	adds	r3, #63	; 0x3f
 80023be:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d12e      	bne.n	8002422 <HCD_HC_IN_IRQHandler+0x846>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	212c      	movs	r1, #44	; 0x2c
 80023ca:	fb01 f303 	mul.w	r3, r1, r3
 80023ce:	4413      	add	r3, r2
 80023d0:	335c      	adds	r3, #92	; 0x5c
 80023d2:	2200      	movs	r2, #0
 80023d4:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d121      	bne.n	8002422 <HCD_HC_IN_IRQHandler+0x846>
        hhcd->hc[ch_num].state = HC_NAK;
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	212c      	movs	r1, #44	; 0x2c
 80023e4:	fb01 f303 	mul.w	r3, r1, r3
 80023e8:	4413      	add	r3, r2
 80023ea:	3361      	adds	r3, #97	; 0x61
 80023ec:	2203      	movs	r2, #3
 80023ee:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	015a      	lsls	r2, r3, #5
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	4413      	add	r3, r2
 80023f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023fc:	4619      	mov	r1, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	015a      	lsls	r2, r3, #5
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	4413      	add	r3, r2
 8002406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	f043 0302 	orr.w	r3, r3, #2
 8002410:	60cb      	str	r3, [r1, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	b2d2      	uxtb	r2, r2
 800241a:	4611      	mov	r1, r2
 800241c:	4618      	mov	r0, r3
 800241e:	f002 fef0 	bl	8005202 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	015a      	lsls	r2, r3, #5
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	4413      	add	r3, r2
 800242a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800242e:	461a      	mov	r2, r3
 8002430:	2310      	movs	r3, #16
 8002432:	6093      	str	r3, [r2, #8]
}
 8002434:	bf00      	nop
 8002436:	3718      	adds	r7, #24
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b088      	sub	sp, #32
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	460b      	mov	r3, r1
 8002446:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002452:	78fb      	ldrb	r3, [r7, #3]
 8002454:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	015a      	lsls	r2, r3, #5
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	4413      	add	r3, r2
 800245e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b04      	cmp	r3, #4
 800246a:	d11a      	bne.n	80024a2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	015a      	lsls	r2, r3, #5
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	4413      	add	r3, r2
 8002474:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002478:	461a      	mov	r2, r3
 800247a:	2304      	movs	r3, #4
 800247c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	015a      	lsls	r2, r3, #5
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	4413      	add	r3, r2
 8002486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800248a:	4619      	mov	r1, r3
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	015a      	lsls	r2, r3, #5
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	4413      	add	r3, r2
 8002494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	f043 0302 	orr.w	r3, r3, #2
 800249e:	60cb      	str	r3, [r1, #12]
  }
  else
  {
    /* ... */
  }
}
 80024a0:	e3d1      	b.n	8002c46 <HCD_HC_OUT_IRQHandler+0x80a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	015a      	lsls	r2, r3, #5
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	4413      	add	r3, r2
 80024aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 0320 	and.w	r3, r3, #32
 80024b4:	2b20      	cmp	r3, #32
 80024b6:	d13f      	bne.n	8002538 <HCD_HC_OUT_IRQHandler+0xfc>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	015a      	lsls	r2, r3, #5
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	4413      	add	r3, r2
 80024c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c4:	461a      	mov	r2, r3
 80024c6:	2320      	movs	r3, #32
 80024c8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	212c      	movs	r1, #44	; 0x2c
 80024d0:	fb01 f303 	mul.w	r3, r1, r3
 80024d4:	4413      	add	r3, r2
 80024d6:	333d      	adds	r3, #61	; 0x3d
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	f040 83b3 	bne.w	8002c46 <HCD_HC_OUT_IRQHandler+0x80a>
      hhcd->hc[ch_num].do_ping = 0U;
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	212c      	movs	r1, #44	; 0x2c
 80024e6:	fb01 f303 	mul.w	r3, r1, r3
 80024ea:	4413      	add	r3, r2
 80024ec:	333d      	adds	r3, #61	; 0x3d
 80024ee:	2200      	movs	r2, #0
 80024f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	212c      	movs	r1, #44	; 0x2c
 80024f8:	fb01 f303 	mul.w	r3, r1, r3
 80024fc:	4413      	add	r3, r2
 80024fe:	3360      	adds	r3, #96	; 0x60
 8002500:	2202      	movs	r2, #2
 8002502:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	015a      	lsls	r2, r3, #5
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	4413      	add	r3, r2
 800250c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002510:	4619      	mov	r1, r3
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	015a      	lsls	r2, r3, #5
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	4413      	add	r3, r2
 800251a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	f043 0302 	orr.w	r3, r3, #2
 8002524:	60cb      	str	r3, [r1, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	4611      	mov	r1, r2
 8002530:	4618      	mov	r0, r3
 8002532:	f002 fe66 	bl	8005202 <USB_HC_Halt>
}
 8002536:	e386      	b.n	8002c46 <HCD_HC_OUT_IRQHandler+0x80a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	015a      	lsls	r2, r3, #5
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	4413      	add	r3, r2
 8002540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800254a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800254e:	d123      	bne.n	8002598 <HCD_HC_OUT_IRQHandler+0x15c>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	015a      	lsls	r2, r3, #5
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	4413      	add	r3, r2
 8002558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800255c:	4619      	mov	r1, r3
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	015a      	lsls	r2, r3, #5
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	4413      	add	r3, r2
 8002566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	f043 0302 	orr.w	r3, r3, #2
 8002570:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	b2d2      	uxtb	r2, r2
 800257a:	4611      	mov	r1, r2
 800257c:	4618      	mov	r0, r3
 800257e:	f002 fe40 	bl	8005202 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	015a      	lsls	r2, r3, #5
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	4413      	add	r3, r2
 800258a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800258e:	461a      	mov	r2, r3
 8002590:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002594:	6093      	str	r3, [r2, #8]
}
 8002596:	e356      	b.n	8002c46 <HCD_HC_OUT_IRQHandler+0x80a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	015a      	lsls	r2, r3, #5
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	4413      	add	r3, r2
 80025a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d151      	bne.n	8002652 <HCD_HC_OUT_IRQHandler+0x216>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	212c      	movs	r1, #44	; 0x2c
 80025b4:	fb01 f303 	mul.w	r3, r1, r3
 80025b8:	4413      	add	r3, r2
 80025ba:	335c      	adds	r3, #92	; 0x5c
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	015a      	lsls	r2, r3, #5
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	4413      	add	r3, r2
 80025c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d2:	2b40      	cmp	r3, #64	; 0x40
 80025d4:	d111      	bne.n	80025fa <HCD_HC_OUT_IRQHandler+0x1be>
      hhcd->hc[ch_num].do_ping = 1U;
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	212c      	movs	r1, #44	; 0x2c
 80025dc:	fb01 f303 	mul.w	r3, r1, r3
 80025e0:	4413      	add	r3, r2
 80025e2:	333d      	adds	r3, #61	; 0x3d
 80025e4:	2201      	movs	r2, #1
 80025e6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	015a      	lsls	r2, r3, #5
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	4413      	add	r3, r2
 80025f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f4:	461a      	mov	r2, r3
 80025f6:	2340      	movs	r3, #64	; 0x40
 80025f8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	015a      	lsls	r2, r3, #5
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	4413      	add	r3, r2
 8002602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002606:	4619      	mov	r1, r3
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	015a      	lsls	r2, r3, #5
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	4413      	add	r3, r2
 8002610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	f043 0302 	orr.w	r3, r3, #2
 800261a:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	697a      	ldr	r2, [r7, #20]
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	4611      	mov	r1, r2
 8002626:	4618      	mov	r0, r3
 8002628:	f002 fdeb 	bl	8005202 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	015a      	lsls	r2, r3, #5
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	4413      	add	r3, r2
 8002634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002638:	461a      	mov	r2, r3
 800263a:	2301      	movs	r3, #1
 800263c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	212c      	movs	r1, #44	; 0x2c
 8002644:	fb01 f303 	mul.w	r3, r1, r3
 8002648:	4413      	add	r3, r2
 800264a:	3361      	adds	r3, #97	; 0x61
 800264c:	2201      	movs	r2, #1
 800264e:	701a      	strb	r2, [r3, #0]
}
 8002650:	e2f9      	b.n	8002c46 <HCD_HC_OUT_IRQHandler+0x80a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	015a      	lsls	r2, r3, #5
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	4413      	add	r3, r2
 800265a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002664:	2b40      	cmp	r3, #64	; 0x40
 8002666:	d13d      	bne.n	80026e4 <HCD_HC_OUT_IRQHandler+0x2a8>
    hhcd->hc[ch_num].state = HC_NYET;
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	212c      	movs	r1, #44	; 0x2c
 800266e:	fb01 f303 	mul.w	r3, r1, r3
 8002672:	4413      	add	r3, r2
 8002674:	3361      	adds	r3, #97	; 0x61
 8002676:	2204      	movs	r2, #4
 8002678:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	212c      	movs	r1, #44	; 0x2c
 8002680:	fb01 f303 	mul.w	r3, r1, r3
 8002684:	4413      	add	r3, r2
 8002686:	333d      	adds	r3, #61	; 0x3d
 8002688:	2201      	movs	r2, #1
 800268a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	212c      	movs	r1, #44	; 0x2c
 8002692:	fb01 f303 	mul.w	r3, r1, r3
 8002696:	4413      	add	r3, r2
 8002698:	335c      	adds	r3, #92	; 0x5c
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	015a      	lsls	r2, r3, #5
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	4413      	add	r3, r2
 80026a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026aa:	4619      	mov	r1, r3
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	015a      	lsls	r2, r3, #5
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	4413      	add	r3, r2
 80026b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	f043 0302 	orr.w	r3, r3, #2
 80026be:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	697a      	ldr	r2, [r7, #20]
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	4611      	mov	r1, r2
 80026ca:	4618      	mov	r0, r3
 80026cc:	f002 fd99 	bl	8005202 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	015a      	lsls	r2, r3, #5
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	4413      	add	r3, r2
 80026d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026dc:	461a      	mov	r2, r3
 80026de:	2340      	movs	r3, #64	; 0x40
 80026e0:	6093      	str	r3, [r2, #8]
}
 80026e2:	e2b0      	b.n	8002c46 <HCD_HC_OUT_IRQHandler+0x80a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	015a      	lsls	r2, r3, #5
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	4413      	add	r3, r2
 80026ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 0308 	and.w	r3, r3, #8
 80026f6:	2b08      	cmp	r3, #8
 80026f8:	d12b      	bne.n	8002752 <HCD_HC_OUT_IRQHandler+0x316>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	015a      	lsls	r2, r3, #5
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	4413      	add	r3, r2
 8002702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002706:	461a      	mov	r2, r3
 8002708:	2308      	movs	r3, #8
 800270a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	015a      	lsls	r2, r3, #5
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	4413      	add	r3, r2
 8002714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002718:	4619      	mov	r1, r3
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	015a      	lsls	r2, r3, #5
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	4413      	add	r3, r2
 8002722:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	f043 0302 	orr.w	r3, r3, #2
 800272c:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	b2d2      	uxtb	r2, r2
 8002736:	4611      	mov	r1, r2
 8002738:	4618      	mov	r0, r3
 800273a:	f002 fd62 	bl	8005202 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	212c      	movs	r1, #44	; 0x2c
 8002744:	fb01 f303 	mul.w	r3, r1, r3
 8002748:	4413      	add	r3, r2
 800274a:	3361      	adds	r3, #97	; 0x61
 800274c:	2205      	movs	r2, #5
 800274e:	701a      	strb	r2, [r3, #0]
}
 8002750:	e279      	b.n	8002c46 <HCD_HC_OUT_IRQHandler+0x80a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	015a      	lsls	r2, r3, #5
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	4413      	add	r3, r2
 800275a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f003 0310 	and.w	r3, r3, #16
 8002764:	2b10      	cmp	r3, #16
 8002766:	d151      	bne.n	800280c <HCD_HC_OUT_IRQHandler+0x3d0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	212c      	movs	r1, #44	; 0x2c
 800276e:	fb01 f303 	mul.w	r3, r1, r3
 8002772:	4413      	add	r3, r2
 8002774:	335c      	adds	r3, #92	; 0x5c
 8002776:	2200      	movs	r2, #0
 8002778:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	212c      	movs	r1, #44	; 0x2c
 8002780:	fb01 f303 	mul.w	r3, r1, r3
 8002784:	4413      	add	r3, r2
 8002786:	3361      	adds	r3, #97	; 0x61
 8002788:	2203      	movs	r2, #3
 800278a:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	212c      	movs	r1, #44	; 0x2c
 8002792:	fb01 f303 	mul.w	r3, r1, r3
 8002796:	4413      	add	r3, r2
 8002798:	333d      	adds	r3, #61	; 0x3d
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d112      	bne.n	80027c6 <HCD_HC_OUT_IRQHandler+0x38a>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	212c      	movs	r1, #44	; 0x2c
 80027a6:	fb01 f303 	mul.w	r3, r1, r3
 80027aa:	4413      	add	r3, r2
 80027ac:	333c      	adds	r3, #60	; 0x3c
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d108      	bne.n	80027c6 <HCD_HC_OUT_IRQHandler+0x38a>
        hhcd->hc[ch_num].do_ping = 1U;
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	212c      	movs	r1, #44	; 0x2c
 80027ba:	fb01 f303 	mul.w	r3, r1, r3
 80027be:	4413      	add	r3, r2
 80027c0:	333d      	adds	r3, #61	; 0x3d
 80027c2:	2201      	movs	r2, #1
 80027c4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	015a      	lsls	r2, r3, #5
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	4413      	add	r3, r2
 80027ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d2:	4619      	mov	r1, r3
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	015a      	lsls	r2, r3, #5
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	4413      	add	r3, r2
 80027dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	f043 0302 	orr.w	r3, r3, #2
 80027e6:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	697a      	ldr	r2, [r7, #20]
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	4611      	mov	r1, r2
 80027f2:	4618      	mov	r0, r3
 80027f4:	f002 fd05 	bl	8005202 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	015a      	lsls	r2, r3, #5
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	4413      	add	r3, r2
 8002800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002804:	461a      	mov	r2, r3
 8002806:	2310      	movs	r3, #16
 8002808:	6093      	str	r3, [r2, #8]
}
 800280a:	e21c      	b.n	8002c46 <HCD_HC_OUT_IRQHandler+0x80a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	015a      	lsls	r2, r3, #5
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	4413      	add	r3, r2
 8002814:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800281e:	2b80      	cmp	r3, #128	; 0x80
 8002820:	d176      	bne.n	8002910 <HCD_HC_OUT_IRQHandler+0x4d4>
    if (hhcd->Init.dma_enable == 0U)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d122      	bne.n	8002870 <HCD_HC_OUT_IRQHandler+0x434>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	212c      	movs	r1, #44	; 0x2c
 8002830:	fb01 f303 	mul.w	r3, r1, r3
 8002834:	4413      	add	r3, r2
 8002836:	3361      	adds	r3, #97	; 0x61
 8002838:	2206      	movs	r2, #6
 800283a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	015a      	lsls	r2, r3, #5
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	4413      	add	r3, r2
 8002844:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002848:	4619      	mov	r1, r3
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	015a      	lsls	r2, r3, #5
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	4413      	add	r3, r2
 8002852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	f043 0302 	orr.w	r3, r3, #2
 800285c:	60cb      	str	r3, [r1, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	b2d2      	uxtb	r2, r2
 8002866:	4611      	mov	r1, r2
 8002868:	4618      	mov	r0, r3
 800286a:	f002 fcca 	bl	8005202 <USB_HC_Halt>
 800286e:	e045      	b.n	80028fc <HCD_HC_OUT_IRQHandler+0x4c0>
      hhcd->hc[ch_num].ErrCnt++;
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	212c      	movs	r1, #44	; 0x2c
 8002876:	fb01 f303 	mul.w	r3, r1, r3
 800287a:	4413      	add	r3, r2
 800287c:	335c      	adds	r3, #92	; 0x5c
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	1c5a      	adds	r2, r3, #1
 8002882:	6879      	ldr	r1, [r7, #4]
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	202c      	movs	r0, #44	; 0x2c
 8002888:	fb00 f303 	mul.w	r3, r0, r3
 800288c:	440b      	add	r3, r1
 800288e:	335c      	adds	r3, #92	; 0x5c
 8002890:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	212c      	movs	r1, #44	; 0x2c
 8002898:	fb01 f303 	mul.w	r3, r1, r3
 800289c:	4413      	add	r3, r2
 800289e:	335c      	adds	r3, #92	; 0x5c
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d921      	bls.n	80028ea <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	212c      	movs	r1, #44	; 0x2c
 80028ac:	fb01 f303 	mul.w	r3, r1, r3
 80028b0:	4413      	add	r3, r2
 80028b2:	335c      	adds	r3, #92	; 0x5c
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	212c      	movs	r1, #44	; 0x2c
 80028be:	fb01 f303 	mul.w	r3, r1, r3
 80028c2:	4413      	add	r3, r2
 80028c4:	3360      	adds	r3, #96	; 0x60
 80028c6:	2204      	movs	r2, #4
 80028c8:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	b2d8      	uxtb	r0, r3
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	212c      	movs	r1, #44	; 0x2c
 80028d4:	fb01 f303 	mul.w	r3, r1, r3
 80028d8:	4413      	add	r3, r2
 80028da:	3360      	adds	r3, #96	; 0x60
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	461a      	mov	r2, r3
 80028e0:	4601      	mov	r1, r0
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f004 fe5a 	bl	800759c <HAL_HCD_HC_NotifyURBChange_Callback>
 80028e8:	e008      	b.n	80028fc <HCD_HC_OUT_IRQHandler+0x4c0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	212c      	movs	r1, #44	; 0x2c
 80028f0:	fb01 f303 	mul.w	r3, r1, r3
 80028f4:	4413      	add	r3, r2
 80028f6:	3360      	adds	r3, #96	; 0x60
 80028f8:	2202      	movs	r2, #2
 80028fa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	015a      	lsls	r2, r3, #5
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	4413      	add	r3, r2
 8002904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002908:	461a      	mov	r2, r3
 800290a:	2380      	movs	r3, #128	; 0x80
 800290c:	6093      	str	r3, [r2, #8]
}
 800290e:	e19a      	b.n	8002c46 <HCD_HC_OUT_IRQHandler+0x80a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	015a      	lsls	r2, r3, #5
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	4413      	add	r3, r2
 8002918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002922:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002926:	d135      	bne.n	8002994 <HCD_HC_OUT_IRQHandler+0x558>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	015a      	lsls	r2, r3, #5
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	4413      	add	r3, r2
 8002930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002934:	4619      	mov	r1, r3
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	015a      	lsls	r2, r3, #5
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	4413      	add	r3, r2
 800293e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	f043 0302 	orr.w	r3, r3, #2
 8002948:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	b2d2      	uxtb	r2, r2
 8002952:	4611      	mov	r1, r2
 8002954:	4618      	mov	r0, r3
 8002956:	f002 fc54 	bl	8005202 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	015a      	lsls	r2, r3, #5
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	4413      	add	r3, r2
 8002962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002966:	461a      	mov	r2, r3
 8002968:	2310      	movs	r3, #16
 800296a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	015a      	lsls	r2, r3, #5
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	4413      	add	r3, r2
 8002974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002978:	461a      	mov	r2, r3
 800297a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800297e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	212c      	movs	r1, #44	; 0x2c
 8002986:	fb01 f303 	mul.w	r3, r1, r3
 800298a:	4413      	add	r3, r2
 800298c:	3361      	adds	r3, #97	; 0x61
 800298e:	2208      	movs	r2, #8
 8002990:	701a      	strb	r2, [r3, #0]
}
 8002992:	e158      	b.n	8002c46 <HCD_HC_OUT_IRQHandler+0x80a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	015a      	lsls	r2, r3, #5
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	4413      	add	r3, r2
 800299c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	f040 814d 	bne.w	8002c46 <HCD_HC_OUT_IRQHandler+0x80a>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	015a      	lsls	r2, r3, #5
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	4413      	add	r3, r2
 80029b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b8:	4619      	mov	r1, r3
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	015a      	lsls	r2, r3, #5
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	4413      	add	r3, r2
 80029c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	f023 0302 	bic.w	r3, r3, #2
 80029cc:	60cb      	str	r3, [r1, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	212c      	movs	r1, #44	; 0x2c
 80029d4:	fb01 f303 	mul.w	r3, r1, r3
 80029d8:	4413      	add	r3, r2
 80029da:	3361      	adds	r3, #97	; 0x61
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d179      	bne.n	8002ad6 <HCD_HC_OUT_IRQHandler+0x69a>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	212c      	movs	r1, #44	; 0x2c
 80029e8:	fb01 f303 	mul.w	r3, r1, r3
 80029ec:	4413      	add	r3, r2
 80029ee:	3360      	adds	r3, #96	; 0x60
 80029f0:	2201      	movs	r2, #1
 80029f2:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	212c      	movs	r1, #44	; 0x2c
 80029fa:	fb01 f303 	mul.w	r3, r1, r3
 80029fe:	4413      	add	r3, r2
 8002a00:	333f      	adds	r3, #63	; 0x3f
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d00a      	beq.n	8002a1e <HCD_HC_OUT_IRQHandler+0x5e2>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	212c      	movs	r1, #44	; 0x2c
 8002a0e:	fb01 f303 	mul.w	r3, r1, r3
 8002a12:	4413      	add	r3, r2
 8002a14:	333f      	adds	r3, #63	; 0x3f
 8002a16:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002a18:	2b03      	cmp	r3, #3
 8002a1a:	f040 80fc 	bne.w	8002c16 <HCD_HC_OUT_IRQHandler+0x7da>
        if (hhcd->Init.dma_enable == 1U)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d142      	bne.n	8002aac <HCD_HC_OUT_IRQHandler+0x670>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	212c      	movs	r1, #44	; 0x2c
 8002a2c:	fb01 f303 	mul.w	r3, r1, r3
 8002a30:	4413      	add	r3, r2
 8002a32:	334c      	adds	r3, #76	; 0x4c
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f000 80ed 	beq.w	8002c16 <HCD_HC_OUT_IRQHandler+0x7da>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	212c      	movs	r1, #44	; 0x2c
 8002a42:	fb01 f303 	mul.w	r3, r1, r3
 8002a46:	4413      	add	r3, r2
 8002a48:	334c      	adds	r3, #76	; 0x4c
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	6879      	ldr	r1, [r7, #4]
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	202c      	movs	r0, #44	; 0x2c
 8002a52:	fb00 f202 	mul.w	r2, r0, r2
 8002a56:	440a      	add	r2, r1
 8002a58:	3240      	adds	r2, #64	; 0x40
 8002a5a:	8812      	ldrh	r2, [r2, #0]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	6879      	ldr	r1, [r7, #4]
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	202c      	movs	r0, #44	; 0x2c
 8002a66:	fb00 f202 	mul.w	r2, r0, r2
 8002a6a:	440a      	add	r2, r1
 8002a6c:	3240      	adds	r2, #64	; 0x40
 8002a6e:	8812      	ldrh	r2, [r2, #0]
 8002a70:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a74:	613b      	str	r3, [r7, #16]
            if ((num_packets & 1U) != 0U)
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f000 80ca 	beq.w	8002c16 <HCD_HC_OUT_IRQHandler+0x7da>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	212c      	movs	r1, #44	; 0x2c
 8002a88:	fb01 f303 	mul.w	r3, r1, r3
 8002a8c:	4413      	add	r3, r2
 8002a8e:	3355      	adds	r3, #85	; 0x55
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	f083 0301 	eor.w	r3, r3, #1
 8002a96:	b2d8      	uxtb	r0, r3
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	212c      	movs	r1, #44	; 0x2c
 8002a9e:	fb01 f303 	mul.w	r3, r1, r3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	3355      	adds	r3, #85	; 0x55
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	701a      	strb	r2, [r3, #0]
 8002aaa:	e0b4      	b.n	8002c16 <HCD_HC_OUT_IRQHandler+0x7da>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	212c      	movs	r1, #44	; 0x2c
 8002ab2:	fb01 f303 	mul.w	r3, r1, r3
 8002ab6:	4413      	add	r3, r2
 8002ab8:	3355      	adds	r3, #85	; 0x55
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	f083 0301 	eor.w	r3, r3, #1
 8002ac0:	b2d8      	uxtb	r0, r3
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	212c      	movs	r1, #44	; 0x2c
 8002ac8:	fb01 f303 	mul.w	r3, r1, r3
 8002acc:	4413      	add	r3, r2
 8002ace:	3355      	adds	r3, #85	; 0x55
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	701a      	strb	r2, [r3, #0]
 8002ad4:	e09f      	b.n	8002c16 <HCD_HC_OUT_IRQHandler+0x7da>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	212c      	movs	r1, #44	; 0x2c
 8002adc:	fb01 f303 	mul.w	r3, r1, r3
 8002ae0:	4413      	add	r3, r2
 8002ae2:	3361      	adds	r3, #97	; 0x61
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	2b03      	cmp	r3, #3
 8002ae8:	d109      	bne.n	8002afe <HCD_HC_OUT_IRQHandler+0x6c2>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	212c      	movs	r1, #44	; 0x2c
 8002af0:	fb01 f303 	mul.w	r3, r1, r3
 8002af4:	4413      	add	r3, r2
 8002af6:	3360      	adds	r3, #96	; 0x60
 8002af8:	2202      	movs	r2, #2
 8002afa:	701a      	strb	r2, [r3, #0]
 8002afc:	e08b      	b.n	8002c16 <HCD_HC_OUT_IRQHandler+0x7da>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	212c      	movs	r1, #44	; 0x2c
 8002b04:	fb01 f303 	mul.w	r3, r1, r3
 8002b08:	4413      	add	r3, r2
 8002b0a:	3361      	adds	r3, #97	; 0x61
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	d109      	bne.n	8002b26 <HCD_HC_OUT_IRQHandler+0x6ea>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	212c      	movs	r1, #44	; 0x2c
 8002b18:	fb01 f303 	mul.w	r3, r1, r3
 8002b1c:	4413      	add	r3, r2
 8002b1e:	3360      	adds	r3, #96	; 0x60
 8002b20:	2202      	movs	r2, #2
 8002b22:	701a      	strb	r2, [r3, #0]
 8002b24:	e077      	b.n	8002c16 <HCD_HC_OUT_IRQHandler+0x7da>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	212c      	movs	r1, #44	; 0x2c
 8002b2c:	fb01 f303 	mul.w	r3, r1, r3
 8002b30:	4413      	add	r3, r2
 8002b32:	3361      	adds	r3, #97	; 0x61
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	2b05      	cmp	r3, #5
 8002b38:	d109      	bne.n	8002b4e <HCD_HC_OUT_IRQHandler+0x712>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	212c      	movs	r1, #44	; 0x2c
 8002b40:	fb01 f303 	mul.w	r3, r1, r3
 8002b44:	4413      	add	r3, r2
 8002b46:	3360      	adds	r3, #96	; 0x60
 8002b48:	2205      	movs	r2, #5
 8002b4a:	701a      	strb	r2, [r3, #0]
 8002b4c:	e063      	b.n	8002c16 <HCD_HC_OUT_IRQHandler+0x7da>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	212c      	movs	r1, #44	; 0x2c
 8002b54:	fb01 f303 	mul.w	r3, r1, r3
 8002b58:	4413      	add	r3, r2
 8002b5a:	3361      	adds	r3, #97	; 0x61
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2b06      	cmp	r3, #6
 8002b60:	d009      	beq.n	8002b76 <HCD_HC_OUT_IRQHandler+0x73a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	212c      	movs	r1, #44	; 0x2c
 8002b68:	fb01 f303 	mul.w	r3, r1, r3
 8002b6c:	4413      	add	r3, r2
 8002b6e:	3361      	adds	r3, #97	; 0x61
 8002b70:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b72:	2b08      	cmp	r3, #8
 8002b74:	d14f      	bne.n	8002c16 <HCD_HC_OUT_IRQHandler+0x7da>
      hhcd->hc[ch_num].ErrCnt++;
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	212c      	movs	r1, #44	; 0x2c
 8002b7c:	fb01 f303 	mul.w	r3, r1, r3
 8002b80:	4413      	add	r3, r2
 8002b82:	335c      	adds	r3, #92	; 0x5c
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	1c5a      	adds	r2, r3, #1
 8002b88:	6879      	ldr	r1, [r7, #4]
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	202c      	movs	r0, #44	; 0x2c
 8002b8e:	fb00 f303 	mul.w	r3, r0, r3
 8002b92:	440b      	add	r3, r1
 8002b94:	335c      	adds	r3, #92	; 0x5c
 8002b96:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	212c      	movs	r1, #44	; 0x2c
 8002b9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ba2:	4413      	add	r3, r2
 8002ba4:	335c      	adds	r3, #92	; 0x5c
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d912      	bls.n	8002bd2 <HCD_HC_OUT_IRQHandler+0x796>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	212c      	movs	r1, #44	; 0x2c
 8002bb2:	fb01 f303 	mul.w	r3, r1, r3
 8002bb6:	4413      	add	r3, r2
 8002bb8:	335c      	adds	r3, #92	; 0x5c
 8002bba:	2200      	movs	r2, #0
 8002bbc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	212c      	movs	r1, #44	; 0x2c
 8002bc4:	fb01 f303 	mul.w	r3, r1, r3
 8002bc8:	4413      	add	r3, r2
 8002bca:	3360      	adds	r3, #96	; 0x60
 8002bcc:	2204      	movs	r2, #4
 8002bce:	701a      	strb	r2, [r3, #0]
 8002bd0:	e021      	b.n	8002c16 <HCD_HC_OUT_IRQHandler+0x7da>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	212c      	movs	r1, #44	; 0x2c
 8002bd8:	fb01 f303 	mul.w	r3, r1, r3
 8002bdc:	4413      	add	r3, r2
 8002bde:	3360      	adds	r3, #96	; 0x60
 8002be0:	2202      	movs	r2, #2
 8002be2:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	015a      	lsls	r2, r3, #5
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	4413      	add	r3, r2
 8002bec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002bfa:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c02:	60fb      	str	r3, [r7, #12]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	015a      	lsls	r2, r3, #5
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c10:	461a      	mov	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	015a      	lsls	r2, r3, #5
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c22:	461a      	mov	r2, r3
 8002c24:	2302      	movs	r3, #2
 8002c26:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	b2d8      	uxtb	r0, r3
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	212c      	movs	r1, #44	; 0x2c
 8002c32:	fb01 f303 	mul.w	r3, r1, r3
 8002c36:	4413      	add	r3, r2
 8002c38:	3360      	adds	r3, #96	; 0x60
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	4601      	mov	r1, r0
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f004 fcab 	bl	800759c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002c46:	bf00      	nop
 8002c48:	3720      	adds	r7, #32
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b08a      	sub	sp, #40	; 0x28
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	f003 030f 	and.w	r3, r3, #15
 8002c6e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	0c5b      	lsrs	r3, r3, #17
 8002c74:	f003 030f 	and.w	r3, r3, #15
 8002c78:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	091b      	lsrs	r3, r3, #4
 8002c7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c82:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d003      	beq.n	8002c92 <HCD_RXQLVL_IRQHandler+0x44>
 8002c8a:	2b05      	cmp	r3, #5
 8002c8c:	f000 80a9 	beq.w	8002de2 <HCD_RXQLVL_IRQHandler+0x194>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002c90:	e0aa      	b.n	8002de8 <HCD_RXQLVL_IRQHandler+0x19a>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 80a6 	beq.w	8002de6 <HCD_RXQLVL_IRQHandler+0x198>
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	212c      	movs	r1, #44	; 0x2c
 8002ca0:	fb01 f303 	mul.w	r3, r1, r3
 8002ca4:	4413      	add	r3, r2
 8002ca6:	3344      	adds	r3, #68	; 0x44
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f000 809b 	beq.w	8002de6 <HCD_RXQLVL_IRQHandler+0x198>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	212c      	movs	r1, #44	; 0x2c
 8002cb6:	fb01 f303 	mul.w	r3, r1, r3
 8002cba:	4413      	add	r3, r2
 8002cbc:	3350      	adds	r3, #80	; 0x50
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	441a      	add	r2, r3
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	202c      	movs	r0, #44	; 0x2c
 8002cca:	fb00 f303 	mul.w	r3, r0, r3
 8002cce:	440b      	add	r3, r1
 8002cd0:	334c      	adds	r3, #76	; 0x4c
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d87a      	bhi.n	8002dce <HCD_RXQLVL_IRQHandler+0x180>
          (void)USB_ReadPacket(hhcd->Instance,
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6818      	ldr	r0, [r3, #0]
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	212c      	movs	r1, #44	; 0x2c
 8002ce2:	fb01 f303 	mul.w	r3, r1, r3
 8002ce6:	4413      	add	r3, r2
 8002ce8:	3344      	adds	r3, #68	; 0x44
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	b292      	uxth	r2, r2
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	f001 fe0e 	bl	8004912 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	212c      	movs	r1, #44	; 0x2c
 8002cfc:	fb01 f303 	mul.w	r3, r1, r3
 8002d00:	4413      	add	r3, r2
 8002d02:	3344      	adds	r3, #68	; 0x44
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	441a      	add	r2, r3
 8002d0a:	6879      	ldr	r1, [r7, #4]
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	202c      	movs	r0, #44	; 0x2c
 8002d10:	fb00 f303 	mul.w	r3, r0, r3
 8002d14:	440b      	add	r3, r1
 8002d16:	3344      	adds	r3, #68	; 0x44
 8002d18:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	212c      	movs	r1, #44	; 0x2c
 8002d20:	fb01 f303 	mul.w	r3, r1, r3
 8002d24:	4413      	add	r3, r2
 8002d26:	3350      	adds	r3, #80	; 0x50
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	441a      	add	r2, r3
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	202c      	movs	r0, #44	; 0x2c
 8002d34:	fb00 f303 	mul.w	r3, r0, r3
 8002d38:	440b      	add	r3, r1
 8002d3a:	3350      	adds	r3, #80	; 0x50
 8002d3c:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	015a      	lsls	r2, r3, #5
 8002d42:	6a3b      	ldr	r3, [r7, #32]
 8002d44:	4413      	add	r3, r2
 8002d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	0cdb      	lsrs	r3, r3, #19
 8002d4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d52:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	212c      	movs	r1, #44	; 0x2c
 8002d5a:	fb01 f303 	mul.w	r3, r1, r3
 8002d5e:	4413      	add	r3, r2
 8002d60:	3340      	adds	r3, #64	; 0x40
 8002d62:	881b      	ldrh	r3, [r3, #0]
 8002d64:	461a      	mov	r2, r3
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d13c      	bne.n	8002de6 <HCD_RXQLVL_IRQHandler+0x198>
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d039      	beq.n	8002de6 <HCD_RXQLVL_IRQHandler+0x198>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	015a      	lsls	r2, r3, #5
 8002d76:	6a3b      	ldr	r3, [r7, #32]
 8002d78:	4413      	add	r3, r2
 8002d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d88:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d90:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	015a      	lsls	r2, r3, #5
 8002d96:	6a3b      	ldr	r3, [r7, #32]
 8002d98:	4413      	add	r3, r2
 8002d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d9e:	461a      	mov	r2, r3
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	212c      	movs	r1, #44	; 0x2c
 8002daa:	fb01 f303 	mul.w	r3, r1, r3
 8002dae:	4413      	add	r3, r2
 8002db0:	3354      	adds	r3, #84	; 0x54
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	f083 0301 	eor.w	r3, r3, #1
 8002db8:	b2d8      	uxtb	r0, r3
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	212c      	movs	r1, #44	; 0x2c
 8002dc0:	fb01 f303 	mul.w	r3, r1, r3
 8002dc4:	4413      	add	r3, r2
 8002dc6:	3354      	adds	r3, #84	; 0x54
 8002dc8:	4602      	mov	r2, r0
 8002dca:	701a      	strb	r2, [r3, #0]
      break;
 8002dcc:	e00b      	b.n	8002de6 <HCD_RXQLVL_IRQHandler+0x198>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	212c      	movs	r1, #44	; 0x2c
 8002dd4:	fb01 f303 	mul.w	r3, r1, r3
 8002dd8:	4413      	add	r3, r2
 8002dda:	3360      	adds	r3, #96	; 0x60
 8002ddc:	2204      	movs	r2, #4
 8002dde:	701a      	strb	r2, [r3, #0]
      break;
 8002de0:	e001      	b.n	8002de6 <HCD_RXQLVL_IRQHandler+0x198>
      break;
 8002de2:	bf00      	nop
 8002de4:	e000      	b.n	8002de8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002de6:	bf00      	nop
  }
}
 8002de8:	bf00      	nop
 8002dea:	3728      	adds	r7, #40	; 0x28
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002e1c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d10b      	bne.n	8002e40 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d102      	bne.n	8002e38 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f004 fb96 	bl	8007564 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	f043 0302 	orr.w	r3, r3, #2
 8002e3e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f003 0308 	and.w	r3, r3, #8
 8002e46:	2b08      	cmp	r3, #8
 8002e48:	d132      	bne.n	8002eb0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	f043 0308 	orr.w	r3, r3, #8
 8002e50:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f003 0304 	and.w	r3, r3, #4
 8002e58:	2b04      	cmp	r3, #4
 8002e5a:	d126      	bne.n	8002eaa <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d113      	bne.n	8002e8c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002e6a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e6e:	d106      	bne.n	8002e7e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2102      	movs	r1, #2
 8002e76:	4618      	mov	r0, r3
 8002e78:	f001 fe88 	bl	8004b8c <USB_InitFSLSPClkSel>
 8002e7c:	e011      	b.n	8002ea2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2101      	movs	r1, #1
 8002e84:	4618      	mov	r0, r3
 8002e86:	f001 fe81 	bl	8004b8c <USB_InitFSLSPClkSel>
 8002e8a:	e00a      	b.n	8002ea2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d106      	bne.n	8002ea2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002ea0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f004 fb88 	bl	80075b8 <HAL_HCD_PortEnabled_Callback>
 8002ea8:	e002      	b.n	8002eb0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f004 fb92 	bl	80075d4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f003 0320 	and.w	r3, r3, #32
 8002eb6:	2b20      	cmp	r3, #32
 8002eb8:	d103      	bne.n	8002ec2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	f043 0320 	orr.w	r3, r3, #32
 8002ec0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ec8:	461a      	mov	r2, r3
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	6013      	str	r3, [r2, #0]
}
 8002ece:	bf00      	nop
 8002ed0:	3718      	adds	r7, #24
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
	...

08002ed8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ed8:	b590      	push	{r4, r7, lr}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e11f      	b.n	800312a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d106      	bne.n	8002f04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7fd fc16 	bl	8000730 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2224      	movs	r2, #36	; 0x24
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	6812      	ldr	r2, [r2, #0]
 8002f14:	6812      	ldr	r2, [r2, #0]
 8002f16:	f022 0201 	bic.w	r2, r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	6812      	ldr	r2, [r2, #0]
 8002f24:	6812      	ldr	r2, [r2, #0]
 8002f26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	6812      	ldr	r2, [r2, #0]
 8002f34:	6812      	ldr	r2, [r2, #0]
 8002f36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f3c:	f001 f9e4 	bl	8004308 <HAL_RCC_GetPCLK1Freq>
 8002f40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	4a7b      	ldr	r2, [pc, #492]	; (8003134 <HAL_I2C_Init+0x25c>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d807      	bhi.n	8002f5c <HAL_I2C_Init+0x84>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	4a7a      	ldr	r2, [pc, #488]	; (8003138 <HAL_I2C_Init+0x260>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	bf94      	ite	ls
 8002f54:	2301      	movls	r3, #1
 8002f56:	2300      	movhi	r3, #0
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	e006      	b.n	8002f6a <HAL_I2C_Init+0x92>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	4a77      	ldr	r2, [pc, #476]	; (800313c <HAL_I2C_Init+0x264>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	bf94      	ite	ls
 8002f64:	2301      	movls	r3, #1
 8002f66:	2300      	movhi	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e0db      	b.n	800312a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	4a72      	ldr	r2, [pc, #456]	; (8003140 <HAL_I2C_Init+0x268>)
 8002f76:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7a:	0c9b      	lsrs	r3, r3, #18
 8002f7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	6812      	ldr	r2, [r2, #0]
 8002f86:	6852      	ldr	r2, [r2, #4]
 8002f88:	f022 013f 	bic.w	r1, r2, #63	; 0x3f
 8002f8c:	68ba      	ldr	r2, [r7, #8]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6a1b      	ldr	r3, [r3, #32]
 8002f9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	4863      	ldr	r0, [pc, #396]	; (8003134 <HAL_I2C_Init+0x25c>)
 8002fa6:	4283      	cmp	r3, r0
 8002fa8:	d802      	bhi.n	8002fb0 <HAL_I2C_Init+0xd8>
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	3301      	adds	r3, #1
 8002fae:	e009      	b.n	8002fc4 <HAL_I2C_Init+0xec>
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002fb6:	fb00 f303 	mul.w	r3, r0, r3
 8002fba:	4862      	ldr	r0, [pc, #392]	; (8003144 <HAL_I2C_Init+0x26c>)
 8002fbc:	fba0 0303 	umull	r0, r3, r0, r3
 8002fc0:	099b      	lsrs	r3, r3, #6
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	430b      	orrs	r3, r1
 8002fc6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6818      	ldr	r0, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002fd6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	4955      	ldr	r1, [pc, #340]	; (8003134 <HAL_I2C_Init+0x25c>)
 8002fe0:	428b      	cmp	r3, r1
 8002fe2:	d80d      	bhi.n	8003000 <HAL_I2C_Init+0x128>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	1e59      	subs	r1, r3, #1
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ff8:	2b04      	cmp	r3, #4
 8002ffa:	bf38      	it	cc
 8002ffc:	2304      	movcc	r3, #4
 8002ffe:	e04f      	b.n	80030a0 <HAL_I2C_Init+0x1c8>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d111      	bne.n	800302c <HAL_I2C_Init+0x154>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	1e5c      	subs	r4, r3, #1
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6859      	ldr	r1, [r3, #4]
 8003010:	460b      	mov	r3, r1
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	440b      	add	r3, r1
 8003016:	fbb4 f3f3 	udiv	r3, r4, r3
 800301a:	3301      	adds	r3, #1
 800301c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003020:	2b00      	cmp	r3, #0
 8003022:	bf0c      	ite	eq
 8003024:	2301      	moveq	r3, #1
 8003026:	2300      	movne	r3, #0
 8003028:	b2db      	uxtb	r3, r3
 800302a:	e012      	b.n	8003052 <HAL_I2C_Init+0x17a>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	1e5c      	subs	r4, r3, #1
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6859      	ldr	r1, [r3, #4]
 8003034:	460b      	mov	r3, r1
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	0099      	lsls	r1, r3, #2
 800303c:	440b      	add	r3, r1
 800303e:	fbb4 f3f3 	udiv	r3, r4, r3
 8003042:	3301      	adds	r3, #1
 8003044:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003048:	2b00      	cmp	r3, #0
 800304a:	bf0c      	ite	eq
 800304c:	2301      	moveq	r3, #1
 800304e:	2300      	movne	r3, #0
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <HAL_I2C_Init+0x182>
 8003056:	2301      	movs	r3, #1
 8003058:	e022      	b.n	80030a0 <HAL_I2C_Init+0x1c8>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10e      	bne.n	8003080 <HAL_I2C_Init+0x1a8>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	1e5c      	subs	r4, r3, #1
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6859      	ldr	r1, [r3, #4]
 800306a:	460b      	mov	r3, r1
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	440b      	add	r3, r1
 8003070:	fbb4 f3f3 	udiv	r3, r4, r3
 8003074:	3301      	adds	r3, #1
 8003076:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800307a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800307e:	e00f      	b.n	80030a0 <HAL_I2C_Init+0x1c8>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	1e5c      	subs	r4, r3, #1
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6859      	ldr	r1, [r3, #4]
 8003088:	460b      	mov	r3, r1
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	440b      	add	r3, r1
 800308e:	0099      	lsls	r1, r3, #2
 8003090:	440b      	add	r3, r1
 8003092:	fbb4 f3f3 	udiv	r3, r4, r3
 8003096:	3301      	adds	r3, #1
 8003098:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800309c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030a0:	4313      	orrs	r3, r2
 80030a2:	61c3      	str	r3, [r0, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6812      	ldr	r2, [r2, #0]
 80030ac:	6812      	ldr	r2, [r2, #0]
 80030ae:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	69d0      	ldr	r0, [r2, #28]
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	6a12      	ldr	r2, [r2, #32]
 80030ba:	4302      	orrs	r2, r0
 80030bc:	430a      	orrs	r2, r1
 80030be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	6908      	ldr	r0, [r1, #16]
 80030d6:	6879      	ldr	r1, [r7, #4]
 80030d8:	68c9      	ldr	r1, [r1, #12]
 80030da:	4301      	orrs	r1, r0
 80030dc:	430b      	orrs	r3, r1
 80030de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	6812      	ldr	r2, [r2, #0]
 80030e8:	68d2      	ldr	r2, [r2, #12]
 80030ea:	f022 01ff 	bic.w	r1, r2, #255	; 0xff
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	6950      	ldr	r0, [r2, #20]
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	6992      	ldr	r2, [r2, #24]
 80030f6:	4302      	orrs	r2, r0
 80030f8:	430a      	orrs	r2, r1
 80030fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	6812      	ldr	r2, [r2, #0]
 8003104:	6812      	ldr	r2, [r2, #0]
 8003106:	f042 0201 	orr.w	r2, r2, #1
 800310a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2220      	movs	r2, #32
 8003116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3714      	adds	r7, #20
 800312e:	46bd      	mov	sp, r7
 8003130:	bd90      	pop	{r4, r7, pc}
 8003132:	bf00      	nop
 8003134:	000186a0 	.word	0x000186a0
 8003138:	001e847f 	.word	0x001e847f
 800313c:	003d08ff 	.word	0x003d08ff
 8003140:	431bde83 	.word	0x431bde83
 8003144:	10624dd3 	.word	0x10624dd3

08003148 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b088      	sub	sp, #32
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e127      	b.n	80033aa <HAL_I2S_Init+0x262>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d109      	bne.n	800317a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a90      	ldr	r2, [pc, #576]	; (80033b4 <HAL_I2S_Init+0x26c>)
 8003172:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7fd fb53 	bl	8000820 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2202      	movs	r2, #2
 800317e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	69db      	ldr	r3, [r3, #28]
 800318c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003190:	f023 030f 	bic.w	r3, r3, #15
 8003194:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2202      	movs	r2, #2
 800319c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d060      	beq.n	8003268 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d102      	bne.n	80031b4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80031ae:	2310      	movs	r3, #16
 80031b0:	617b      	str	r3, [r7, #20]
 80031b2:	e001      	b.n	80031b8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80031b4:	2320      	movs	r3, #32
 80031b6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	2b20      	cmp	r3, #32
 80031be:	d802      	bhi.n	80031c6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80031c6:	2001      	movs	r0, #1
 80031c8:	f001 f994 	bl	80044f4 <HAL_RCCEx_GetPeriphCLKFreq>
 80031cc:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031d6:	d125      	bne.n	8003224 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d010      	beq.n	8003202 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80031ea:	4613      	mov	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4413      	add	r3, r2
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	461a      	mov	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031fc:	3305      	adds	r3, #5
 80031fe:	613b      	str	r3, [r7, #16]
 8003200:	e01f      	b.n	8003242 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	fbb2 f2f3 	udiv	r2, r2, r3
 800320c:	4613      	mov	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	461a      	mov	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	fbb2 f3f3 	udiv	r3, r2, r3
 800321e:	3305      	adds	r3, #5
 8003220:	613b      	str	r3, [r7, #16]
 8003222:	e00e      	b.n	8003242 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	fbb2 f2f3 	udiv	r2, r2, r3
 800322c:	4613      	mov	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4413      	add	r3, r2
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	461a      	mov	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	fbb2 f3f3 	udiv	r3, r2, r3
 800323e:	3305      	adds	r3, #5
 8003240:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	4a5c      	ldr	r2, [pc, #368]	; (80033b8 <HAL_I2S_Init+0x270>)
 8003246:	fba2 2303 	umull	r2, r3, r2, r3
 800324a:	08db      	lsrs	r3, r3, #3
 800324c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	085b      	lsrs	r3, r3, #1
 800325e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	021b      	lsls	r3, r3, #8
 8003264:	61bb      	str	r3, [r7, #24]
 8003266:	e003      	b.n	8003270 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003268:	2302      	movs	r3, #2
 800326a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800326c:	2300      	movs	r3, #0
 800326e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d902      	bls.n	800327c <HAL_I2S_Init+0x134>
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	2bff      	cmp	r3, #255	; 0xff
 800327a:	d907      	bls.n	800328c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003280:	f043 0210 	orr.w	r2, r3, #16
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e08e      	b.n	80033aa <HAL_I2S_Init+0x262>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	6911      	ldr	r1, [r2, #16]
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	4311      	orrs	r1, r2
 8003298:	69fa      	ldr	r2, [r7, #28]
 800329a:	430a      	orrs	r2, r1
 800329c:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	69db      	ldr	r3, [r3, #28]
 80032a8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80032ac:	f023 030f 	bic.w	r3, r3, #15
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	6848      	ldr	r0, [r1, #4]
 80032b4:	6879      	ldr	r1, [r7, #4]
 80032b6:	6889      	ldr	r1, [r1, #8]
 80032b8:	4308      	orrs	r0, r1
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	68c9      	ldr	r1, [r1, #12]
 80032be:	4308      	orrs	r0, r1
 80032c0:	6879      	ldr	r1, [r7, #4]
 80032c2:	6989      	ldr	r1, [r1, #24]
 80032c4:	4301      	orrs	r1, r0
 80032c6:	430b      	orrs	r3, r1
 80032c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80032cc:	61d3      	str	r3, [r2, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d161      	bne.n	800339a <HAL_I2S_Init+0x252>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a38      	ldr	r2, [pc, #224]	; (80033bc <HAL_I2S_Init+0x274>)
 80032da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a37      	ldr	r2, [pc, #220]	; (80033c0 <HAL_I2S_Init+0x278>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d101      	bne.n	80032ea <HAL_I2S_Init+0x1a2>
 80032e6:	4a37      	ldr	r2, [pc, #220]	; (80033c4 <HAL_I2S_Init+0x27c>)
 80032e8:	e001      	b.n	80032ee <HAL_I2S_Init+0x1a6>
 80032ea:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4933      	ldr	r1, [pc, #204]	; (80033c0 <HAL_I2S_Init+0x278>)
 80032f4:	428b      	cmp	r3, r1
 80032f6:	d101      	bne.n	80032fc <HAL_I2S_Init+0x1b4>
 80032f8:	4b32      	ldr	r3, [pc, #200]	; (80033c4 <HAL_I2S_Init+0x27c>)
 80032fa:	e001      	b.n	8003300 <HAL_I2S_Init+0x1b8>
 80032fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003306:	f023 030f 	bic.w	r3, r3, #15
 800330a:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a2b      	ldr	r2, [pc, #172]	; (80033c0 <HAL_I2S_Init+0x278>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d101      	bne.n	800331a <HAL_I2S_Init+0x1d2>
 8003316:	4b2b      	ldr	r3, [pc, #172]	; (80033c4 <HAL_I2S_Init+0x27c>)
 8003318:	e001      	b.n	800331e <HAL_I2S_Init+0x1d6>
 800331a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800331e:	2202      	movs	r2, #2
 8003320:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a26      	ldr	r2, [pc, #152]	; (80033c0 <HAL_I2S_Init+0x278>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d101      	bne.n	8003330 <HAL_I2S_Init+0x1e8>
 800332c:	4b25      	ldr	r3, [pc, #148]	; (80033c4 <HAL_I2S_Init+0x27c>)
 800332e:	e001      	b.n	8003334 <HAL_I2S_Init+0x1ec>
 8003330:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003340:	d003      	beq.n	800334a <HAL_I2S_Init+0x202>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d103      	bne.n	8003352 <HAL_I2S_Init+0x20a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800334a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800334e:	613b      	str	r3, [r7, #16]
 8003350:	e001      	b.n	8003356 <HAL_I2S_Init+0x20e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003352:	2300      	movs	r3, #0
 8003354:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003360:	4313      	orrs	r3, r2
 8003362:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800336a:	4313      	orrs	r3, r2
 800336c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003374:	4313      	orrs	r3, r2
 8003376:	b29a      	uxth	r2, r3
 8003378:	897b      	ldrh	r3, [r7, #10]
 800337a:	4313      	orrs	r3, r2
 800337c:	b29b      	uxth	r3, r3
 800337e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003382:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a0d      	ldr	r2, [pc, #52]	; (80033c0 <HAL_I2S_Init+0x278>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d101      	bne.n	8003392 <HAL_I2S_Init+0x24a>
 800338e:	4b0d      	ldr	r3, [pc, #52]	; (80033c4 <HAL_I2S_Init+0x27c>)
 8003390:	e001      	b.n	8003396 <HAL_I2S_Init+0x24e>
 8003392:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003396:	897a      	ldrh	r2, [r7, #10]
 8003398:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3720      	adds	r7, #32
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	080034bf 	.word	0x080034bf
 80033b8:	cccccccd 	.word	0xcccccccd
 80033bc:	080035d5 	.word	0x080035d5
 80033c0:	40003800 	.word	0x40003800
 80033c4:	40003400 	.word	0x40003400

080033c8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003414:	8812      	ldrh	r2, [r2, #0]
 8003416:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341c:	1c9a      	adds	r2, r3, #2
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003426:	b29b      	uxth	r3, r3
 8003428:	3b01      	subs	r3, #1
 800342a:	b29a      	uxth	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003434:	b29b      	uxth	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10e      	bne.n	8003458 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	6812      	ldr	r2, [r2, #0]
 8003442:	6852      	ldr	r2, [r2, #4]
 8003444:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003448:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f7ff ffb8 	bl	80033c8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003458:	bf00      	nop
 800345a:	3708      	adds	r7, #8
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	6812      	ldr	r2, [r2, #0]
 8003470:	68d2      	ldr	r2, [r2, #12]
 8003472:	b292      	uxth	r2, r2
 8003474:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347a:	1c9a      	adds	r2, r3, #2
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003484:	b29b      	uxth	r3, r3
 8003486:	3b01      	subs	r3, #1
 8003488:	b29a      	uxth	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003492:	b29b      	uxth	r3, r3
 8003494:	2b00      	cmp	r3, #0
 8003496:	d10e      	bne.n	80034b6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	6812      	ldr	r2, [r2, #0]
 80034a0:	6852      	ldr	r2, [r2, #4]
 80034a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034a6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f7ff ff93 	bl	80033dc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80034b6:	bf00      	nop
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b086      	sub	sp, #24
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b04      	cmp	r3, #4
 80034d8:	d13a      	bne.n	8003550 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d109      	bne.n	80034f8 <I2S_IRQHandler+0x3a>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ee:	2b40      	cmp	r3, #64	; 0x40
 80034f0:	d102      	bne.n	80034f8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7ff ffb4 	bl	8003460 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034fe:	2b40      	cmp	r3, #64	; 0x40
 8003500:	d126      	bne.n	8003550 <I2S_IRQHandler+0x92>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f003 0320 	and.w	r3, r3, #32
 800350c:	2b20      	cmp	r3, #32
 800350e:	d11f      	bne.n	8003550 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	6812      	ldr	r2, [r2, #0]
 8003518:	6852      	ldr	r2, [r2, #4]
 800351a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800351e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003520:	2300      	movs	r3, #0
 8003522:	613b      	str	r3, [r7, #16]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	613b      	str	r3, [r7, #16]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	613b      	str	r3, [r7, #16]
 8003534:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003542:	f043 0202 	orr.w	r2, r3, #2
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7ff ff50 	bl	80033f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b03      	cmp	r3, #3
 800355a:	d136      	bne.n	80035ca <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b02      	cmp	r3, #2
 8003564:	d109      	bne.n	800357a <I2S_IRQHandler+0xbc>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003570:	2b80      	cmp	r3, #128	; 0x80
 8003572:	d102      	bne.n	800357a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f7ff ff45 	bl	8003404 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	f003 0308 	and.w	r3, r3, #8
 8003580:	2b08      	cmp	r3, #8
 8003582:	d122      	bne.n	80035ca <I2S_IRQHandler+0x10c>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f003 0320 	and.w	r3, r3, #32
 800358e:	2b20      	cmp	r3, #32
 8003590:	d11b      	bne.n	80035ca <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	6812      	ldr	r2, [r2, #0]
 800359a:	6852      	ldr	r2, [r2, #4]
 800359c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035a0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80035a2:	2300      	movs	r3, #0
 80035a4:	60fb      	str	r3, [r7, #12]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	60fb      	str	r3, [r7, #12]
 80035ae:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035bc:	f043 0204 	orr.w	r2, r3, #4
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f7ff ff13 	bl	80033f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80035ca:	bf00      	nop
 80035cc:	3718      	adds	r7, #24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
	...

080035d4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b088      	sub	sp, #32
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4aa2      	ldr	r2, [pc, #648]	; (8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d101      	bne.n	80035f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80035ee:	4ba2      	ldr	r3, [pc, #648]	; (8003878 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80035f0:	e001      	b.n	80035f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80035f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a9b      	ldr	r2, [pc, #620]	; (8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d101      	bne.n	8003610 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800360c:	4b9a      	ldr	r3, [pc, #616]	; (8003878 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800360e:	e001      	b.n	8003614 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003610:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003620:	d004      	beq.n	800362c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	f040 8099 	bne.w	800375e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b02      	cmp	r3, #2
 8003634:	d107      	bne.n	8003646 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800363c:	2b00      	cmp	r3, #0
 800363e:	d002      	beq.n	8003646 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 f925 	bl	8003890 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b01      	cmp	r3, #1
 800364e:	d107      	bne.n	8003660 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003656:	2b00      	cmp	r3, #0
 8003658:	d002      	beq.n	8003660 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f9c6 	bl	80039ec <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003666:	2b40      	cmp	r3, #64	; 0x40
 8003668:	d13a      	bne.n	80036e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	f003 0320 	and.w	r3, r3, #32
 8003670:	2b00      	cmp	r3, #0
 8003672:	d035      	beq.n	80036e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a7e      	ldr	r2, [pc, #504]	; (8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d101      	bne.n	8003682 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800367e:	4b7e      	ldr	r3, [pc, #504]	; (8003878 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003680:	e001      	b.n	8003686 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003682:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	6812      	ldr	r2, [r2, #0]
 800368a:	497a      	ldr	r1, [pc, #488]	; (8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800368c:	428a      	cmp	r2, r1
 800368e:	d101      	bne.n	8003694 <HAL_I2SEx_FullDuplex_IRQHandler+0xc0>
 8003690:	4a79      	ldr	r2, [pc, #484]	; (8003878 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003692:	e001      	b.n	8003698 <HAL_I2SEx_FullDuplex_IRQHandler+0xc4>
 8003694:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003698:	6852      	ldr	r2, [r2, #4]
 800369a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800369e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	6812      	ldr	r2, [r2, #0]
 80036a8:	6852      	ldr	r2, [r2, #4]
 80036aa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036ae:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80036b0:	2300      	movs	r3, #0
 80036b2:	60fb      	str	r3, [r7, #12]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	60fb      	str	r3, [r7, #12]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	60fb      	str	r3, [r7, #12]
 80036c4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d2:	f043 0202 	orr.w	r2, r3, #2
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f7ff fe88 	bl	80033f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	f003 0308 	and.w	r3, r3, #8
 80036e6:	2b08      	cmp	r3, #8
 80036e8:	f040 80be 	bne.w	8003868 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	f003 0320 	and.w	r3, r3, #32
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f000 80b8 	beq.w	8003868 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	6812      	ldr	r2, [r2, #0]
 8003700:	6852      	ldr	r2, [r2, #4]
 8003702:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003706:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a59      	ldr	r2, [pc, #356]	; (8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d101      	bne.n	8003716 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003712:	4b59      	ldr	r3, [pc, #356]	; (8003878 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003714:	e001      	b.n	800371a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003716:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	6812      	ldr	r2, [r2, #0]
 800371e:	4955      	ldr	r1, [pc, #340]	; (8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003720:	428a      	cmp	r2, r1
 8003722:	d101      	bne.n	8003728 <HAL_I2SEx_FullDuplex_IRQHandler+0x154>
 8003724:	4a54      	ldr	r2, [pc, #336]	; (8003878 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003726:	e001      	b.n	800372c <HAL_I2SEx_FullDuplex_IRQHandler+0x158>
 8003728:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800372c:	6852      	ldr	r2, [r2, #4]
 800372e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003732:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003734:	2300      	movs	r3, #0
 8003736:	60bb      	str	r3, [r7, #8]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	60bb      	str	r3, [r7, #8]
 8003740:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374e:	f043 0204 	orr.w	r2, r3, #4
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7ff fe4a 	bl	80033f0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800375c:	e084      	b.n	8003868 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b02      	cmp	r3, #2
 8003766:	d107      	bne.n	8003778 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800376e:	2b00      	cmp	r3, #0
 8003770:	d002      	beq.n	8003778 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f8be 	bl	80038f4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b01      	cmp	r3, #1
 8003780:	d107      	bne.n	8003792 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003788:	2b00      	cmp	r3, #0
 800378a:	d002      	beq.n	8003792 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 f8fb 	bl	8003988 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003798:	2b40      	cmp	r3, #64	; 0x40
 800379a:	d12f      	bne.n	80037fc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	f003 0320 	and.w	r3, r3, #32
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d02a      	beq.n	80037fc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	6812      	ldr	r2, [r2, #0]
 80037ae:	6852      	ldr	r2, [r2, #4]
 80037b0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037b4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a2e      	ldr	r2, [pc, #184]	; (8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d101      	bne.n	80037c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80037c0:	4b2d      	ldr	r3, [pc, #180]	; (8003878 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037c2:	e001      	b.n	80037c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80037c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	6812      	ldr	r2, [r2, #0]
 80037cc:	4929      	ldr	r1, [pc, #164]	; (8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037ce:	428a      	cmp	r2, r1
 80037d0:	d101      	bne.n	80037d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x202>
 80037d2:	4a29      	ldr	r2, [pc, #164]	; (8003878 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037d4:	e001      	b.n	80037da <HAL_I2SEx_FullDuplex_IRQHandler+0x206>
 80037d6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80037da:	6852      	ldr	r2, [r2, #4]
 80037dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037e0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ee:	f043 0202 	orr.w	r2, r3, #2
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7ff fdfa 	bl	80033f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	f003 0308 	and.w	r3, r3, #8
 8003802:	2b08      	cmp	r3, #8
 8003804:	d131      	bne.n	800386a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	f003 0320 	and.w	r3, r3, #32
 800380c:	2b00      	cmp	r3, #0
 800380e:	d02c      	beq.n	800386a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a17      	ldr	r2, [pc, #92]	; (8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d101      	bne.n	800381e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800381a:	4b17      	ldr	r3, [pc, #92]	; (8003878 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800381c:	e001      	b.n	8003822 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800381e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	6812      	ldr	r2, [r2, #0]
 8003826:	4913      	ldr	r1, [pc, #76]	; (8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003828:	428a      	cmp	r2, r1
 800382a:	d101      	bne.n	8003830 <HAL_I2SEx_FullDuplex_IRQHandler+0x25c>
 800382c:	4a12      	ldr	r2, [pc, #72]	; (8003878 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800382e:	e001      	b.n	8003834 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>
 8003830:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003834:	6852      	ldr	r2, [r2, #4]
 8003836:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800383a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6812      	ldr	r2, [r2, #0]
 8003844:	6852      	ldr	r2, [r2, #4]
 8003846:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800384a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003858:	f043 0204 	orr.w	r2, r3, #4
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f7ff fdc5 	bl	80033f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003866:	e000      	b.n	800386a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003868:	bf00      	nop
}
 800386a:	bf00      	nop
 800386c:	3720      	adds	r7, #32
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	40003800 	.word	0x40003800
 8003878:	40003400 	.word	0x40003400

0800387c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a0:	1c98      	adds	r0, r3, #2
 80038a2:	6879      	ldr	r1, [r7, #4]
 80038a4:	6248      	str	r0, [r1, #36]	; 0x24
 80038a6:	881b      	ldrh	r3, [r3, #0]
 80038a8:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	3b01      	subs	r3, #1
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038bc:	b29b      	uxth	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d113      	bne.n	80038ea <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	6812      	ldr	r2, [r2, #0]
 80038ca:	6852      	ldr	r2, [r2, #4]
 80038cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038d0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d106      	bne.n	80038ea <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f7ff ffc9 	bl	800387c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038ea:	bf00      	nop
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
	...

080038f4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a1f      	ldr	r2, [pc, #124]	; (8003980 <I2SEx_TxISR_I2SExt+0x8c>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d101      	bne.n	800390a <I2SEx_TxISR_I2SExt+0x16>
 8003906:	4a1f      	ldr	r2, [pc, #124]	; (8003984 <I2SEx_TxISR_I2SExt+0x90>)
 8003908:	e001      	b.n	800390e <I2SEx_TxISR_I2SExt+0x1a>
 800390a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003912:	1c98      	adds	r0, r3, #2
 8003914:	6879      	ldr	r1, [r7, #4]
 8003916:	6248      	str	r0, [r1, #36]	; 0x24
 8003918:	881b      	ldrh	r3, [r3, #0]
 800391a:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003920:	b29b      	uxth	r3, r3
 8003922:	3b01      	subs	r3, #1
 8003924:	b29a      	uxth	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800392e:	b29b      	uxth	r3, r3
 8003930:	2b00      	cmp	r3, #0
 8003932:	d121      	bne.n	8003978 <I2SEx_TxISR_I2SExt+0x84>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a11      	ldr	r2, [pc, #68]	; (8003980 <I2SEx_TxISR_I2SExt+0x8c>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d101      	bne.n	8003942 <I2SEx_TxISR_I2SExt+0x4e>
 800393e:	4b11      	ldr	r3, [pc, #68]	; (8003984 <I2SEx_TxISR_I2SExt+0x90>)
 8003940:	e001      	b.n	8003946 <I2SEx_TxISR_I2SExt+0x52>
 8003942:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	6812      	ldr	r2, [r2, #0]
 800394a:	490d      	ldr	r1, [pc, #52]	; (8003980 <I2SEx_TxISR_I2SExt+0x8c>)
 800394c:	428a      	cmp	r2, r1
 800394e:	d101      	bne.n	8003954 <I2SEx_TxISR_I2SExt+0x60>
 8003950:	4a0c      	ldr	r2, [pc, #48]	; (8003984 <I2SEx_TxISR_I2SExt+0x90>)
 8003952:	e001      	b.n	8003958 <I2SEx_TxISR_I2SExt+0x64>
 8003954:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003958:	6852      	ldr	r2, [r2, #4]
 800395a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800395e:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003964:	b29b      	uxth	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d106      	bne.n	8003978 <I2SEx_TxISR_I2SExt+0x84>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7ff ff82 	bl	800387c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003978:	bf00      	nop
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	40003800 	.word	0x40003800
 8003984:	40003400 	.word	0x40003400

08003988 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003994:	1c99      	adds	r1, r3, #2
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	62d1      	str	r1, [r2, #44]	; 0x2c
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	6812      	ldr	r2, [r2, #0]
 800399e:	68d2      	ldr	r2, [r2, #12]
 80039a0:	b292      	uxth	r2, r2
 80039a2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	3b01      	subs	r3, #1
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d113      	bne.n	80039e4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	6812      	ldr	r2, [r2, #0]
 80039c4:	6852      	ldr	r2, [r2, #4]
 80039c6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039ca:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d106      	bne.n	80039e4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7ff ff4c 	bl	800387c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039e4:	bf00      	nop
 80039e6:	3708      	adds	r7, #8
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f8:	1c99      	adds	r1, r3, #2
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	62d1      	str	r1, [r2, #44]	; 0x2c
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	6812      	ldr	r2, [r2, #0]
 8003a02:	491e      	ldr	r1, [pc, #120]	; (8003a7c <I2SEx_RxISR_I2SExt+0x90>)
 8003a04:	428a      	cmp	r2, r1
 8003a06:	d101      	bne.n	8003a0c <I2SEx_RxISR_I2SExt+0x20>
 8003a08:	4a1d      	ldr	r2, [pc, #116]	; (8003a80 <I2SEx_RxISR_I2SExt+0x94>)
 8003a0a:	e001      	b.n	8003a10 <I2SEx_RxISR_I2SExt+0x24>
 8003a0c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003a10:	68d2      	ldr	r2, [r2, #12]
 8003a12:	b292      	uxth	r2, r2
 8003a14:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d121      	bne.n	8003a72 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a12      	ldr	r2, [pc, #72]	; (8003a7c <I2SEx_RxISR_I2SExt+0x90>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d101      	bne.n	8003a3c <I2SEx_RxISR_I2SExt+0x50>
 8003a38:	4b11      	ldr	r3, [pc, #68]	; (8003a80 <I2SEx_RxISR_I2SExt+0x94>)
 8003a3a:	e001      	b.n	8003a40 <I2SEx_RxISR_I2SExt+0x54>
 8003a3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	6812      	ldr	r2, [r2, #0]
 8003a44:	490d      	ldr	r1, [pc, #52]	; (8003a7c <I2SEx_RxISR_I2SExt+0x90>)
 8003a46:	428a      	cmp	r2, r1
 8003a48:	d101      	bne.n	8003a4e <I2SEx_RxISR_I2SExt+0x62>
 8003a4a:	4a0d      	ldr	r2, [pc, #52]	; (8003a80 <I2SEx_RxISR_I2SExt+0x94>)
 8003a4c:	e001      	b.n	8003a52 <I2SEx_RxISR_I2SExt+0x66>
 8003a4e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003a52:	6852      	ldr	r2, [r2, #4]
 8003a54:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a58:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d106      	bne.n	8003a72 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f7ff ff05 	bl	800387c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a72:	bf00      	nop
 8003a74:	3708      	adds	r7, #8
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	40003800 	.word	0x40003800
 8003a80:	40003400 	.word	0x40003400

08003a84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b086      	sub	sp, #24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e264      	b.n	8003f60 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d075      	beq.n	8003b8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003aa2:	4ba3      	ldr	r3, [pc, #652]	; (8003d30 <HAL_RCC_OscConfig+0x2ac>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f003 030c 	and.w	r3, r3, #12
 8003aaa:	2b04      	cmp	r3, #4
 8003aac:	d00c      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003aae:	4ba0      	ldr	r3, [pc, #640]	; (8003d30 <HAL_RCC_OscConfig+0x2ac>)
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ab6:	2b08      	cmp	r3, #8
 8003ab8:	d112      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003aba:	4b9d      	ldr	r3, [pc, #628]	; (8003d30 <HAL_RCC_OscConfig+0x2ac>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ac2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ac6:	d10b      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac8:	4b99      	ldr	r3, [pc, #612]	; (8003d30 <HAL_RCC_OscConfig+0x2ac>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d05b      	beq.n	8003b8c <HAL_RCC_OscConfig+0x108>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d157      	bne.n	8003b8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e23f      	b.n	8003f60 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ae8:	d106      	bne.n	8003af8 <HAL_RCC_OscConfig+0x74>
 8003aea:	4a91      	ldr	r2, [pc, #580]	; (8003d30 <HAL_RCC_OscConfig+0x2ac>)
 8003aec:	4b90      	ldr	r3, [pc, #576]	; (8003d30 <HAL_RCC_OscConfig+0x2ac>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003af4:	6013      	str	r3, [r2, #0]
 8003af6:	e01d      	b.n	8003b34 <HAL_RCC_OscConfig+0xb0>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b00:	d10c      	bne.n	8003b1c <HAL_RCC_OscConfig+0x98>
 8003b02:	4a8b      	ldr	r2, [pc, #556]	; (8003d30 <HAL_RCC_OscConfig+0x2ac>)
 8003b04:	4b8a      	ldr	r3, [pc, #552]	; (8003d30 <HAL_RCC_OscConfig+0x2ac>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b0c:	6013      	str	r3, [r2, #0]
 8003b0e:	4a88      	ldr	r2, [pc, #544]	; (8003d30 <HAL_RCC_OscConfig+0x2ac>)
 8003b10:	4b87      	ldr	r3, [pc, #540]	; (8003d30 <HAL_RCC_OscConfig+0x2ac>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b18:	6013      	str	r3, [r2, #0]
 8003b1a:	e00b      	b.n	8003b34 <HAL_RCC_OscConfig+0xb0>
 8003b1c:	4a84      	ldr	r2, [pc, #528]	; (8003d30 <HAL_RCC_OscConfig+0x2ac>)
 8003b1e:	4b84      	ldr	r3, [pc, #528]	; (8003d30 <HAL_RCC_OscConfig+0x2ac>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b26:	6013      	str	r3, [r2, #0]
 8003b28:	4a81      	ldr	r2, [pc, #516]	; (8003d30 <HAL_RCC_OscConfig+0x2ac>)
 8003b2a:	4b81      	ldr	r3, [pc, #516]	; (8003d30 <HAL_RCC_OscConfig+0x2ac>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d013      	beq.n	8003b64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b3c:	f7fd f944 	bl	8000dc8 <HAL_GetTick>
 8003b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b42:	e008      	b.n	8003b56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b44:	f7fd f940 	bl	8000dc8 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b64      	cmp	r3, #100	; 0x64
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e204      	b.n	8003f60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b56:	4b76      	ldr	r3, [pc, #472]	; (8003d30 <HAL_RCC_OscConfig+0x2ac>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0f0      	beq.n	8003b44 <HAL_RCC_OscConfig+0xc0>
 8003b62:	e014      	b.n	8003b8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b64:	f7fd f930 	bl	8000dc8 <HAL_GetTick>
 8003b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b6a:	e008      	b.n	8003b7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b6c:	f7fd f92c 	bl	8000dc8 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b64      	cmp	r3, #100	; 0x64
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e1f0      	b.n	8003f60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b7e:	4b6c      	ldr	r3, [pc, #432]	; (8003d30 <HAL_RCC_OscConfig+0x2ac>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1f0      	bne.n	8003b6c <HAL_RCC_OscConfig+0xe8>
 8003b8a:	e000      	b.n	8003b8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d063      	beq.n	8003c62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b9a:	4b65      	ldr	r3, [pc, #404]	; (8003d30 <HAL_RCC_OscConfig+0x2ac>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f003 030c 	and.w	r3, r3, #12
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00b      	beq.n	8003bbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ba6:	4b62      	ldr	r3, [pc, #392]	; (8003d30 <HAL_RCC_OscConfig+0x2ac>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bae:	2b08      	cmp	r3, #8
 8003bb0:	d11c      	bne.n	8003bec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bb2:	4b5f      	ldr	r3, [pc, #380]	; (8003d30 <HAL_RCC_OscConfig+0x2ac>)
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d116      	bne.n	8003bec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bbe:	4b5c      	ldr	r3, [pc, #368]	; (8003d30 <HAL_RCC_OscConfig+0x2ac>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d005      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x152>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d001      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e1c4      	b.n	8003f60 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bd6:	4956      	ldr	r1, [pc, #344]	; (8003d30 <HAL_RCC_OscConfig+0x2ac>)
 8003bd8:	4b55      	ldr	r3, [pc, #340]	; (8003d30 <HAL_RCC_OscConfig+0x2ac>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	00db      	lsls	r3, r3, #3
 8003be6:	4313      	orrs	r3, r2
 8003be8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bea:	e03a      	b.n	8003c62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d020      	beq.n	8003c36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bf4:	4b4f      	ldr	r3, [pc, #316]	; (8003d34 <HAL_RCC_OscConfig+0x2b0>)
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bfa:	f7fd f8e5 	bl	8000dc8 <HAL_GetTick>
 8003bfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c00:	e008      	b.n	8003c14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c02:	f7fd f8e1 	bl	8000dc8 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d901      	bls.n	8003c14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e1a5      	b.n	8003f60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c14:	4b46      	ldr	r3, [pc, #280]	; (8003d30 <HAL_RCC_OscConfig+0x2ac>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d0f0      	beq.n	8003c02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c20:	4943      	ldr	r1, [pc, #268]	; (8003d30 <HAL_RCC_OscConfig+0x2ac>)
 8003c22:	4b43      	ldr	r3, [pc, #268]	; (8003d30 <HAL_RCC_OscConfig+0x2ac>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	00db      	lsls	r3, r3, #3
 8003c30:	4313      	orrs	r3, r2
 8003c32:	600b      	str	r3, [r1, #0]
 8003c34:	e015      	b.n	8003c62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c36:	4b3f      	ldr	r3, [pc, #252]	; (8003d34 <HAL_RCC_OscConfig+0x2b0>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c3c:	f7fd f8c4 	bl	8000dc8 <HAL_GetTick>
 8003c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c42:	e008      	b.n	8003c56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c44:	f7fd f8c0 	bl	8000dc8 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e184      	b.n	8003f60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c56:	4b36      	ldr	r3, [pc, #216]	; (8003d30 <HAL_RCC_OscConfig+0x2ac>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1f0      	bne.n	8003c44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0308 	and.w	r3, r3, #8
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d030      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d016      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c76:	4b30      	ldr	r3, [pc, #192]	; (8003d38 <HAL_RCC_OscConfig+0x2b4>)
 8003c78:	2201      	movs	r2, #1
 8003c7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c7c:	f7fd f8a4 	bl	8000dc8 <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c84:	f7fd f8a0 	bl	8000dc8 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e164      	b.n	8003f60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c96:	4b26      	ldr	r3, [pc, #152]	; (8003d30 <HAL_RCC_OscConfig+0x2ac>)
 8003c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d0f0      	beq.n	8003c84 <HAL_RCC_OscConfig+0x200>
 8003ca2:	e015      	b.n	8003cd0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ca4:	4b24      	ldr	r3, [pc, #144]	; (8003d38 <HAL_RCC_OscConfig+0x2b4>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003caa:	f7fd f88d 	bl	8000dc8 <HAL_GetTick>
 8003cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cb0:	e008      	b.n	8003cc4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cb2:	f7fd f889 	bl	8000dc8 <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d901      	bls.n	8003cc4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e14d      	b.n	8003f60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cc4:	4b1a      	ldr	r3, [pc, #104]	; (8003d30 <HAL_RCC_OscConfig+0x2ac>)
 8003cc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1f0      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0304 	and.w	r3, r3, #4
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f000 80a0 	beq.w	8003e1e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ce2:	4b13      	ldr	r3, [pc, #76]	; (8003d30 <HAL_RCC_OscConfig+0x2ac>)
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10f      	bne.n	8003d0e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60bb      	str	r3, [r7, #8]
 8003cf2:	4a0f      	ldr	r2, [pc, #60]	; (8003d30 <HAL_RCC_OscConfig+0x2ac>)
 8003cf4:	4b0e      	ldr	r3, [pc, #56]	; (8003d30 <HAL_RCC_OscConfig+0x2ac>)
 8003cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8003cfe:	4b0c      	ldr	r3, [pc, #48]	; (8003d30 <HAL_RCC_OscConfig+0x2ac>)
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d06:	60bb      	str	r3, [r7, #8]
 8003d08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d0e:	4b0b      	ldr	r3, [pc, #44]	; (8003d3c <HAL_RCC_OscConfig+0x2b8>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d121      	bne.n	8003d5e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d1a:	4a08      	ldr	r2, [pc, #32]	; (8003d3c <HAL_RCC_OscConfig+0x2b8>)
 8003d1c:	4b07      	ldr	r3, [pc, #28]	; (8003d3c <HAL_RCC_OscConfig+0x2b8>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d26:	f7fd f84f 	bl	8000dc8 <HAL_GetTick>
 8003d2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d2c:	e011      	b.n	8003d52 <HAL_RCC_OscConfig+0x2ce>
 8003d2e:	bf00      	nop
 8003d30:	40023800 	.word	0x40023800
 8003d34:	42470000 	.word	0x42470000
 8003d38:	42470e80 	.word	0x42470e80
 8003d3c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d40:	f7fd f842 	bl	8000dc8 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e106      	b.n	8003f60 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d52:	4b85      	ldr	r3, [pc, #532]	; (8003f68 <HAL_RCC_OscConfig+0x4e4>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d0f0      	beq.n	8003d40 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d106      	bne.n	8003d74 <HAL_RCC_OscConfig+0x2f0>
 8003d66:	4a81      	ldr	r2, [pc, #516]	; (8003f6c <HAL_RCC_OscConfig+0x4e8>)
 8003d68:	4b80      	ldr	r3, [pc, #512]	; (8003f6c <HAL_RCC_OscConfig+0x4e8>)
 8003d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6c:	f043 0301 	orr.w	r3, r3, #1
 8003d70:	6713      	str	r3, [r2, #112]	; 0x70
 8003d72:	e01c      	b.n	8003dae <HAL_RCC_OscConfig+0x32a>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	2b05      	cmp	r3, #5
 8003d7a:	d10c      	bne.n	8003d96 <HAL_RCC_OscConfig+0x312>
 8003d7c:	4a7b      	ldr	r2, [pc, #492]	; (8003f6c <HAL_RCC_OscConfig+0x4e8>)
 8003d7e:	4b7b      	ldr	r3, [pc, #492]	; (8003f6c <HAL_RCC_OscConfig+0x4e8>)
 8003d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d82:	f043 0304 	orr.w	r3, r3, #4
 8003d86:	6713      	str	r3, [r2, #112]	; 0x70
 8003d88:	4a78      	ldr	r2, [pc, #480]	; (8003f6c <HAL_RCC_OscConfig+0x4e8>)
 8003d8a:	4b78      	ldr	r3, [pc, #480]	; (8003f6c <HAL_RCC_OscConfig+0x4e8>)
 8003d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8e:	f043 0301 	orr.w	r3, r3, #1
 8003d92:	6713      	str	r3, [r2, #112]	; 0x70
 8003d94:	e00b      	b.n	8003dae <HAL_RCC_OscConfig+0x32a>
 8003d96:	4a75      	ldr	r2, [pc, #468]	; (8003f6c <HAL_RCC_OscConfig+0x4e8>)
 8003d98:	4b74      	ldr	r3, [pc, #464]	; (8003f6c <HAL_RCC_OscConfig+0x4e8>)
 8003d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9c:	f023 0301 	bic.w	r3, r3, #1
 8003da0:	6713      	str	r3, [r2, #112]	; 0x70
 8003da2:	4a72      	ldr	r2, [pc, #456]	; (8003f6c <HAL_RCC_OscConfig+0x4e8>)
 8003da4:	4b71      	ldr	r3, [pc, #452]	; (8003f6c <HAL_RCC_OscConfig+0x4e8>)
 8003da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da8:	f023 0304 	bic.w	r3, r3, #4
 8003dac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d015      	beq.n	8003de2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db6:	f7fd f807 	bl	8000dc8 <HAL_GetTick>
 8003dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dbc:	e00a      	b.n	8003dd4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dbe:	f7fd f803 	bl	8000dc8 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d901      	bls.n	8003dd4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e0c5      	b.n	8003f60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dd4:	4b65      	ldr	r3, [pc, #404]	; (8003f6c <HAL_RCC_OscConfig+0x4e8>)
 8003dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d0ee      	beq.n	8003dbe <HAL_RCC_OscConfig+0x33a>
 8003de0:	e014      	b.n	8003e0c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003de2:	f7fc fff1 	bl	8000dc8 <HAL_GetTick>
 8003de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003de8:	e00a      	b.n	8003e00 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dea:	f7fc ffed 	bl	8000dc8 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d901      	bls.n	8003e00 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e0af      	b.n	8003f60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e00:	4b5a      	ldr	r3, [pc, #360]	; (8003f6c <HAL_RCC_OscConfig+0x4e8>)
 8003e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1ee      	bne.n	8003dea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e0c:	7dfb      	ldrb	r3, [r7, #23]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d105      	bne.n	8003e1e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e12:	4a56      	ldr	r2, [pc, #344]	; (8003f6c <HAL_RCC_OscConfig+0x4e8>)
 8003e14:	4b55      	ldr	r3, [pc, #340]	; (8003f6c <HAL_RCC_OscConfig+0x4e8>)
 8003e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e1c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f000 809b 	beq.w	8003f5e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e28:	4b50      	ldr	r3, [pc, #320]	; (8003f6c <HAL_RCC_OscConfig+0x4e8>)
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f003 030c 	and.w	r3, r3, #12
 8003e30:	2b08      	cmp	r3, #8
 8003e32:	d05c      	beq.n	8003eee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d141      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e3c:	4b4c      	ldr	r3, [pc, #304]	; (8003f70 <HAL_RCC_OscConfig+0x4ec>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e42:	f7fc ffc1 	bl	8000dc8 <HAL_GetTick>
 8003e46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e48:	e008      	b.n	8003e5c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e4a:	f7fc ffbd 	bl	8000dc8 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d901      	bls.n	8003e5c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e081      	b.n	8003f60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e5c:	4b43      	ldr	r3, [pc, #268]	; (8003f6c <HAL_RCC_OscConfig+0x4e8>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1f0      	bne.n	8003e4a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e68:	4940      	ldr	r1, [pc, #256]	; (8003f6c <HAL_RCC_OscConfig+0x4e8>)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	69da      	ldr	r2, [r3, #28]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	431a      	orrs	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e78:	019b      	lsls	r3, r3, #6
 8003e7a:	431a      	orrs	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e80:	085b      	lsrs	r3, r3, #1
 8003e82:	3b01      	subs	r3, #1
 8003e84:	041b      	lsls	r3, r3, #16
 8003e86:	431a      	orrs	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8c:	061b      	lsls	r3, r3, #24
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e92:	4b37      	ldr	r3, [pc, #220]	; (8003f70 <HAL_RCC_OscConfig+0x4ec>)
 8003e94:	2201      	movs	r2, #1
 8003e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e98:	f7fc ff96 	bl	8000dc8 <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ea0:	f7fc ff92 	bl	8000dc8 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e056      	b.n	8003f60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eb2:	4b2e      	ldr	r3, [pc, #184]	; (8003f6c <HAL_RCC_OscConfig+0x4e8>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d0f0      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x41c>
 8003ebe:	e04e      	b.n	8003f5e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ec0:	4b2b      	ldr	r3, [pc, #172]	; (8003f70 <HAL_RCC_OscConfig+0x4ec>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec6:	f7fc ff7f 	bl	8000dc8 <HAL_GetTick>
 8003eca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ecc:	e008      	b.n	8003ee0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ece:	f7fc ff7b 	bl	8000dc8 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d901      	bls.n	8003ee0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e03f      	b.n	8003f60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ee0:	4b22      	ldr	r3, [pc, #136]	; (8003f6c <HAL_RCC_OscConfig+0x4e8>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d1f0      	bne.n	8003ece <HAL_RCC_OscConfig+0x44a>
 8003eec:	e037      	b.n	8003f5e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d101      	bne.n	8003efa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e032      	b.n	8003f60 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003efa:	4b1c      	ldr	r3, [pc, #112]	; (8003f6c <HAL_RCC_OscConfig+0x4e8>)
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d028      	beq.n	8003f5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d121      	bne.n	8003f5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d11a      	bne.n	8003f5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f30:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d111      	bne.n	8003f5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f40:	085b      	lsrs	r3, r3, #1
 8003f42:	3b01      	subs	r3, #1
 8003f44:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d107      	bne.n	8003f5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f54:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d001      	beq.n	8003f5e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e000      	b.n	8003f60 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3718      	adds	r7, #24
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	40007000 	.word	0x40007000
 8003f6c:	40023800 	.word	0x40023800
 8003f70:	42470060 	.word	0x42470060

08003f74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d101      	bne.n	8003f88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e0cc      	b.n	8004122 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f88:	4b68      	ldr	r3, [pc, #416]	; (800412c <HAL_RCC_ClockConfig+0x1b8>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0207 	and.w	r2, r3, #7
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d20c      	bcs.n	8003fb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f96:	4b65      	ldr	r3, [pc, #404]	; (800412c <HAL_RCC_ClockConfig+0x1b8>)
 8003f98:	683a      	ldr	r2, [r7, #0]
 8003f9a:	b2d2      	uxtb	r2, r2
 8003f9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f9e:	4b63      	ldr	r3, [pc, #396]	; (800412c <HAL_RCC_ClockConfig+0x1b8>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0207 	and.w	r2, r3, #7
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d001      	beq.n	8003fb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e0b8      	b.n	8004122 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d020      	beq.n	8003ffe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0304 	and.w	r3, r3, #4
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d005      	beq.n	8003fd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fc8:	4a59      	ldr	r2, [pc, #356]	; (8004130 <HAL_RCC_ClockConfig+0x1bc>)
 8003fca:	4b59      	ldr	r3, [pc, #356]	; (8004130 <HAL_RCC_ClockConfig+0x1bc>)
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fd2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0308 	and.w	r3, r3, #8
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d005      	beq.n	8003fec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fe0:	4a53      	ldr	r2, [pc, #332]	; (8004130 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe2:	4b53      	ldr	r3, [pc, #332]	; (8004130 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fec:	4950      	ldr	r1, [pc, #320]	; (8004130 <HAL_RCC_ClockConfig+0x1bc>)
 8003fee:	4b50      	ldr	r3, [pc, #320]	; (8004130 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b00      	cmp	r3, #0
 8004008:	d044      	beq.n	8004094 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d107      	bne.n	8004022 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004012:	4b47      	ldr	r3, [pc, #284]	; (8004130 <HAL_RCC_ClockConfig+0x1bc>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d119      	bne.n	8004052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e07f      	b.n	8004122 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	2b02      	cmp	r3, #2
 8004028:	d003      	beq.n	8004032 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800402e:	2b03      	cmp	r3, #3
 8004030:	d107      	bne.n	8004042 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004032:	4b3f      	ldr	r3, [pc, #252]	; (8004130 <HAL_RCC_ClockConfig+0x1bc>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d109      	bne.n	8004052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e06f      	b.n	8004122 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004042:	4b3b      	ldr	r3, [pc, #236]	; (8004130 <HAL_RCC_ClockConfig+0x1bc>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e067      	b.n	8004122 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004052:	4937      	ldr	r1, [pc, #220]	; (8004130 <HAL_RCC_ClockConfig+0x1bc>)
 8004054:	4b36      	ldr	r3, [pc, #216]	; (8004130 <HAL_RCC_ClockConfig+0x1bc>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f023 0203 	bic.w	r2, r3, #3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	4313      	orrs	r3, r2
 8004062:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004064:	f7fc feb0 	bl	8000dc8 <HAL_GetTick>
 8004068:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800406a:	e00a      	b.n	8004082 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800406c:	f7fc feac 	bl	8000dc8 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	f241 3288 	movw	r2, #5000	; 0x1388
 800407a:	4293      	cmp	r3, r2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e04f      	b.n	8004122 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004082:	4b2b      	ldr	r3, [pc, #172]	; (8004130 <HAL_RCC_ClockConfig+0x1bc>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f003 020c 	and.w	r2, r3, #12
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	429a      	cmp	r2, r3
 8004092:	d1eb      	bne.n	800406c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004094:	4b25      	ldr	r3, [pc, #148]	; (800412c <HAL_RCC_ClockConfig+0x1b8>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0207 	and.w	r2, r3, #7
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d90c      	bls.n	80040bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a2:	4b22      	ldr	r3, [pc, #136]	; (800412c <HAL_RCC_ClockConfig+0x1b8>)
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	b2d2      	uxtb	r2, r2
 80040a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040aa:	4b20      	ldr	r3, [pc, #128]	; (800412c <HAL_RCC_ClockConfig+0x1b8>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0207 	and.w	r2, r3, #7
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d001      	beq.n	80040bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e032      	b.n	8004122 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0304 	and.w	r3, r3, #4
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d008      	beq.n	80040da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040c8:	4919      	ldr	r1, [pc, #100]	; (8004130 <HAL_RCC_ClockConfig+0x1bc>)
 80040ca:	4b19      	ldr	r3, [pc, #100]	; (8004130 <HAL_RCC_ClockConfig+0x1bc>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0308 	and.w	r3, r3, #8
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d009      	beq.n	80040fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040e6:	4912      	ldr	r1, [pc, #72]	; (8004130 <HAL_RCC_ClockConfig+0x1bc>)
 80040e8:	4b11      	ldr	r3, [pc, #68]	; (8004130 <HAL_RCC_ClockConfig+0x1bc>)
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	00db      	lsls	r3, r3, #3
 80040f6:	4313      	orrs	r3, r2
 80040f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040fa:	f000 f821 	bl	8004140 <HAL_RCC_GetSysClockFreq>
 80040fe:	4601      	mov	r1, r0
 8004100:	4b0b      	ldr	r3, [pc, #44]	; (8004130 <HAL_RCC_ClockConfig+0x1bc>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	091b      	lsrs	r3, r3, #4
 8004106:	f003 030f 	and.w	r3, r3, #15
 800410a:	4a0a      	ldr	r2, [pc, #40]	; (8004134 <HAL_RCC_ClockConfig+0x1c0>)
 800410c:	5cd3      	ldrb	r3, [r2, r3]
 800410e:	fa21 f303 	lsr.w	r3, r1, r3
 8004112:	4a09      	ldr	r2, [pc, #36]	; (8004138 <HAL_RCC_ClockConfig+0x1c4>)
 8004114:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004116:	4b09      	ldr	r3, [pc, #36]	; (800413c <HAL_RCC_ClockConfig+0x1c8>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4618      	mov	r0, r3
 800411c:	f7fc fe10 	bl	8000d40 <HAL_InitTick>

  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	40023c00 	.word	0x40023c00
 8004130:	40023800 	.word	0x40023800
 8004134:	08007c44 	.word	0x08007c44
 8004138:	20000000 	.word	0x20000000
 800413c:	20000004 	.word	0x20000004

08004140 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004144:	b08f      	sub	sp, #60	; 0x3c
 8004146:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004148:	2300      	movs	r3, #0
 800414a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800414c:	2300      	movs	r3, #0
 800414e:	637b      	str	r3, [r7, #52]	; 0x34
 8004150:	2300      	movs	r3, #0
 8004152:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8004154:	2300      	movs	r3, #0
 8004156:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004158:	4b62      	ldr	r3, [pc, #392]	; (80042e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f003 030c 	and.w	r3, r3, #12
 8004160:	2b04      	cmp	r3, #4
 8004162:	d007      	beq.n	8004174 <HAL_RCC_GetSysClockFreq+0x34>
 8004164:	2b08      	cmp	r3, #8
 8004166:	d008      	beq.n	800417a <HAL_RCC_GetSysClockFreq+0x3a>
 8004168:	2b00      	cmp	r3, #0
 800416a:	f040 80b2 	bne.w	80042d2 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800416e:	4b5e      	ldr	r3, [pc, #376]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004170:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 8004172:	e0b1      	b.n	80042d8 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004174:	4b5d      	ldr	r3, [pc, #372]	; (80042ec <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004176:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004178:	e0ae      	b.n	80042d8 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800417a:	4b5a      	ldr	r3, [pc, #360]	; (80042e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004182:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004184:	4b57      	ldr	r3, [pc, #348]	; (80042e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d04e      	beq.n	800422e <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004190:	4b54      	ldr	r3, [pc, #336]	; (80042e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	099b      	lsrs	r3, r3, #6
 8004196:	f04f 0400 	mov.w	r4, #0
 800419a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800419e:	f04f 0200 	mov.w	r2, #0
 80041a2:	ea01 0103 	and.w	r1, r1, r3
 80041a6:	ea02 0204 	and.w	r2, r2, r4
 80041aa:	460b      	mov	r3, r1
 80041ac:	4614      	mov	r4, r2
 80041ae:	0160      	lsls	r0, r4, #5
 80041b0:	6278      	str	r0, [r7, #36]	; 0x24
 80041b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041b4:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80041b8:	6278      	str	r0, [r7, #36]	; 0x24
 80041ba:	015b      	lsls	r3, r3, #5
 80041bc:	623b      	str	r3, [r7, #32]
 80041be:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80041c2:	1a5b      	subs	r3, r3, r1
 80041c4:	eb64 0402 	sbc.w	r4, r4, r2
 80041c8:	ea4f 1984 	mov.w	r9, r4, lsl #6
 80041cc:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 80041d0:	ea4f 1883 	mov.w	r8, r3, lsl #6
 80041d4:	ebb8 0803 	subs.w	r8, r8, r3
 80041d8:	eb69 0904 	sbc.w	r9, r9, r4
 80041dc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041e0:	61fb      	str	r3, [r7, #28]
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041e8:	61fb      	str	r3, [r7, #28]
 80041ea:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80041ee:	61bb      	str	r3, [r7, #24]
 80041f0:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80041f4:	eb18 0801 	adds.w	r8, r8, r1
 80041f8:	eb49 0902 	adc.w	r9, r9, r2
 80041fc:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8004200:	617b      	str	r3, [r7, #20]
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8004208:	617b      	str	r3, [r7, #20]
 800420a:	ea4f 2348 	mov.w	r3, r8, lsl #9
 800420e:	613b      	str	r3, [r7, #16]
 8004210:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8004214:	4640      	mov	r0, r8
 8004216:	4649      	mov	r1, r9
 8004218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800421a:	f04f 0400 	mov.w	r4, #0
 800421e:	461a      	mov	r2, r3
 8004220:	4623      	mov	r3, r4
 8004222:	f7fb ffd1 	bl	80001c8 <__aeabi_uldivmod>
 8004226:	4603      	mov	r3, r0
 8004228:	460c      	mov	r4, r1
 800422a:	637b      	str	r3, [r7, #52]	; 0x34
 800422c:	e043      	b.n	80042b6 <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800422e:	4b2d      	ldr	r3, [pc, #180]	; (80042e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	099b      	lsrs	r3, r3, #6
 8004234:	f04f 0400 	mov.w	r4, #0
 8004238:	f240 11ff 	movw	r1, #511	; 0x1ff
 800423c:	f04f 0200 	mov.w	r2, #0
 8004240:	ea01 0103 	and.w	r1, r1, r3
 8004244:	ea02 0204 	and.w	r2, r2, r4
 8004248:	460b      	mov	r3, r1
 800424a:	4614      	mov	r4, r2
 800424c:	0160      	lsls	r0, r4, #5
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	015b      	lsls	r3, r3, #5
 800425a:	60bb      	str	r3, [r7, #8]
 800425c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004260:	1a5b      	subs	r3, r3, r1
 8004262:	eb64 0402 	sbc.w	r4, r4, r2
 8004266:	01a6      	lsls	r6, r4, #6
 8004268:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 800426c:	019d      	lsls	r5, r3, #6
 800426e:	1aed      	subs	r5, r5, r3
 8004270:	eb66 0604 	sbc.w	r6, r6, r4
 8004274:	00f3      	lsls	r3, r6, #3
 8004276:	607b      	str	r3, [r7, #4]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800427e:	607b      	str	r3, [r7, #4]
 8004280:	00eb      	lsls	r3, r5, #3
 8004282:	603b      	str	r3, [r7, #0]
 8004284:	e897 0060 	ldmia.w	r7, {r5, r6}
 8004288:	186d      	adds	r5, r5, r1
 800428a:	eb46 0602 	adc.w	r6, r6, r2
 800428e:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8004292:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 8004296:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 800429a:	4655      	mov	r5, sl
 800429c:	465e      	mov	r6, fp
 800429e:	4628      	mov	r0, r5
 80042a0:	4631      	mov	r1, r6
 80042a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a4:	f04f 0400 	mov.w	r4, #0
 80042a8:	461a      	mov	r2, r3
 80042aa:	4623      	mov	r3, r4
 80042ac:	f7fb ff8c 	bl	80001c8 <__aeabi_uldivmod>
 80042b0:	4603      	mov	r3, r0
 80042b2:	460c      	mov	r4, r1
 80042b4:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042b6:	4b0b      	ldr	r3, [pc, #44]	; (80042e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	0c1b      	lsrs	r3, r3, #16
 80042bc:	f003 0303 	and.w	r3, r3, #3
 80042c0:	3301      	adds	r3, #1
 80042c2:	005b      	lsls	r3, r3, #1
 80042c4:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 80042c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ce:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80042d0:	e002      	b.n	80042d8 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042d2:	4b05      	ldr	r3, [pc, #20]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80042d4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80042d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80042da:	4618      	mov	r0, r3
 80042dc:	373c      	adds	r7, #60	; 0x3c
 80042de:	46bd      	mov	sp, r7
 80042e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042e4:	40023800 	.word	0x40023800
 80042e8:	00f42400 	.word	0x00f42400
 80042ec:	007a1200 	.word	0x007a1200

080042f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042f0:	b480      	push	{r7}
 80042f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042f4:	4b03      	ldr	r3, [pc, #12]	; (8004304 <HAL_RCC_GetHCLKFreq+0x14>)
 80042f6:	681b      	ldr	r3, [r3, #0]
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	20000000 	.word	0x20000000

08004308 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800430c:	f7ff fff0 	bl	80042f0 <HAL_RCC_GetHCLKFreq>
 8004310:	4601      	mov	r1, r0
 8004312:	4b05      	ldr	r3, [pc, #20]	; (8004328 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	0a9b      	lsrs	r3, r3, #10
 8004318:	f003 0307 	and.w	r3, r3, #7
 800431c:	4a03      	ldr	r2, [pc, #12]	; (800432c <HAL_RCC_GetPCLK1Freq+0x24>)
 800431e:	5cd3      	ldrb	r3, [r2, r3]
 8004320:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004324:	4618      	mov	r0, r3
 8004326:	bd80      	pop	{r7, pc}
 8004328:	40023800 	.word	0x40023800
 800432c:	08007c54 	.word	0x08007c54

08004330 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004338:	2300      	movs	r3, #0
 800433a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800433c:	2300      	movs	r3, #0
 800433e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	2b00      	cmp	r3, #0
 800434a:	d105      	bne.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004354:	2b00      	cmp	r3, #0
 8004356:	d035      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004358:	4b62      	ldr	r3, [pc, #392]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800435a:	2200      	movs	r2, #0
 800435c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800435e:	f7fc fd33 	bl	8000dc8 <HAL_GetTick>
 8004362:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004364:	e008      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004366:	f7fc fd2f 	bl	8000dc8 <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	2b02      	cmp	r3, #2
 8004372:	d901      	bls.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e0b0      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004378:	4b5b      	ldr	r3, [pc, #364]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1f0      	bne.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004384:	4958      	ldr	r1, [pc, #352]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	019a      	lsls	r2, r3, #6
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	071b      	lsls	r3, r3, #28
 8004392:	4313      	orrs	r3, r2
 8004394:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004398:	4b52      	ldr	r3, [pc, #328]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800439a:	2201      	movs	r2, #1
 800439c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800439e:	f7fc fd13 	bl	8000dc8 <HAL_GetTick>
 80043a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043a4:	e008      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80043a6:	f7fc fd0f 	bl	8000dc8 <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d901      	bls.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e090      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043b8:	4b4b      	ldr	r3, [pc, #300]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d0f0      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0302 	and.w	r3, r3, #2
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 8083 	beq.w	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80043d2:	2300      	movs	r3, #0
 80043d4:	60fb      	str	r3, [r7, #12]
 80043d6:	4a44      	ldr	r2, [pc, #272]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043d8:	4b43      	ldr	r3, [pc, #268]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043e0:	6413      	str	r3, [r2, #64]	; 0x40
 80043e2:	4b41      	ldr	r3, [pc, #260]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ea:	60fb      	str	r3, [r7, #12]
 80043ec:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80043ee:	4a3f      	ldr	r2, [pc, #252]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043f0:	4b3e      	ldr	r3, [pc, #248]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043f8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80043fa:	f7fc fce5 	bl	8000dc8 <HAL_GetTick>
 80043fe:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004400:	e008      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004402:	f7fc fce1 	bl	8000dc8 <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	2b02      	cmp	r3, #2
 800440e:	d901      	bls.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e062      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004414:	4b35      	ldr	r3, [pc, #212]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800441c:	2b00      	cmp	r3, #0
 800441e:	d0f0      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004420:	4b31      	ldr	r3, [pc, #196]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004424:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004428:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d02f      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	429a      	cmp	r2, r3
 800443c:	d028      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800443e:	4b2a      	ldr	r3, [pc, #168]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004442:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004446:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004448:	4b29      	ldr	r3, [pc, #164]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800444a:	2201      	movs	r2, #1
 800444c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800444e:	4b28      	ldr	r3, [pc, #160]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004450:	2200      	movs	r2, #0
 8004452:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004454:	4a24      	ldr	r2, [pc, #144]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800445a:	4b23      	ldr	r3, [pc, #140]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800445c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	2b01      	cmp	r3, #1
 8004464:	d114      	bne.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004466:	f7fc fcaf 	bl	8000dc8 <HAL_GetTick>
 800446a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800446c:	e00a      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800446e:	f7fc fcab 	bl	8000dc8 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	f241 3288 	movw	r2, #5000	; 0x1388
 800447c:	4293      	cmp	r3, r2
 800447e:	d901      	bls.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e02a      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004484:	4b18      	ldr	r3, [pc, #96]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b00      	cmp	r3, #0
 800448e:	d0ee      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004498:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800449c:	d10d      	bne.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800449e:	4912      	ldr	r1, [pc, #72]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044a0:	4b11      	ldr	r3, [pc, #68]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80044b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044b4:	4313      	orrs	r3, r2
 80044b6:	608b      	str	r3, [r1, #8]
 80044b8:	e005      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80044ba:	4a0b      	ldr	r2, [pc, #44]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044bc:	4b0a      	ldr	r3, [pc, #40]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80044c4:	6093      	str	r3, [r2, #8]
 80044c6:	4908      	ldr	r1, [pc, #32]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044c8:	4b07      	ldr	r3, [pc, #28]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044d4:	4313      	orrs	r3, r2
 80044d6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3718      	adds	r7, #24
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	42470068 	.word	0x42470068
 80044e8:	40023800 	.word	0x40023800
 80044ec:	40007000 	.word	0x40007000
 80044f0:	42470e40 	.word	0x42470e40

080044f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b087      	sub	sp, #28
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80044fc:	2300      	movs	r3, #0
 80044fe:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004500:	2300      	movs	r3, #0
 8004502:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004504:	2300      	movs	r3, #0
 8004506:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004508:	2300      	movs	r3, #0
 800450a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d13d      	bne.n	800458e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004512:	4b22      	ldr	r3, [pc, #136]	; (800459c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800451a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d004      	beq.n	800452c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004522:	2b01      	cmp	r3, #1
 8004524:	d12f      	bne.n	8004586 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004526:	4b1e      	ldr	r3, [pc, #120]	; (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004528:	617b      	str	r3, [r7, #20]
          break;
 800452a:	e02f      	b.n	800458c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800452c:	4b1b      	ldr	r3, [pc, #108]	; (800459c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004534:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004538:	d108      	bne.n	800454c <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800453a:	4b18      	ldr	r3, [pc, #96]	; (800459c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004542:	4a18      	ldr	r2, [pc, #96]	; (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004544:	fbb2 f3f3 	udiv	r3, r2, r3
 8004548:	613b      	str	r3, [r7, #16]
 800454a:	e007      	b.n	800455c <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800454c:	4b13      	ldr	r3, [pc, #76]	; (800459c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004554:	4a14      	ldr	r2, [pc, #80]	; (80045a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004556:	fbb2 f3f3 	udiv	r3, r2, r3
 800455a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800455c:	4b0f      	ldr	r3, [pc, #60]	; (800459c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800455e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004562:	099b      	lsrs	r3, r3, #6
 8004564:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	fb02 f303 	mul.w	r3, r2, r3
 800456e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004570:	4b0a      	ldr	r3, [pc, #40]	; (800459c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004572:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004576:	0f1b      	lsrs	r3, r3, #28
 8004578:	f003 0307 	and.w	r3, r3, #7
 800457c:	68ba      	ldr	r2, [r7, #8]
 800457e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004582:	617b      	str	r3, [r7, #20]
          break;
 8004584:	e002      	b.n	800458c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004586:	2300      	movs	r3, #0
 8004588:	617b      	str	r3, [r7, #20]
          break;
 800458a:	bf00      	nop
        }
      }
      break;
 800458c:	bf00      	nop
    }
  }
  return frequency;
 800458e:	697b      	ldr	r3, [r7, #20]
}
 8004590:	4618      	mov	r0, r3
 8004592:	371c      	adds	r7, #28
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr
 800459c:	40023800 	.word	0x40023800
 80045a0:	00bb8000 	.word	0x00bb8000
 80045a4:	007a1200 	.word	0x007a1200
 80045a8:	00f42400 	.word	0x00f42400

080045ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e07a      	b.n	80046b4 <HAL_SPI_Init+0x108>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d108      	bne.n	80045d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045ce:	d009      	beq.n	80045e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	61da      	str	r2, [r3, #28]
 80045d6:	e005      	b.n	80045e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d106      	bne.n	8004604 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f7fc fa9a 	bl	8000b38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2202      	movs	r2, #2
 8004608:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	6812      	ldr	r2, [r2, #0]
 8004614:	6812      	ldr	r2, [r2, #0]
 8004616:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800461a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	6852      	ldr	r2, [r2, #4]
 8004624:	f402 7182 	and.w	r1, r2, #260	; 0x104
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	6892      	ldr	r2, [r2, #8]
 800462c:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 8004630:	4311      	orrs	r1, r2
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	68d2      	ldr	r2, [r2, #12]
 8004636:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800463a:	4311      	orrs	r1, r2
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	6912      	ldr	r2, [r2, #16]
 8004640:	f002 0202 	and.w	r2, r2, #2
 8004644:	4311      	orrs	r1, r2
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	6952      	ldr	r2, [r2, #20]
 800464a:	f002 0201 	and.w	r2, r2, #1
 800464e:	4311      	orrs	r1, r2
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	6992      	ldr	r2, [r2, #24]
 8004654:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8004658:	4311      	orrs	r1, r2
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	69d2      	ldr	r2, [r2, #28]
 800465e:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8004662:	4311      	orrs	r1, r2
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	6a12      	ldr	r2, [r2, #32]
 8004668:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800466c:	4311      	orrs	r1, r2
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004672:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004676:	430a      	orrs	r2, r1
 8004678:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	6992      	ldr	r2, [r2, #24]
 8004682:	0c12      	lsrs	r2, r2, #16
 8004684:	f002 0104 	and.w	r1, r2, #4
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800468c:	f002 0210 	and.w	r2, r2, #16
 8004690:	430a      	orrs	r2, r1
 8004692:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	6812      	ldr	r2, [r2, #0]
 800469c:	69d2      	ldr	r2, [r2, #28]
 800469e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046a2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3708      	adds	r7, #8
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046bc:	b084      	sub	sp, #16
 80046be:	b580      	push	{r7, lr}
 80046c0:	b084      	sub	sp, #16
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
 80046c6:	f107 001c 	add.w	r0, r7, #28
 80046ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d122      	bne.n	800471a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80046e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80046fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d105      	bne.n	800470e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 f94a 	bl	80049a8 <USB_CoreReset>
 8004714:	4603      	mov	r3, r0
 8004716:	73fb      	strb	r3, [r7, #15]
 8004718:	e01a      	b.n	8004750 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f93e 	bl	80049a8 <USB_CoreReset>
 800472c:	4603      	mov	r3, r0
 800472e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004730:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004732:	2b00      	cmp	r3, #0
 8004734:	d106      	bne.n	8004744 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	639a      	str	r2, [r3, #56]	; 0x38
 8004742:	e005      	b.n	8004750 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004748:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004752:	2b01      	cmp	r3, #1
 8004754:	d10b      	bne.n	800476e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f043 0206 	orr.w	r2, r3, #6
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f043 0220 	orr.w	r2, r3, #32
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800476e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004770:	4618      	mov	r0, r3
 8004772:	3710      	adds	r7, #16
 8004774:	46bd      	mov	sp, r7
 8004776:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800477a:	b004      	add	sp, #16
 800477c:	4770      	bx	lr

0800477e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800477e:	b480      	push	{r7}
 8004780:	b083      	sub	sp, #12
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f043 0201 	orr.w	r2, r3, #1
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f023 0201 	bic.w	r2, r3, #1
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	370c      	adds	r7, #12
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr

080047c2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b082      	sub	sp, #8
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
 80047ca:	460b      	mov	r3, r1
 80047cc:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80047da:	78fb      	ldrb	r3, [r7, #3]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d106      	bne.n	80047ee <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	60da      	str	r2, [r3, #12]
 80047ec:	e00b      	b.n	8004806 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80047ee:	78fb      	ldrb	r3, [r7, #3]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d106      	bne.n	8004802 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	60da      	str	r2, [r3, #12]
 8004800:	e001      	b.n	8004806 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e003      	b.n	800480e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004806:	2032      	movs	r0, #50	; 0x32
 8004808:	f7fc faea 	bl	8000de0 <HAL_Delay>

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3708      	adds	r7, #8
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
	...

08004818 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004822:	2300      	movs	r3, #0
 8004824:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	019b      	lsls	r3, r3, #6
 800482a:	f043 0220 	orr.w	r2, r3, #32
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	3301      	adds	r3, #1
 8004836:	60fb      	str	r3, [r7, #12]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	4a09      	ldr	r2, [pc, #36]	; (8004860 <USB_FlushTxFifo+0x48>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d901      	bls.n	8004844 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e006      	b.n	8004852 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	f003 0320 	and.w	r3, r3, #32
 800484c:	2b20      	cmp	r3, #32
 800484e:	d0f0      	beq.n	8004832 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3714      	adds	r7, #20
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	00030d40 	.word	0x00030d40

08004864 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800486c:	2300      	movs	r3, #0
 800486e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2210      	movs	r2, #16
 8004874:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	3301      	adds	r3, #1
 800487a:	60fb      	str	r3, [r7, #12]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	4a09      	ldr	r2, [pc, #36]	; (80048a4 <USB_FlushRxFifo+0x40>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d901      	bls.n	8004888 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e006      	b.n	8004896 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	f003 0310 	and.w	r3, r3, #16
 8004890:	2b10      	cmp	r3, #16
 8004892:	d0f0      	beq.n	8004876 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3714      	adds	r7, #20
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	00030d40 	.word	0x00030d40

080048a8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b089      	sub	sp, #36	; 0x24
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	4611      	mov	r1, r2
 80048b4:	461a      	mov	r2, r3
 80048b6:	460b      	mov	r3, r1
 80048b8:	71fb      	strb	r3, [r7, #7]
 80048ba:	4613      	mov	r3, r2
 80048bc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80048c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d11a      	bne.n	8004904 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80048ce:	88bb      	ldrh	r3, [r7, #4]
 80048d0:	3303      	adds	r3, #3
 80048d2:	089b      	lsrs	r3, r3, #2
 80048d4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80048d6:	2300      	movs	r3, #0
 80048d8:	61bb      	str	r3, [r7, #24]
 80048da:	e00f      	b.n	80048fc <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80048dc:	79fb      	ldrb	r3, [r7, #7]
 80048de:	031a      	lsls	r2, r3, #12
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	4413      	add	r3, r2
 80048e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048e8:	461a      	mov	r2, r3
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	6013      	str	r3, [r2, #0]
      pSrc++;
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	3304      	adds	r3, #4
 80048f4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	3301      	adds	r3, #1
 80048fa:	61bb      	str	r3, [r7, #24]
 80048fc:	69ba      	ldr	r2, [r7, #24]
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	429a      	cmp	r2, r3
 8004902:	d3eb      	bcc.n	80048dc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3724      	adds	r7, #36	; 0x24
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr

08004912 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004912:	b480      	push	{r7}
 8004914:	b089      	sub	sp, #36	; 0x24
 8004916:	af00      	add	r7, sp, #0
 8004918:	60f8      	str	r0, [r7, #12]
 800491a:	60b9      	str	r1, [r7, #8]
 800491c:	4613      	mov	r3, r2
 800491e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004928:	88fb      	ldrh	r3, [r7, #6]
 800492a:	3303      	adds	r3, #3
 800492c:	089b      	lsrs	r3, r3, #2
 800492e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004930:	2300      	movs	r3, #0
 8004932:	61bb      	str	r3, [r7, #24]
 8004934:	e00b      	b.n	800494e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	601a      	str	r2, [r3, #0]
    pDest++;
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	3304      	adds	r3, #4
 8004946:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	3301      	adds	r3, #1
 800494c:	61bb      	str	r3, [r7, #24]
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	429a      	cmp	r2, r3
 8004954:	d3ef      	bcc.n	8004936 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004956:	69fb      	ldr	r3, [r7, #28]
}
 8004958:	4618      	mov	r0, r3
 800495a:	3724      	adds	r7, #36	; 0x24
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	4013      	ands	r3, r2
 800497a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800497c:	68fb      	ldr	r3, [r7, #12]
}
 800497e:	4618      	mov	r0, r3
 8004980:	3714      	adds	r7, #20
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800498a:	b480      	push	{r7}
 800498c:	b083      	sub	sp, #12
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	f003 0301 	and.w	r3, r3, #1
}
 800499a:	4618      	mov	r0, r3
 800499c:	370c      	adds	r7, #12
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
	...

080049a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80049b0:	2300      	movs	r3, #0
 80049b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	3301      	adds	r3, #1
 80049b8:	60fb      	str	r3, [r7, #12]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	4a13      	ldr	r2, [pc, #76]	; (8004a0c <USB_CoreReset+0x64>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d901      	bls.n	80049c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e01b      	b.n	80049fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	daf2      	bge.n	80049b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80049ce:	2300      	movs	r3, #0
 80049d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	f043 0201 	orr.w	r2, r3, #1
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	3301      	adds	r3, #1
 80049e2:	60fb      	str	r3, [r7, #12]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	4a09      	ldr	r2, [pc, #36]	; (8004a0c <USB_CoreReset+0x64>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d901      	bls.n	80049f0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e006      	b.n	80049fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d0f0      	beq.n	80049de <USB_CoreReset+0x36>

  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3714      	adds	r7, #20
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	00030d40 	.word	0x00030d40

08004a10 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a10:	b084      	sub	sp, #16
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b084      	sub	sp, #16
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
 8004a1a:	f107 001c 	add.w	r0, r7, #28
 8004a1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	2300      	movs	r3, #0
 8004a30:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a36:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a42:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d01a      	beq.n	8004a98 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d10b      	bne.n	8004a80 <USB_HostInit+0x70>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a6e:	461a      	mov	r2, r3
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f043 0304 	orr.w	r3, r3, #4
 8004a7c:	6013      	str	r3, [r2, #0]
 8004a7e:	e016      	b.n	8004aae <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a86:	461a      	mov	r2, r3
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f023 0304 	bic.w	r3, r3, #4
 8004a94:	6013      	str	r3, [r2, #0]
 8004a96:	e00a      	b.n	8004aae <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f023 0304 	bic.w	r3, r3, #4
 8004aac:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004aae:	2110      	movs	r1, #16
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f7ff feb1 	bl	8004818 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f7ff fed4 	bl	8004864 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004abc:	2300      	movs	r3, #0
 8004abe:	60fb      	str	r3, [r7, #12]
 8004ac0:	e015      	b.n	8004aee <USB_HostInit+0xde>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	015a      	lsls	r2, r3, #5
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	4413      	add	r3, r2
 8004aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ace:	461a      	mov	r2, r3
 8004ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ad4:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	015a      	lsls	r2, r3, #5
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	4413      	add	r3, r2
 8004ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	3301      	adds	r3, #1
 8004aec:	60fb      	str	r3, [r7, #12]
 8004aee:	6a3a      	ldr	r2, [r7, #32]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d8e5      	bhi.n	8004ac2 <USB_HostInit+0xb2>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8004af6:	2101      	movs	r1, #1
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 f8af 	bl	8004c5c <USB_DriveVbus>

  HAL_Delay(200U);
 8004afe:	20c8      	movs	r0, #200	; 0xc8
 8004b00:	f7fc f96e 	bl	8000de0 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b10:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00b      	beq.n	8004b36 <USB_HostInit+0x126>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b24:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a13      	ldr	r2, [pc, #76]	; (8004b78 <USB_HostInit+0x168>)
 8004b2a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a13      	ldr	r2, [pc, #76]	; (8004b7c <USB_HostInit+0x16c>)
 8004b30:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004b34:	e009      	b.n	8004b4a <USB_HostInit+0x13a>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2280      	movs	r2, #128	; 0x80
 8004b3a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4a10      	ldr	r2, [pc, #64]	; (8004b80 <USB_HostInit+0x170>)
 8004b40:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a0f      	ldr	r2, [pc, #60]	; (8004b84 <USB_HostInit+0x174>)
 8004b46:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d105      	bne.n	8004b5c <USB_HostInit+0x14c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	f043 0210 	orr.w	r2, r3, #16
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	699a      	ldr	r2, [r3, #24]
 8004b60:	4b09      	ldr	r3, [pc, #36]	; (8004b88 <USB_HostInit+0x178>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3710      	adds	r7, #16
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b74:	b004      	add	sp, #16
 8004b76:	4770      	bx	lr
 8004b78:	01000200 	.word	0x01000200
 8004b7c:	00e00300 	.word	0x00e00300
 8004b80:	00600080 	.word	0x00600080
 8004b84:	004000e0 	.word	0x004000e0
 8004b88:	a3200008 	.word	0xa3200008

08004b8c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	460b      	mov	r3, r1
 8004b96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f023 0303 	bic.w	r3, r3, #3
 8004bb0:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bb8:	4619      	mov	r1, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	78fb      	ldrb	r3, [r7, #3]
 8004bc4:	f003 0303 	and.w	r3, r3, #3
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004bcc:	78fb      	ldrb	r3, [r7, #3]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d107      	bne.n	8004be2 <USB_InitFSLSPClkSel+0x56>
  {
    USBx_HOST->HFIR = 48000U;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bd8:	461a      	mov	r2, r3
 8004bda:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004bde:	6053      	str	r3, [r2, #4]
 8004be0:	e009      	b.n	8004bf6 <USB_InitFSLSPClkSel+0x6a>
  }
  else if (freq == HCFG_6_MHZ)
 8004be2:	78fb      	ldrb	r3, [r7, #3]
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d106      	bne.n	8004bf6 <USB_InitFSLSPClkSel+0x6a>
  {
    USBx_HOST->HFIR = 6000U;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bee:	461a      	mov	r2, r3
 8004bf0:	f241 7370 	movw	r3, #6000	; 0x1770
 8004bf4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3714      	adds	r7, #20
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004c10:	2300      	movs	r3, #0
 8004c12:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004c24:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c34:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004c36:	2064      	movs	r0, #100	; 0x64
 8004c38:	f7fc f8d2 	bl	8000de0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c42:	461a      	mov	r2, r3
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c4a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004c4c:	200a      	movs	r0, #10
 8004c4e:	f7fc f8c7 	bl	8000de0 <HAL_Delay>

  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3710      	adds	r7, #16
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	460b      	mov	r3, r1
 8004c66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004c80:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d10a      	bne.n	8004ca2 <USB_DriveVbus+0x46>
 8004c8c:	78fb      	ldrb	r3, [r7, #3]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d107      	bne.n	8004ca2 <USB_DriveVbus+0x46>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c98:	461a      	mov	r2, r3
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004ca0:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ca8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cac:	d10a      	bne.n	8004cc4 <USB_DriveVbus+0x68>
 8004cae:	78fb      	ldrb	r3, [r7, #3]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d107      	bne.n	8004cc4 <USB_DriveVbus+0x68>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004cba:	461a      	mov	r2, r3
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cc2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3714      	adds	r7, #20
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr

08004cd2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004cd2:	b480      	push	{r7}
 8004cd4:	b085      	sub	sp, #20
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	0c5b      	lsrs	r3, r3, #17
 8004cf0:	f003 0303 	and.w	r3, r3, #3
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3714      	adds	r7, #20
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	b29b      	uxth	r3, r3
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3714      	adds	r7, #20
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
	...

08004d24 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b088      	sub	sp, #32
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	4608      	mov	r0, r1
 8004d2e:	4611      	mov	r1, r2
 8004d30:	461a      	mov	r2, r3
 8004d32:	4603      	mov	r3, r0
 8004d34:	70fb      	strb	r3, [r7, #3]
 8004d36:	460b      	mov	r3, r1
 8004d38:	70bb      	strb	r3, [r7, #2]
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004d46:	78fb      	ldrb	r3, [r7, #3]
 8004d48:	015a      	lsls	r2, r3, #5
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d52:	461a      	mov	r2, r3
 8004d54:	f04f 33ff 	mov.w	r3, #4294967295
 8004d58:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004d5a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004d5e:	2b03      	cmp	r3, #3
 8004d60:	f200 8084 	bhi.w	8004e6c <USB_HC_Init+0x148>
 8004d64:	a201      	add	r2, pc, #4	; (adr r2, 8004d6c <USB_HC_Init+0x48>)
 8004d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d6a:	bf00      	nop
 8004d6c:	08004d7d 	.word	0x08004d7d
 8004d70:	08004e2d 	.word	0x08004e2d
 8004d74:	08004d7d 	.word	0x08004d7d
 8004d78:	08004ded 	.word	0x08004ded
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004d7c:	78fb      	ldrb	r3, [r7, #3]
 8004d7e:	015a      	lsls	r2, r3, #5
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	4413      	add	r3, r2
 8004d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d88:	461a      	mov	r2, r3
 8004d8a:	f240 439d 	movw	r3, #1181	; 0x49d
 8004d8e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004d90:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	da11      	bge.n	8004dbc <USB_HC_Init+0x98>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004d98:	78fb      	ldrb	r3, [r7, #3]
 8004d9a:	015a      	lsls	r2, r3, #5
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	4413      	add	r3, r2
 8004da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004da4:	4619      	mov	r1, r3
 8004da6:	78fb      	ldrb	r3, [r7, #3]
 8004da8:	015a      	lsls	r2, r3, #5
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	4413      	add	r3, r2
 8004dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004db8:	60cb      	str	r3, [r1, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8004dba:	e05a      	b.n	8004e72 <USB_HC_Init+0x14e>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d054      	beq.n	8004e72 <USB_HC_Init+0x14e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004dc8:	78fb      	ldrb	r3, [r7, #3]
 8004dca:	015a      	lsls	r2, r3, #5
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	78fb      	ldrb	r3, [r7, #3]
 8004dd8:	015a      	lsls	r2, r3, #5
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	4413      	add	r3, r2
 8004dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004de8:	60cb      	str	r3, [r1, #12]
      break;
 8004dea:	e042      	b.n	8004e72 <USB_HC_Init+0x14e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004dec:	78fb      	ldrb	r3, [r7, #3]
 8004dee:	015a      	lsls	r2, r3, #5
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	4413      	add	r3, r2
 8004df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004df8:	461a      	mov	r2, r3
 8004dfa:	f240 639d 	movw	r3, #1693	; 0x69d
 8004dfe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004e00:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	da36      	bge.n	8004e76 <USB_HC_Init+0x152>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004e08:	78fb      	ldrb	r3, [r7, #3]
 8004e0a:	015a      	lsls	r2, r3, #5
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	4413      	add	r3, r2
 8004e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e14:	4619      	mov	r1, r3
 8004e16:	78fb      	ldrb	r3, [r7, #3]
 8004e18:	015a      	lsls	r2, r3, #5
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e28:	60cb      	str	r3, [r1, #12]
      }

      break;
 8004e2a:	e024      	b.n	8004e76 <USB_HC_Init+0x152>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004e2c:	78fb      	ldrb	r3, [r7, #3]
 8004e2e:	015a      	lsls	r2, r3, #5
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	4413      	add	r3, r2
 8004e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e38:	461a      	mov	r2, r3
 8004e3a:	f240 2325 	movw	r3, #549	; 0x225
 8004e3e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004e40:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	da18      	bge.n	8004e7a <USB_HC_Init+0x156>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004e48:	78fb      	ldrb	r3, [r7, #3]
 8004e4a:	015a      	lsls	r2, r3, #5
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	4413      	add	r3, r2
 8004e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e54:	4619      	mov	r1, r3
 8004e56:	78fb      	ldrb	r3, [r7, #3]
 8004e58:	015a      	lsls	r2, r3, #5
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004e68:	60cb      	str	r3, [r1, #12]
      }
      break;
 8004e6a:	e006      	b.n	8004e7a <USB_HC_Init+0x156>

    default:
      ret = HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	77fb      	strb	r3, [r7, #31]
      break;
 8004e70:	e004      	b.n	8004e7c <USB_HC_Init+0x158>
      break;
 8004e72:	bf00      	nop
 8004e74:	e002      	b.n	8004e7c <USB_HC_Init+0x158>
      break;
 8004e76:	bf00      	nop
 8004e78:	e000      	b.n	8004e7c <USB_HC_Init+0x158>
      break;
 8004e7a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e82:	4618      	mov	r0, r3
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e8a:	699a      	ldr	r2, [r3, #24]
 8004e8c:	78fb      	ldrb	r3, [r7, #3]
 8004e8e:	f003 030f 	and.w	r3, r3, #15
 8004e92:	2101      	movs	r1, #1
 8004e94:	fa01 f303 	lsl.w	r3, r1, r3
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	6183      	str	r3, [r0, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004ea8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	da03      	bge.n	8004eb8 <USB_HC_Init+0x194>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004eb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eb4:	61bb      	str	r3, [r7, #24]
 8004eb6:	e001      	b.n	8004ebc <USB_HC_Init+0x198>
  }
  else
  {
    HCcharEpDir = 0U;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f7ff ff08 	bl	8004cd2 <USB_GetHostSpeed>
 8004ec2:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004ec4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d106      	bne.n	8004eda <USB_HC_Init+0x1b6>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d003      	beq.n	8004eda <USB_HC_Init+0x1b6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004ed2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ed6:	617b      	str	r3, [r7, #20]
 8004ed8:	e001      	b.n	8004ede <USB_HC_Init+0x1ba>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004eda:	2300      	movs	r3, #0
 8004edc:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004ede:	78fb      	ldrb	r3, [r7, #3]
 8004ee0:	015a      	lsls	r2, r3, #5
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eea:	4619      	mov	r1, r3
 8004eec:	787b      	ldrb	r3, [r7, #1]
 8004eee:	059b      	lsls	r3, r3, #22
 8004ef0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004ef4:	78bb      	ldrb	r3, [r7, #2]
 8004ef6:	02db      	lsls	r3, r3, #11
 8004ef8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004efc:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004efe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004f02:	049b      	lsls	r3, r3, #18
 8004f04:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004f08:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004f0a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004f0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004f10:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	431a      	orrs	r2, r3
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004f1a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004f1c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004f20:	2b03      	cmp	r3, #3
 8004f22:	d110      	bne.n	8004f46 <USB_HC_Init+0x222>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004f24:	78fb      	ldrb	r3, [r7, #3]
 8004f26:	015a      	lsls	r2, r3, #5
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f30:	4619      	mov	r1, r3
 8004f32:	78fb      	ldrb	r3, [r7, #3]
 8004f34:	015a      	lsls	r2, r3, #5
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	4413      	add	r3, r2
 8004f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f44:	600b      	str	r3, [r1, #0]
  }

  return ret;
 8004f46:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3720      	adds	r7, #32
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b08c      	sub	sp, #48	; 0x30
 8004f54:	af02      	add	r7, sp, #8
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	785b      	ldrb	r3, [r3, #1]
 8004f66:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004f68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f6c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d02e      	beq.n	8004fd8 <USB_HC_StartXfer+0x88>
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	791b      	ldrb	r3, [r3, #4]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d12a      	bne.n	8004fd8 <USB_HC_StartXfer+0x88>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8004f82:	79fb      	ldrb	r3, [r7, #7]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d118      	bne.n	8004fba <USB_HC_StartXfer+0x6a>
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	79db      	ldrb	r3, [r3, #7]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d003      	beq.n	8004f98 <USB_HC_StartXfer+0x48>
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	79db      	ldrb	r3, [r3, #7]
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d110      	bne.n	8004fba <USB_HC_StartXfer+0x6a>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	015a      	lsls	r2, r3, #5
 8004f9c:	6a3b      	ldr	r3, [r7, #32]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	015a      	lsls	r2, r3, #5
 8004faa:	6a3b      	ldr	r3, [r7, #32]
 8004fac:	4413      	add	r3, r2
 8004fae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fb8:	60cb      	str	r3, [r1, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8004fba:	79fb      	ldrb	r3, [r7, #7]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d10b      	bne.n	8004fd8 <USB_HC_StartXfer+0x88>
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	795b      	ldrb	r3, [r3, #5]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d107      	bne.n	8004fd8 <USB_HC_StartXfer+0x88>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	785b      	ldrb	r3, [r3, #1]
 8004fcc:	4619      	mov	r1, r3
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f000 fa3e 	bl	8005450 <USB_DoPing>
      return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	e0fc      	b.n	80051d2 <USB_HC_StartXfer+0x282>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d018      	beq.n	8005012 <USB_HC_StartXfer+0xc2>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	695b      	ldr	r3, [r3, #20]
 8004fe4:	68ba      	ldr	r2, [r7, #8]
 8004fe6:	8912      	ldrh	r2, [r2, #8]
 8004fe8:	4413      	add	r3, r2
 8004fea:	3b01      	subs	r3, #1
 8004fec:	68ba      	ldr	r2, [r7, #8]
 8004fee:	8912      	ldrh	r2, [r2, #8]
 8004ff0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ff4:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004ff6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004ff8:	8b7b      	ldrh	r3, [r7, #26]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d90b      	bls.n	8005016 <USB_HC_StartXfer+0xc6>
    {
      num_packets = max_hc_pkt_count;
 8004ffe:	8b7b      	ldrh	r3, [r7, #26]
 8005000:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005002:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005004:	68ba      	ldr	r2, [r7, #8]
 8005006:	8912      	ldrh	r2, [r2, #8]
 8005008:	fb02 f203 	mul.w	r2, r2, r3
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	611a      	str	r2, [r3, #16]
 8005010:	e001      	b.n	8005016 <USB_HC_StartXfer+0xc6>
    }
  }
  else
  {
    num_packets = 1U;
 8005012:	2301      	movs	r3, #1
 8005014:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	78db      	ldrb	r3, [r3, #3]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d007      	beq.n	800502e <USB_HC_StartXfer+0xde>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800501e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005020:	68ba      	ldr	r2, [r7, #8]
 8005022:	8912      	ldrh	r2, [r2, #8]
 8005024:	fb02 f203 	mul.w	r2, r2, r3
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	611a      	str	r2, [r3, #16]
 800502c:	e003      	b.n	8005036 <USB_HC_StartXfer+0xe6>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	695a      	ldr	r2, [r3, #20]
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	015a      	lsls	r2, r3, #5
 800503a:	6a3b      	ldr	r3, [r7, #32]
 800503c:	4413      	add	r3, r2
 800503e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005042:	4618      	mov	r0, r3
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800504c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800504e:	04d9      	lsls	r1, r3, #19
 8005050:	4b62      	ldr	r3, [pc, #392]	; (80051dc <USB_HC_StartXfer+0x28c>)
 8005052:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005054:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	7a9b      	ldrb	r3, [r3, #10]
 800505a:	075b      	lsls	r3, r3, #29
 800505c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005060:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005062:	6103      	str	r3, [r0, #16]

  if (dma != 0U)
 8005064:	79fb      	ldrb	r3, [r7, #7]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d009      	beq.n	800507e <USB_HC_StartXfer+0x12e>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	015a      	lsls	r2, r3, #5
 800506e:	6a3b      	ldr	r3, [r7, #32]
 8005070:	4413      	add	r3, r2
 8005072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005076:	461a      	mov	r2, r3
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	6153      	str	r3, [r2, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800507e:	6a3b      	ldr	r3, [r7, #32]
 8005080:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f003 0301 	and.w	r3, r3, #1
 800508a:	2b00      	cmp	r3, #0
 800508c:	bf0c      	ite	eq
 800508e:	2301      	moveq	r3, #1
 8005090:	2300      	movne	r3, #0
 8005092:	b2db      	uxtb	r3, r3
 8005094:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	015a      	lsls	r2, r3, #5
 800509a:	6a3b      	ldr	r3, [r7, #32]
 800509c:	4413      	add	r3, r2
 800509e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050a2:	4619      	mov	r1, r3
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	015a      	lsls	r2, r3, #5
 80050a8:	6a3b      	ldr	r3, [r7, #32]
 80050aa:	4413      	add	r3, r2
 80050ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80050b6:	600b      	str	r3, [r1, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	015a      	lsls	r2, r3, #5
 80050bc:	6a3b      	ldr	r3, [r7, #32]
 80050be:	4413      	add	r3, r2
 80050c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050c4:	4619      	mov	r1, r3
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	015a      	lsls	r2, r3, #5
 80050ca:	6a3b      	ldr	r3, [r7, #32]
 80050cc:	4413      	add	r3, r2
 80050ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	7e7b      	ldrb	r3, [r7, #25]
 80050d6:	075b      	lsls	r3, r3, #29
 80050d8:	4313      	orrs	r3, r2
 80050da:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	015a      	lsls	r2, r3, #5
 80050e0:	6a3b      	ldr	r3, [r7, #32]
 80050e2:	4413      	add	r3, r2
 80050e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80050f2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	78db      	ldrb	r3, [r3, #3]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d004      	beq.n	8005106 <USB_HC_StartXfer+0x1b6>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005102:	613b      	str	r3, [r7, #16]
 8005104:	e003      	b.n	800510e <USB_HC_StartXfer+0x1be>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800510c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005114:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	015a      	lsls	r2, r3, #5
 800511a:	6a3b      	ldr	r3, [r7, #32]
 800511c:	4413      	add	r3, r2
 800511e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005122:	461a      	mov	r2, r3
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005128:	79fb      	ldrb	r3, [r7, #7]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d001      	beq.n	8005132 <USB_HC_StartXfer+0x1e2>
  {
    return HAL_OK;
 800512e:	2300      	movs	r3, #0
 8005130:	e04f      	b.n	80051d2 <USB_HC_StartXfer+0x282>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	78db      	ldrb	r3, [r3, #3]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d14a      	bne.n	80051d0 <USB_HC_StartXfer+0x280>
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d046      	beq.n	80051d0 <USB_HC_StartXfer+0x280>
  {
    switch (hc->ep_type)
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	79db      	ldrb	r3, [r3, #7]
 8005146:	2b03      	cmp	r3, #3
 8005148:	d830      	bhi.n	80051ac <USB_HC_StartXfer+0x25c>
 800514a:	a201      	add	r2, pc, #4	; (adr r2, 8005150 <USB_HC_StartXfer+0x200>)
 800514c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005150:	08005161 	.word	0x08005161
 8005154:	08005185 	.word	0x08005185
 8005158:	08005161 	.word	0x08005161
 800515c:	08005185 	.word	0x08005185
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	695b      	ldr	r3, [r3, #20]
 8005164:	3303      	adds	r3, #3
 8005166:	089b      	lsrs	r3, r3, #2
 8005168:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800516a:	8afa      	ldrh	r2, [r7, #22]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005170:	b29b      	uxth	r3, r3
 8005172:	429a      	cmp	r2, r3
 8005174:	d91c      	bls.n	80051b0 <USB_HC_StartXfer+0x260>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	f043 0220 	orr.w	r2, r3, #32
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	619a      	str	r2, [r3, #24]
        }
        break;
 8005182:	e015      	b.n	80051b0 <USB_HC_StartXfer+0x260>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	695b      	ldr	r3, [r3, #20]
 8005188:	3303      	adds	r3, #3
 800518a:	089b      	lsrs	r3, r3, #2
 800518c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800518e:	8afa      	ldrh	r2, [r7, #22]
 8005190:	6a3b      	ldr	r3, [r7, #32]
 8005192:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	b29b      	uxth	r3, r3
 800519a:	429a      	cmp	r2, r3
 800519c:	d90a      	bls.n	80051b4 <USB_HC_StartXfer+0x264>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	619a      	str	r2, [r3, #24]
        }
        break;
 80051aa:	e003      	b.n	80051b4 <USB_HC_StartXfer+0x264>

      default:
        break;
 80051ac:	bf00      	nop
 80051ae:	e002      	b.n	80051b6 <USB_HC_StartXfer+0x266>
        break;
 80051b0:	bf00      	nop
 80051b2:	e000      	b.n	80051b6 <USB_HC_StartXfer+0x266>
        break;
 80051b4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	68d9      	ldr	r1, [r3, #12]
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	785a      	ldrb	r2, [r3, #1]
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	b298      	uxth	r0, r3
 80051c4:	2300      	movs	r3, #0
 80051c6:	9300      	str	r3, [sp, #0]
 80051c8:	4603      	mov	r3, r0
 80051ca:	68f8      	ldr	r0, [r7, #12]
 80051cc:	f7ff fb6c 	bl	80048a8 <USB_WritePacket>
  }

  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3728      	adds	r7, #40	; 0x28
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	1ff80000 	.word	0x1ff80000

080051e0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051f2:	695b      	ldr	r3, [r3, #20]
 80051f4:	b29b      	uxth	r3, r3
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3714      	adds	r7, #20
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr

08005202 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005202:	b480      	push	{r7}
 8005204:	b089      	sub	sp, #36	; 0x24
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
 800520a:	460b      	mov	r3, r1
 800520c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8005212:	78fb      	ldrb	r3, [r7, #3]
 8005214:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8005216:	2300      	movs	r3, #0
 8005218:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	015a      	lsls	r2, r3, #5
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	4413      	add	r3, r2
 8005222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	0c9b      	lsrs	r3, r3, #18
 800522a:	f003 0303 	and.w	r3, r3, #3
 800522e:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	015a      	lsls	r2, r3, #5
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	4413      	add	r3, r2
 8005238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	0fdb      	lsrs	r3, r3, #31
 8005240:	f003 0301 	and.w	r3, r3, #1
 8005244:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f003 0320 	and.w	r3, r3, #32
 800524e:	2b20      	cmp	r3, #32
 8005250:	d104      	bne.n	800525c <USB_HC_Halt+0x5a>
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d101      	bne.n	800525c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005258:	2300      	movs	r3, #0
 800525a:	e0f2      	b.n	8005442 <USB_HC_Halt+0x240>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d002      	beq.n	8005268 <USB_HC_Halt+0x66>
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	2b02      	cmp	r3, #2
 8005266:	d178      	bne.n	800535a <USB_HC_Halt+0x158>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	015a      	lsls	r2, r3, #5
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	4413      	add	r3, r2
 8005270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005274:	4619      	mov	r1, r3
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	015a      	lsls	r2, r3, #5
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	4413      	add	r3, r2
 800527e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005288:	600b      	str	r3, [r1, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f003 0320 	and.w	r3, r3, #32
 8005292:	2b00      	cmp	r3, #0
 8005294:	f040 80d4 	bne.w	8005440 <USB_HC_Halt+0x23e>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800529c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d146      	bne.n	8005332 <USB_HC_Halt+0x130>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	015a      	lsls	r2, r3, #5
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	4413      	add	r3, r2
 80052ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052b0:	4619      	mov	r1, r3
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	015a      	lsls	r2, r3, #5
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	4413      	add	r3, r2
 80052ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052c4:	600b      	str	r3, [r1, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	015a      	lsls	r2, r3, #5
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	4413      	add	r3, r2
 80052ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052d2:	4619      	mov	r1, r3
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052e6:	600b      	str	r3, [r1, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	015a      	lsls	r2, r3, #5
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	4413      	add	r3, r2
 80052f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052f4:	4619      	mov	r1, r3
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	015a      	lsls	r2, r3, #5
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	4413      	add	r3, r2
 80052fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005308:	600b      	str	r3, [r1, #0]
        do
        {
          if (++count > 1000U)
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	3301      	adds	r3, #1
 800530e:	61fb      	str	r3, [r7, #28]
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005316:	d81e      	bhi.n	8005356 <USB_HC_Halt+0x154>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	015a      	lsls	r2, r3, #5
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	4413      	add	r3, r2
 8005320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800532a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800532e:	d0ec      	beq.n	800530a <USB_HC_Halt+0x108>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005330:	e086      	b.n	8005440 <USB_HC_Halt+0x23e>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	015a      	lsls	r2, r3, #5
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	4413      	add	r3, r2
 800533a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800533e:	4619      	mov	r1, r3
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	015a      	lsls	r2, r3, #5
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	4413      	add	r3, r2
 8005348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005352:	600b      	str	r3, [r1, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005354:	e074      	b.n	8005440 <USB_HC_Halt+0x23e>
            break;
 8005356:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005358:	e072      	b.n	8005440 <USB_HC_Halt+0x23e>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	015a      	lsls	r2, r3, #5
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	4413      	add	r3, r2
 8005362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005366:	4619      	mov	r1, r3
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	015a      	lsls	r2, r3, #5
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	4413      	add	r3, r2
 8005370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800537a:	600b      	str	r3, [r1, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005388:	2b00      	cmp	r3, #0
 800538a:	d146      	bne.n	800541a <USB_HC_Halt+0x218>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	015a      	lsls	r2, r3, #5
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	4413      	add	r3, r2
 8005394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005398:	4619      	mov	r1, r3
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	015a      	lsls	r2, r3, #5
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	4413      	add	r3, r2
 80053a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053ac:	600b      	str	r3, [r1, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	015a      	lsls	r2, r3, #5
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	4413      	add	r3, r2
 80053b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ba:	4619      	mov	r1, r3
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	015a      	lsls	r2, r3, #5
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	4413      	add	r3, r2
 80053c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053ce:	600b      	str	r3, [r1, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	015a      	lsls	r2, r3, #5
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	4413      	add	r3, r2
 80053d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053dc:	4619      	mov	r1, r3
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	015a      	lsls	r2, r3, #5
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	4413      	add	r3, r2
 80053e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80053f0:	600b      	str	r3, [r1, #0]
      do
      {
        if (++count > 1000U)
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	3301      	adds	r3, #1
 80053f6:	61fb      	str	r3, [r7, #28]
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053fe:	d81e      	bhi.n	800543e <USB_HC_Halt+0x23c>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	015a      	lsls	r2, r3, #5
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	4413      	add	r3, r2
 8005408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005412:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005416:	d0ec      	beq.n	80053f2 <USB_HC_Halt+0x1f0>
 8005418:	e012      	b.n	8005440 <USB_HC_Halt+0x23e>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	015a      	lsls	r2, r3, #5
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	4413      	add	r3, r2
 8005422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005426:	4619      	mov	r1, r3
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	015a      	lsls	r2, r3, #5
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	4413      	add	r3, r2
 8005430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800543a:	600b      	str	r3, [r1, #0]
 800543c:	e000      	b.n	8005440 <USB_HC_Halt+0x23e>
          break;
 800543e:	bf00      	nop
    }
  }

  return HAL_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3724      	adds	r7, #36	; 0x24
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
	...

08005450 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005450:	b480      	push	{r7}
 8005452:	b087      	sub	sp, #28
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	460b      	mov	r3, r1
 800545a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005460:	78fb      	ldrb	r3, [r7, #3]
 8005462:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005464:	2301      	movs	r3, #1
 8005466:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	015a      	lsls	r2, r3, #5
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	4413      	add	r3, r2
 8005470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005474:	4619      	mov	r1, r3
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	04da      	lsls	r2, r3, #19
 800547a:	4b12      	ldr	r3, [pc, #72]	; (80054c4 <USB_DoPing+0x74>)
 800547c:	4013      	ands	r3, r2
 800547e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005482:	610b      	str	r3, [r1, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	015a      	lsls	r2, r3, #5
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	4413      	add	r3, r2
 800548c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800549a:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054a2:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	015a      	lsls	r2, r3, #5
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	4413      	add	r3, r2
 80054ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054b0:	461a      	mov	r2, r3
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	371c      	adds	r7, #28
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr
 80054c4:	1ff80000 	.word	0x1ff80000

080054c8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b086      	sub	sp, #24
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80054d4:	2300      	movs	r3, #0
 80054d6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f7ff f961 	bl	80047a0 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80054de:	2110      	movs	r1, #16
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f7ff f999 	bl	8004818 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f7ff f9bc 	bl	8004864 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80054ec:	2300      	movs	r3, #0
 80054ee:	613b      	str	r3, [r7, #16]
 80054f0:	e01f      	b.n	8005532 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	015a      	lsls	r2, r3, #5
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	4413      	add	r3, r2
 80054fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005508:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005510:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005518:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	015a      	lsls	r2, r3, #5
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	4413      	add	r3, r2
 8005522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005526:	461a      	mov	r2, r3
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	3301      	adds	r3, #1
 8005530:	613b      	str	r3, [r7, #16]
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	2b0f      	cmp	r3, #15
 8005536:	d9dc      	bls.n	80054f2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005538:	2300      	movs	r3, #0
 800553a:	613b      	str	r3, [r7, #16]
 800553c:	e034      	b.n	80055a8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	015a      	lsls	r2, r3, #5
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	4413      	add	r3, r2
 8005546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005554:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800555c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005564:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	015a      	lsls	r2, r3, #5
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	4413      	add	r3, r2
 800556e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005572:	461a      	mov	r2, r3
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	3301      	adds	r3, #1
 800557c:	617b      	str	r3, [r7, #20]
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005584:	d80c      	bhi.n	80055a0 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	015a      	lsls	r2, r3, #5
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	4413      	add	r3, r2
 800558e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005598:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800559c:	d0ec      	beq.n	8005578 <USB_StopHost+0xb0>
 800559e:	e000      	b.n	80055a2 <USB_StopHost+0xda>
        break;
 80055a0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	3301      	adds	r3, #1
 80055a6:	613b      	str	r3, [r7, #16]
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	2b0f      	cmp	r3, #15
 80055ac:	d9c7      	bls.n	800553e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055b4:	461a      	mov	r2, r3
 80055b6:	f04f 33ff 	mov.w	r3, #4294967295
 80055ba:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f04f 32ff 	mov.w	r2, #4294967295
 80055c2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f7ff f8da 	bl	800477e <USB_EnableGlobalInt>

  return HAL_OK;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3718      	adds	r7, #24
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80055d4:	b590      	push	{r4, r7, lr}
 80055d6:	b089      	sub	sp, #36	; 0x24
 80055d8:	af04      	add	r7, sp, #16
 80055da:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80055dc:	2301      	movs	r3, #1
 80055de:	2202      	movs	r2, #2
 80055e0:	2102      	movs	r1, #2
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 fc68 	bl	8005eb8 <USBH_FindInterface>
 80055e8:	4603      	mov	r3, r0
 80055ea:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80055ec:	7bfb      	ldrb	r3, [r7, #15]
 80055ee:	2bff      	cmp	r3, #255	; 0xff
 80055f0:	d002      	beq.n	80055f8 <USBH_CDC_InterfaceInit+0x24>
 80055f2:	7bfb      	ldrb	r3, [r7, #15]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d901      	bls.n	80055fc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80055f8:	2302      	movs	r3, #2
 80055fa:	e13d      	b.n	8005878 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80055fc:	7bfb      	ldrb	r3, [r7, #15]
 80055fe:	4619      	mov	r1, r3
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 fc3d 	bl	8005e80 <USBH_SelectInterface>
 8005606:	4603      	mov	r3, r0
 8005608:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800560a:	7bbb      	ldrb	r3, [r7, #14]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d001      	beq.n	8005614 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005610:	2302      	movs	r3, #2
 8005612:	e131      	b.n	8005878 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800561a:	2050      	movs	r0, #80	; 0x50
 800561c:	f002 fa2e 	bl	8007a7c <malloc>
 8005620:	4603      	mov	r3, r0
 8005622:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800562a:	69db      	ldr	r3, [r3, #28]
 800562c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d101      	bne.n	8005638 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005634:	2302      	movs	r3, #2
 8005636:	e11f      	b.n	8005878 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005638:	2250      	movs	r2, #80	; 0x50
 800563a:	2100      	movs	r1, #0
 800563c:	68b8      	ldr	r0, [r7, #8]
 800563e:	f002 fa2d 	bl	8007a9c <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005642:	7bfb      	ldrb	r3, [r7, #15]
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	211a      	movs	r1, #26
 8005648:	fb01 f303 	mul.w	r3, r1, r3
 800564c:	4413      	add	r3, r2
 800564e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	b25b      	sxtb	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	da15      	bge.n	8005686 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800565a:	7bfb      	ldrb	r3, [r7, #15]
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	211a      	movs	r1, #26
 8005660:	fb01 f303 	mul.w	r3, r1, r3
 8005664:	4413      	add	r3, r2
 8005666:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800566a:	781a      	ldrb	r2, [r3, #0]
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005670:	7bfb      	ldrb	r3, [r7, #15]
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	211a      	movs	r1, #26
 8005676:	fb01 f303 	mul.w	r3, r1, r3
 800567a:	4413      	add	r3, r2
 800567c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005680:	881a      	ldrh	r2, [r3, #0]
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	785b      	ldrb	r3, [r3, #1]
 800568a:	4619      	mov	r1, r3
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f001 fe36 	bl	80072fe <USBH_AllocPipe>
 8005692:	4603      	mov	r3, r0
 8005694:	461a      	mov	r2, r3
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	7819      	ldrb	r1, [r3, #0]
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	7858      	ldrb	r0, [r3, #1]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80056ae:	68ba      	ldr	r2, [r7, #8]
 80056b0:	8952      	ldrh	r2, [r2, #10]
 80056b2:	9202      	str	r2, [sp, #8]
 80056b4:	2203      	movs	r2, #3
 80056b6:	9201      	str	r2, [sp, #4]
 80056b8:	9300      	str	r3, [sp, #0]
 80056ba:	4623      	mov	r3, r4
 80056bc:	4602      	mov	r2, r0
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f001 fdee 	bl	80072a0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	2200      	movs	r2, #0
 80056ca:	4619      	mov	r1, r3
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f002 f8fd 	bl	80078cc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80056d2:	2300      	movs	r3, #0
 80056d4:	2200      	movs	r2, #0
 80056d6:	210a      	movs	r1, #10
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 fbed 	bl	8005eb8 <USBH_FindInterface>
 80056de:	4603      	mov	r3, r0
 80056e0:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80056e2:	7bfb      	ldrb	r3, [r7, #15]
 80056e4:	2bff      	cmp	r3, #255	; 0xff
 80056e6:	d002      	beq.n	80056ee <USBH_CDC_InterfaceInit+0x11a>
 80056e8:	7bfb      	ldrb	r3, [r7, #15]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d901      	bls.n	80056f2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80056ee:	2302      	movs	r3, #2
 80056f0:	e0c2      	b.n	8005878 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80056f2:	7bfb      	ldrb	r3, [r7, #15]
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	211a      	movs	r1, #26
 80056f8:	fb01 f303 	mul.w	r3, r1, r3
 80056fc:	4413      	add	r3, r2
 80056fe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	b25b      	sxtb	r3, r3
 8005706:	2b00      	cmp	r3, #0
 8005708:	da16      	bge.n	8005738 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800570a:	7bfb      	ldrb	r3, [r7, #15]
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	211a      	movs	r1, #26
 8005710:	fb01 f303 	mul.w	r3, r1, r3
 8005714:	4413      	add	r3, r2
 8005716:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800571a:	781a      	ldrb	r2, [r3, #0]
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005720:	7bfb      	ldrb	r3, [r7, #15]
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	211a      	movs	r1, #26
 8005726:	fb01 f303 	mul.w	r3, r1, r3
 800572a:	4413      	add	r3, r2
 800572c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005730:	881a      	ldrh	r2, [r3, #0]
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	835a      	strh	r2, [r3, #26]
 8005736:	e015      	b.n	8005764 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005738:	7bfb      	ldrb	r3, [r7, #15]
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	211a      	movs	r1, #26
 800573e:	fb01 f303 	mul.w	r3, r1, r3
 8005742:	4413      	add	r3, r2
 8005744:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005748:	781a      	ldrb	r2, [r3, #0]
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800574e:	7bfb      	ldrb	r3, [r7, #15]
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	211a      	movs	r1, #26
 8005754:	fb01 f303 	mul.w	r3, r1, r3
 8005758:	4413      	add	r3, r2
 800575a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800575e:	881a      	ldrh	r2, [r3, #0]
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005764:	7bfb      	ldrb	r3, [r7, #15]
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	211a      	movs	r1, #26
 800576a:	fb01 f303 	mul.w	r3, r1, r3
 800576e:	4413      	add	r3, r2
 8005770:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	b25b      	sxtb	r3, r3
 8005778:	2b00      	cmp	r3, #0
 800577a:	da16      	bge.n	80057aa <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800577c:	7bfb      	ldrb	r3, [r7, #15]
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	211a      	movs	r1, #26
 8005782:	fb01 f303 	mul.w	r3, r1, r3
 8005786:	4413      	add	r3, r2
 8005788:	f203 3356 	addw	r3, r3, #854	; 0x356
 800578c:	781a      	ldrb	r2, [r3, #0]
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005792:	7bfb      	ldrb	r3, [r7, #15]
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	211a      	movs	r1, #26
 8005798:	fb01 f303 	mul.w	r3, r1, r3
 800579c:	4413      	add	r3, r2
 800579e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80057a2:	881a      	ldrh	r2, [r3, #0]
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	835a      	strh	r2, [r3, #26]
 80057a8:	e015      	b.n	80057d6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80057aa:	7bfb      	ldrb	r3, [r7, #15]
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	211a      	movs	r1, #26
 80057b0:	fb01 f303 	mul.w	r3, r1, r3
 80057b4:	4413      	add	r3, r2
 80057b6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80057ba:	781a      	ldrb	r2, [r3, #0]
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80057c0:	7bfb      	ldrb	r3, [r7, #15]
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	211a      	movs	r1, #26
 80057c6:	fb01 f303 	mul.w	r3, r1, r3
 80057ca:	4413      	add	r3, r2
 80057cc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80057d0:	881a      	ldrh	r2, [r3, #0]
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	7b9b      	ldrb	r3, [r3, #14]
 80057da:	4619      	mov	r1, r3
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f001 fd8e 	bl	80072fe <USBH_AllocPipe>
 80057e2:	4603      	mov	r3, r0
 80057e4:	461a      	mov	r2, r3
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	7bdb      	ldrb	r3, [r3, #15]
 80057ee:	4619      	mov	r1, r3
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f001 fd84 	bl	80072fe <USBH_AllocPipe>
 80057f6:	4603      	mov	r3, r0
 80057f8:	461a      	mov	r2, r3
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	7b59      	ldrb	r1, [r3, #13]
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	7b98      	ldrb	r0, [r3, #14]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005812:	68ba      	ldr	r2, [r7, #8]
 8005814:	8b12      	ldrh	r2, [r2, #24]
 8005816:	9202      	str	r2, [sp, #8]
 8005818:	2202      	movs	r2, #2
 800581a:	9201      	str	r2, [sp, #4]
 800581c:	9300      	str	r3, [sp, #0]
 800581e:	4623      	mov	r3, r4
 8005820:	4602      	mov	r2, r0
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f001 fd3c 	bl	80072a0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	7b19      	ldrb	r1, [r3, #12]
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	7bd8      	ldrb	r0, [r3, #15]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800583c:	68ba      	ldr	r2, [r7, #8]
 800583e:	8b52      	ldrh	r2, [r2, #26]
 8005840:	9202      	str	r2, [sp, #8]
 8005842:	2202      	movs	r2, #2
 8005844:	9201      	str	r2, [sp, #4]
 8005846:	9300      	str	r3, [sp, #0]
 8005848:	4623      	mov	r3, r4
 800584a:	4602      	mov	r2, r0
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f001 fd27 	bl	80072a0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	7b5b      	ldrb	r3, [r3, #13]
 800585e:	2200      	movs	r2, #0
 8005860:	4619      	mov	r1, r3
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f002 f832 	bl	80078cc <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	7b1b      	ldrb	r3, [r3, #12]
 800586c:	2200      	movs	r2, #0
 800586e:	4619      	mov	r1, r3
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f002 f82b 	bl	80078cc <USBH_LL_SetToggle>

  return USBH_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	3714      	adds	r7, #20
 800587c:	46bd      	mov	sp, r7
 800587e:	bd90      	pop	{r4, r7, pc}

08005880 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800588e:	69db      	ldr	r3, [r3, #28]
 8005890:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00e      	beq.n	80058b8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	4619      	mov	r1, r3
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f001 fd1c 	bl	80072de <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	4619      	mov	r1, r3
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f001 fd47 	bl	8007340 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	7b1b      	ldrb	r3, [r3, #12]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00e      	beq.n	80058de <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	7b1b      	ldrb	r3, [r3, #12]
 80058c4:	4619      	mov	r1, r3
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f001 fd09 	bl	80072de <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	7b1b      	ldrb	r3, [r3, #12]
 80058d0:	4619      	mov	r1, r3
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f001 fd34 	bl	8007340 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	7b5b      	ldrb	r3, [r3, #13]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00e      	beq.n	8005904 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	7b5b      	ldrb	r3, [r3, #13]
 80058ea:	4619      	mov	r1, r3
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f001 fcf6 	bl	80072de <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	7b5b      	ldrb	r3, [r3, #13]
 80058f6:	4619      	mov	r1, r3
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f001 fd21 	bl	8007340 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2200      	movs	r2, #0
 8005902:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800590a:	69db      	ldr	r3, [r3, #28]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00b      	beq.n	8005928 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005916:	69db      	ldr	r3, [r3, #28]
 8005918:	4618      	mov	r0, r3
 800591a:	f002 f8b7 	bl	8007a8c <free>
    phost->pActiveClass->pData = 0U;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005924:	2200      	movs	r2, #0
 8005926:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3710      	adds	r7, #16
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}

08005932 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005932:	b580      	push	{r7, lr}
 8005934:	b084      	sub	sp, #16
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005940:	69db      	ldr	r3, [r3, #28]
 8005942:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	3340      	adds	r3, #64	; 0x40
 8005948:	4619      	mov	r1, r3
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 f8b1 	bl	8005ab2 <GetLineCoding>
 8005950:	4603      	mov	r3, r0
 8005952:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005954:	7afb      	ldrb	r3, [r7, #11]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d105      	bne.n	8005966 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005960:	2102      	movs	r1, #2
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8005966:	7afb      	ldrb	r3, [r7, #11]
}
 8005968:	4618      	mov	r0, r3
 800596a:	3710      	adds	r7, #16
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005978:	2301      	movs	r3, #1
 800597a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800597c:	2300      	movs	r3, #0
 800597e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005986:	69db      	ldr	r3, [r3, #28]
 8005988:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005990:	2b04      	cmp	r3, #4
 8005992:	d877      	bhi.n	8005a84 <USBH_CDC_Process+0x114>
 8005994:	a201      	add	r2, pc, #4	; (adr r2, 800599c <USBH_CDC_Process+0x2c>)
 8005996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800599a:	bf00      	nop
 800599c:	080059b1 	.word	0x080059b1
 80059a0:	080059b7 	.word	0x080059b7
 80059a4:	080059e7 	.word	0x080059e7
 80059a8:	08005a5b 	.word	0x08005a5b
 80059ac:	08005a69 	.word	0x08005a69
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80059b0:	2300      	movs	r3, #0
 80059b2:	73fb      	strb	r3, [r7, #15]
      break;
 80059b4:	e06d      	b.n	8005a92 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059ba:	4619      	mov	r1, r3
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 f897 	bl	8005af0 <SetLineCoding>
 80059c2:	4603      	mov	r3, r0
 80059c4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80059c6:	7bbb      	ldrb	r3, [r7, #14]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d104      	bne.n	80059d6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	2202      	movs	r2, #2
 80059d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80059d4:	e058      	b.n	8005a88 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80059d6:	7bbb      	ldrb	r3, [r7, #14]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d055      	beq.n	8005a88 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	2204      	movs	r2, #4
 80059e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80059e4:	e050      	b.n	8005a88 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	3340      	adds	r3, #64	; 0x40
 80059ea:	4619      	mov	r1, r3
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 f860 	bl	8005ab2 <GetLineCoding>
 80059f2:	4603      	mov	r3, r0
 80059f4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80059f6:	7bbb      	ldrb	r3, [r7, #14]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d126      	bne.n	8005a4a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a0e:	791b      	ldrb	r3, [r3, #4]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d13b      	bne.n	8005a8c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a1e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d133      	bne.n	8005a8c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a2e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d12b      	bne.n	8005a8c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a3c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d124      	bne.n	8005a8c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 f95a 	bl	8005cfc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005a48:	e020      	b.n	8005a8c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8005a4a:	7bbb      	ldrb	r3, [r7, #14]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d01d      	beq.n	8005a8c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	2204      	movs	r2, #4
 8005a54:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005a58:	e018      	b.n	8005a8c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 f867 	bl	8005b2e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 f8dc 	bl	8005c1e <CDC_ProcessReception>
      break;
 8005a66:	e014      	b.n	8005a92 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8005a68:	2100      	movs	r1, #0
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 ffe5 	bl	8006a3a <USBH_ClrFeature>
 8005a70:	4603      	mov	r3, r0
 8005a72:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005a74:	7bbb      	ldrb	r3, [r7, #14]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d10a      	bne.n	8005a90 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8005a82:	e005      	b.n	8005a90 <USBH_CDC_Process+0x120>

    default:
      break;
 8005a84:	bf00      	nop
 8005a86:	e004      	b.n	8005a92 <USBH_CDC_Process+0x122>
      break;
 8005a88:	bf00      	nop
 8005a8a:	e002      	b.n	8005a92 <USBH_CDC_Process+0x122>
      break;
 8005a8c:	bf00      	nop
 8005a8e:	e000      	b.n	8005a92 <USBH_CDC_Process+0x122>
      break;
 8005a90:	bf00      	nop

  }

  return status;
 8005a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3710      	adds	r7, #16
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	370c      	adds	r7, #12
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr

08005ab2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005ab2:	b580      	push	{r7, lr}
 8005ab4:	b082      	sub	sp, #8
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
 8005aba:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	22a1      	movs	r2, #161	; 0xa1
 8005ac0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2221      	movs	r2, #33	; 0x21
 8005ac6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2207      	movs	r2, #7
 8005ad8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	2207      	movs	r2, #7
 8005ade:	4619      	mov	r1, r3
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f001 f98a 	bl	8006dfa <USBH_CtlReq>
 8005ae6:	4603      	mov	r3, r0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3708      	adds	r7, #8
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b082      	sub	sp, #8
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2221      	movs	r2, #33	; 0x21
 8005afe:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2220      	movs	r2, #32
 8005b04:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2207      	movs	r2, #7
 8005b16:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	2207      	movs	r2, #7
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f001 f96b 	bl	8006dfa <USBH_CtlReq>
 8005b24:	4603      	mov	r3, r0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3708      	adds	r7, #8
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}

08005b2e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005b2e:	b580      	push	{r7, lr}
 8005b30:	b086      	sub	sp, #24
 8005b32:	af02      	add	r7, sp, #8
 8005b34:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b3c:	69db      	ldr	r3, [r3, #28]
 8005b3e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005b40:	2300      	movs	r3, #0
 8005b42:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d002      	beq.n	8005b54 <CDC_ProcessTransmission+0x26>
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d025      	beq.n	8005b9e <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 8005b52:	e060      	b.n	8005c16 <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	8b12      	ldrh	r2, [r2, #24]
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d90c      	bls.n	8005b7a <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	69d9      	ldr	r1, [r3, #28]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	8b1a      	ldrh	r2, [r3, #24]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	7b58      	ldrb	r0, [r3, #13]
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	9300      	str	r3, [sp, #0]
 8005b70:	4603      	mov	r3, r0
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f001 fb51 	bl	800721a <USBH_BulkSendData>
 8005b78:	e00c      	b.n	8005b94 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8005b82:	b29a      	uxth	r2, r3
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	7b58      	ldrb	r0, [r3, #13]
 8005b88:	2301      	movs	r3, #1
 8005b8a:	9300      	str	r3, [sp, #0]
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f001 fb43 	bl	800721a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2202      	movs	r2, #2
 8005b98:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005b9c:	e03b      	b.n	8005c16 <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	7b5b      	ldrb	r3, [r3, #13]
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f001 fe67 	bl	8007878 <USBH_LL_GetURBState>
 8005baa:	4603      	mov	r3, r0
 8005bac:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005bae:	7afb      	ldrb	r3, [r7, #11]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d128      	bne.n	8005c06 <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	8b12      	ldrh	r2, [r2, #24]
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d90e      	bls.n	8005bde <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	8b12      	ldrh	r2, [r2, #24]
 8005bc8:	1a9a      	subs	r2, r3, r2
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	69db      	ldr	r3, [r3, #28]
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	8b12      	ldrh	r2, [r2, #24]
 8005bd6:	441a      	add	r2, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	61da      	str	r2, [r3, #28]
 8005bdc:	e002      	b.n	8005be4 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d004      	beq.n	8005bf6 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005bf4:	e00e      	b.n	8005c14 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 f868 	bl	8005cd4 <USBH_CDC_TransmitCallback>
      break;
 8005c04:	e006      	b.n	8005c14 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 8005c06:	7afb      	ldrb	r3, [r7, #11]
 8005c08:	2b02      	cmp	r3, #2
 8005c0a:	d103      	bne.n	8005c14 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005c14:	bf00      	nop
  }
}
 8005c16:	bf00      	nop
 8005c18:	3710      	adds	r7, #16
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b086      	sub	sp, #24
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c2c:	69db      	ldr	r3, [r3, #28]
 8005c2e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005c30:	2300      	movs	r3, #0
 8005c32:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005c3a:	2b03      	cmp	r3, #3
 8005c3c:	d002      	beq.n	8005c44 <CDC_ProcessReception+0x26>
 8005c3e:	2b04      	cmp	r3, #4
 8005c40:	d00e      	beq.n	8005c60 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8005c42:	e043      	b.n	8005ccc <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	6a19      	ldr	r1, [r3, #32]
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	8b5a      	ldrh	r2, [r3, #26]
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	7b1b      	ldrb	r3, [r3, #12]
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f001 fb07 	bl	8007264 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	2204      	movs	r2, #4
 8005c5a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005c5e:	e035      	b.n	8005ccc <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	7b1b      	ldrb	r3, [r3, #12]
 8005c64:	4619      	mov	r1, r3
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f001 fe06 	bl	8007878 <USBH_LL_GetURBState>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8005c70:	7cfb      	ldrb	r3, [r7, #19]
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d129      	bne.n	8005cca <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	7b1b      	ldrb	r3, [r3, #12]
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f001 fd69 	bl	8007754 <USBH_LL_GetLastXferSize>
 8005c82:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d016      	beq.n	8005cbc <CDC_ProcessReception+0x9e>
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	8b5b      	ldrh	r3, [r3, #26]
 8005c92:	461a      	mov	r2, r3
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d210      	bcs.n	8005cbc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	1ad2      	subs	r2, r2, r3
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	6a1a      	ldr	r2, [r3, #32]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	441a      	add	r2, r3
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	2203      	movs	r2, #3
 8005cb6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005cba:	e006      	b.n	8005cca <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 f80f 	bl	8005ce8 <USBH_CDC_ReceiveCallback>
      break;
 8005cca:	bf00      	nop
  }
}
 8005ccc:	bf00      	nop
 8005cce:	3718      	adds	r7, #24
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005cdc:	bf00      	nop
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005cf0:	bf00      	nop
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005d04:	bf00      	nop
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d101      	bne.n	8005d28 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005d24:	2302      	movs	r3, #2
 8005d26:	e029      	b.n	8005d7c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	79fa      	ldrb	r2, [r7, #7]
 8005d2c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005d40:	68f8      	ldr	r0, [r7, #12]
 8005d42:	f000 f81f 	bl	8005d84 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d003      	beq.n	8005d74 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	68ba      	ldr	r2, [r7, #8]
 8005d70:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	f001 fc3b 	bl	80075f0 <USBH_LL_Init>

  return USBH_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3710      	adds	r7, #16
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005d90:	2300      	movs	r3, #0
 8005d92:	60fb      	str	r3, [r7, #12]
 8005d94:	e009      	b.n	8005daa <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	33e0      	adds	r3, #224	; 0xe0
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	4413      	add	r3, r2
 8005da0:	2200      	movs	r2, #0
 8005da2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	3301      	adds	r3, #1
 8005da8:	60fb      	str	r3, [r7, #12]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2b0e      	cmp	r3, #14
 8005dae:	d9f2      	bls.n	8005d96 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005db0:	2300      	movs	r3, #0
 8005db2:	60fb      	str	r3, [r7, #12]
 8005db4:	e009      	b.n	8005dca <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	4413      	add	r3, r2
 8005dbc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	60fb      	str	r3, [r7, #12]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dd0:	d3f1      	bcc.n	8005db6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2201      	movs	r2, #1
 8005de2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2240      	movs	r2, #64	; 0x40
 8005df6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3714      	adds	r7, #20
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005e36:	2300      	movs	r3, #0
 8005e38:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d016      	beq.n	8005e6e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d10e      	bne.n	8005e68 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005e50:	1c59      	adds	r1, r3, #1
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	33de      	adds	r3, #222	; 0xde
 8005e5c:	6839      	ldr	r1, [r7, #0]
 8005e5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005e62:	2300      	movs	r3, #0
 8005e64:	73fb      	strb	r3, [r7, #15]
 8005e66:	e004      	b.n	8005e72 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005e68:	2302      	movs	r3, #2
 8005e6a:	73fb      	strb	r3, [r7, #15]
 8005e6c:	e001      	b.n	8005e72 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005e6e:	2302      	movs	r3, #2
 8005e70:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3714      	adds	r7, #20
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	460b      	mov	r3, r1
 8005e8a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005e96:	78fa      	ldrb	r2, [r7, #3]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d204      	bcs.n	8005ea6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	78fa      	ldrb	r2, [r7, #3]
 8005ea0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005ea4:	e001      	b.n	8005eaa <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005ea6:	2302      	movs	r3, #2
 8005ea8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3714      	adds	r7, #20
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b087      	sub	sp, #28
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	4608      	mov	r0, r1
 8005ec2:	4611      	mov	r1, r2
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	70fb      	strb	r3, [r7, #3]
 8005eca:	460b      	mov	r3, r1
 8005ecc:	70bb      	strb	r3, [r7, #2]
 8005ece:	4613      	mov	r3, r2
 8005ed0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005ee0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005ee2:	e025      	b.n	8005f30 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005ee4:	7dfb      	ldrb	r3, [r7, #23]
 8005ee6:	221a      	movs	r2, #26
 8005ee8:	fb02 f303 	mul.w	r3, r2, r3
 8005eec:	3308      	adds	r3, #8
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	3302      	adds	r3, #2
 8005ef4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	795b      	ldrb	r3, [r3, #5]
 8005efa:	78fa      	ldrb	r2, [r7, #3]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d002      	beq.n	8005f06 <USBH_FindInterface+0x4e>
 8005f00:	78fb      	ldrb	r3, [r7, #3]
 8005f02:	2bff      	cmp	r3, #255	; 0xff
 8005f04:	d111      	bne.n	8005f2a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005f0a:	78ba      	ldrb	r2, [r7, #2]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d002      	beq.n	8005f16 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005f10:	78bb      	ldrb	r3, [r7, #2]
 8005f12:	2bff      	cmp	r3, #255	; 0xff
 8005f14:	d109      	bne.n	8005f2a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005f1a:	787a      	ldrb	r2, [r7, #1]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d002      	beq.n	8005f26 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005f20:	787b      	ldrb	r3, [r7, #1]
 8005f22:	2bff      	cmp	r3, #255	; 0xff
 8005f24:	d101      	bne.n	8005f2a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005f26:	7dfb      	ldrb	r3, [r7, #23]
 8005f28:	e006      	b.n	8005f38 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005f2a:	7dfb      	ldrb	r3, [r7, #23]
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005f30:	7dfb      	ldrb	r3, [r7, #23]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d9d6      	bls.n	8005ee4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005f36:	23ff      	movs	r3, #255	; 0xff
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	371c      	adds	r7, #28
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f001 fb8b 	bl	8007668 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8005f52:	2101      	movs	r1, #1
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f001 fca2 	bl	800789e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3708      	adds	r7, #8
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b088      	sub	sp, #32
 8005f68:	af04      	add	r7, sp, #16
 8005f6a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005f6c:	2302      	movs	r3, #2
 8005f6e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005f70:	2300      	movs	r3, #0
 8005f72:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d102      	bne.n	8005f86 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2203      	movs	r2, #3
 8005f84:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	2b0b      	cmp	r3, #11
 8005f8e:	f200 81b3 	bhi.w	80062f8 <USBH_Process+0x394>
 8005f92:	a201      	add	r2, pc, #4	; (adr r2, 8005f98 <USBH_Process+0x34>)
 8005f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f98:	08005fc9 	.word	0x08005fc9
 8005f9c:	08005ffb 	.word	0x08005ffb
 8005fa0:	08006063 	.word	0x08006063
 8005fa4:	08006293 	.word	0x08006293
 8005fa8:	080062f9 	.word	0x080062f9
 8005fac:	08006107 	.word	0x08006107
 8005fb0:	08006239 	.word	0x08006239
 8005fb4:	0800613d 	.word	0x0800613d
 8005fb8:	0800615d 	.word	0x0800615d
 8005fbc:	0800617d 	.word	0x0800617d
 8005fc0:	080061ab 	.word	0x080061ab
 8005fc4:	0800627b 	.word	0x0800627b
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f000 8193 	beq.w	80062fc <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8005fdc:	20c8      	movs	r0, #200	; 0xc8
 8005fde:	f001 fca5 	bl	800792c <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f001 fb9b 	bl	800771e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005ff8:	e180      	b.n	80062fc <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006000:	2b01      	cmp	r3, #1
 8006002:	d107      	bne.n	8006014 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2202      	movs	r2, #2
 8006010:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006012:	e182      	b.n	800631a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800601a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800601e:	d914      	bls.n	800604a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006026:	3301      	adds	r3, #1
 8006028:	b2da      	uxtb	r2, r3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006036:	2b03      	cmp	r3, #3
 8006038:	d903      	bls.n	8006042 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	220d      	movs	r2, #13
 800603e:	701a      	strb	r2, [r3, #0]
      break;
 8006040:	e16b      	b.n	800631a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	701a      	strb	r2, [r3, #0]
      break;
 8006048:	e167      	b.n	800631a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006050:	f103 020a 	add.w	r2, r3, #10
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800605a:	200a      	movs	r0, #10
 800605c:	f001 fc66 	bl	800792c <USBH_Delay>
      break;
 8006060:	e15b      	b.n	800631a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006068:	2b00      	cmp	r3, #0
 800606a:	d005      	beq.n	8006078 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006072:	2104      	movs	r1, #4
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006078:	2064      	movs	r0, #100	; 0x64
 800607a:	f001 fc57 	bl	800792c <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f001 fb28 	bl	80076d4 <USBH_LL_GetSpeed>
 8006084:	4603      	mov	r3, r0
 8006086:	461a      	mov	r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2205      	movs	r2, #5
 8006092:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006094:	2100      	movs	r1, #0
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f001 f931 	bl	80072fe <USBH_AllocPipe>
 800609c:	4603      	mov	r3, r0
 800609e:	461a      	mov	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80060a4:	2180      	movs	r1, #128	; 0x80
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f001 f929 	bl	80072fe <USBH_AllocPipe>
 80060ac:	4603      	mov	r3, r0
 80060ae:	461a      	mov	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	7919      	ldrb	r1, [r3, #4]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80060c8:	b292      	uxth	r2, r2
 80060ca:	9202      	str	r2, [sp, #8]
 80060cc:	2200      	movs	r2, #0
 80060ce:	9201      	str	r2, [sp, #4]
 80060d0:	9300      	str	r3, [sp, #0]
 80060d2:	4603      	mov	r3, r0
 80060d4:	2280      	movs	r2, #128	; 0x80
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f001 f8e2 	bl	80072a0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	7959      	ldrb	r1, [r3, #5]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80060f0:	b292      	uxth	r2, r2
 80060f2:	9202      	str	r2, [sp, #8]
 80060f4:	2200      	movs	r2, #0
 80060f6:	9201      	str	r2, [sp, #4]
 80060f8:	9300      	str	r3, [sp, #0]
 80060fa:	4603      	mov	r3, r0
 80060fc:	2200      	movs	r2, #0
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f001 f8ce 	bl	80072a0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006104:	e109      	b.n	800631a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 f90c 	bl	8006324 <USBH_HandleEnum>
 800610c:	4603      	mov	r3, r0
 800610e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006110:	7bbb      	ldrb	r3, [r7, #14]
 8006112:	b2db      	uxtb	r3, r3
 8006114:	2b00      	cmp	r3, #0
 8006116:	f040 80f3 	bne.w	8006300 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006128:	2b01      	cmp	r3, #1
 800612a:	d103      	bne.n	8006134 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2208      	movs	r2, #8
 8006130:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006132:	e0e5      	b.n	8006300 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2207      	movs	r2, #7
 8006138:	701a      	strb	r2, [r3, #0]
      break;
 800613a:	e0e1      	b.n	8006300 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006142:	2b00      	cmp	r3, #0
 8006144:	f000 80de 	beq.w	8006304 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800614e:	2101      	movs	r1, #1
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2208      	movs	r2, #8
 8006158:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800615a:	e0d3      	b.n	8006304 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006162:	b29b      	uxth	r3, r3
 8006164:	4619      	mov	r1, r3
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 fc20 	bl	80069ac <USBH_SetCfg>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	f040 80ca 	bne.w	8006308 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2209      	movs	r2, #9
 8006178:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800617a:	e0c5      	b.n	8006308 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006182:	f003 0320 	and.w	r3, r3, #32
 8006186:	2b00      	cmp	r3, #0
 8006188:	d00b      	beq.n	80061a2 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800618a:	2101      	movs	r1, #1
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 fc30 	bl	80069f2 <USBH_SetFeature>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	f040 80b9 	bne.w	800630c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	220a      	movs	r2, #10
 800619e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80061a0:	e0b4      	b.n	800630c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	220a      	movs	r2, #10
 80061a6:	701a      	strb	r2, [r3, #0]
      break;
 80061a8:	e0b0      	b.n	800630c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	f000 80ad 	beq.w	8006310 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80061be:	2300      	movs	r3, #0
 80061c0:	73fb      	strb	r3, [r7, #15]
 80061c2:	e016      	b.n	80061f2 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80061c4:	7bfa      	ldrb	r2, [r7, #15]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	32de      	adds	r2, #222	; 0xde
 80061ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ce:	791a      	ldrb	r2, [r3, #4]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d108      	bne.n	80061ec <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 80061da:	7bfa      	ldrb	r2, [r7, #15]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	32de      	adds	r2, #222	; 0xde
 80061e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80061ea:	e005      	b.n	80061f8 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80061ec:	7bfb      	ldrb	r3, [r7, #15]
 80061ee:	3301      	adds	r3, #1
 80061f0:	73fb      	strb	r3, [r7, #15]
 80061f2:	7bfb      	ldrb	r3, [r7, #15]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d0e5      	beq.n	80061c4 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d016      	beq.n	8006230 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	4798      	blx	r3
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d109      	bne.n	8006228 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2206      	movs	r2, #6
 8006218:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006220:	2103      	movs	r1, #3
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006226:	e073      	b.n	8006310 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	220d      	movs	r2, #13
 800622c:	701a      	strb	r2, [r3, #0]
      break;
 800622e:	e06f      	b.n	8006310 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	220d      	movs	r2, #13
 8006234:	701a      	strb	r2, [r3, #0]
      break;
 8006236:	e06b      	b.n	8006310 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800623e:	2b00      	cmp	r3, #0
 8006240:	d017      	beq.n	8006272 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	4798      	blx	r3
 800624e:	4603      	mov	r3, r0
 8006250:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006252:	7bbb      	ldrb	r3, [r7, #14]
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b00      	cmp	r3, #0
 8006258:	d103      	bne.n	8006262 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	220b      	movs	r2, #11
 800625e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006260:	e058      	b.n	8006314 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8006262:	7bbb      	ldrb	r3, [r7, #14]
 8006264:	b2db      	uxtb	r3, r3
 8006266:	2b02      	cmp	r3, #2
 8006268:	d154      	bne.n	8006314 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	220d      	movs	r2, #13
 800626e:	701a      	strb	r2, [r3, #0]
      break;
 8006270:	e050      	b.n	8006314 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	220d      	movs	r2, #13
 8006276:	701a      	strb	r2, [r3, #0]
      break;
 8006278:	e04c      	b.n	8006314 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006280:	2b00      	cmp	r3, #0
 8006282:	d049      	beq.n	8006318 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	4798      	blx	r3
      }
      break;
 8006290:	e042      	b.n	8006318 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f7ff fd72 	bl	8005d84 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d009      	beq.n	80062be <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d005      	beq.n	80062d4 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80062ce:	2105      	movs	r1, #5
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d107      	bne.n	80062f0 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f7ff fe2b 	bl	8005f44 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80062ee:	e014      	b.n	800631a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f001 f9b9 	bl	8007668 <USBH_LL_Start>
      break;
 80062f6:	e010      	b.n	800631a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 80062f8:	bf00      	nop
 80062fa:	e00e      	b.n	800631a <USBH_Process+0x3b6>
      break;
 80062fc:	bf00      	nop
 80062fe:	e00c      	b.n	800631a <USBH_Process+0x3b6>
      break;
 8006300:	bf00      	nop
 8006302:	e00a      	b.n	800631a <USBH_Process+0x3b6>
    break;
 8006304:	bf00      	nop
 8006306:	e008      	b.n	800631a <USBH_Process+0x3b6>
      break;
 8006308:	bf00      	nop
 800630a:	e006      	b.n	800631a <USBH_Process+0x3b6>
      break;
 800630c:	bf00      	nop
 800630e:	e004      	b.n	800631a <USBH_Process+0x3b6>
      break;
 8006310:	bf00      	nop
 8006312:	e002      	b.n	800631a <USBH_Process+0x3b6>
      break;
 8006314:	bf00      	nop
 8006316:	e000      	b.n	800631a <USBH_Process+0x3b6>
      break;
 8006318:	bf00      	nop
  }
  return USBH_OK;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3710      	adds	r7, #16
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b088      	sub	sp, #32
 8006328:	af04      	add	r7, sp, #16
 800632a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800632c:	2301      	movs	r3, #1
 800632e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006330:	2301      	movs	r3, #1
 8006332:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	785b      	ldrb	r3, [r3, #1]
 8006338:	2b07      	cmp	r3, #7
 800633a:	f200 81c1 	bhi.w	80066c0 <USBH_HandleEnum+0x39c>
 800633e:	a201      	add	r2, pc, #4	; (adr r2, 8006344 <USBH_HandleEnum+0x20>)
 8006340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006344:	08006365 	.word	0x08006365
 8006348:	08006423 	.word	0x08006423
 800634c:	0800648d 	.word	0x0800648d
 8006350:	0800651b 	.word	0x0800651b
 8006354:	08006585 	.word	0x08006585
 8006358:	080065f5 	.word	0x080065f5
 800635c:	0800663b 	.word	0x0800663b
 8006360:	08006681 	.word	0x08006681
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006364:	2108      	movs	r1, #8
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 fa50 	bl	800680c <USBH_Get_DevDesc>
 800636c:	4603      	mov	r3, r0
 800636e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006370:	7bbb      	ldrb	r3, [r7, #14]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d130      	bne.n	80063d8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	7919      	ldrb	r1, [r3, #4]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800639a:	b292      	uxth	r2, r2
 800639c:	9202      	str	r2, [sp, #8]
 800639e:	2200      	movs	r2, #0
 80063a0:	9201      	str	r2, [sp, #4]
 80063a2:	9300      	str	r3, [sp, #0]
 80063a4:	4603      	mov	r3, r0
 80063a6:	2280      	movs	r2, #128	; 0x80
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 ff79 	bl	80072a0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	7959      	ldrb	r1, [r3, #5]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80063c2:	b292      	uxth	r2, r2
 80063c4:	9202      	str	r2, [sp, #8]
 80063c6:	2200      	movs	r2, #0
 80063c8:	9201      	str	r2, [sp, #4]
 80063ca:	9300      	str	r3, [sp, #0]
 80063cc:	4603      	mov	r3, r0
 80063ce:	2200      	movs	r2, #0
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 ff65 	bl	80072a0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80063d6:	e175      	b.n	80066c4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80063d8:	7bbb      	ldrb	r3, [r7, #14]
 80063da:	2b03      	cmp	r3, #3
 80063dc:	f040 8172 	bne.w	80066c4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80063e6:	3301      	adds	r3, #1
 80063e8:	b2da      	uxtb	r2, r3
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80063f6:	2b03      	cmp	r3, #3
 80063f8:	d903      	bls.n	8006402 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	220d      	movs	r2, #13
 80063fe:	701a      	strb	r2, [r3, #0]
      break;
 8006400:	e160      	b.n	80066c4 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	795b      	ldrb	r3, [r3, #5]
 8006406:	4619      	mov	r1, r3
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 ff99 	bl	8007340 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	791b      	ldrb	r3, [r3, #4]
 8006412:	4619      	mov	r1, r3
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 ff93 	bl	8007340 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	701a      	strb	r2, [r3, #0]
      break;
 8006420:	e150      	b.n	80066c4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006422:	2112      	movs	r1, #18
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 f9f1 	bl	800680c <USBH_Get_DevDesc>
 800642a:	4603      	mov	r3, r0
 800642c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800642e:	7bbb      	ldrb	r3, [r7, #14]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d103      	bne.n	800643c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2202      	movs	r2, #2
 8006438:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800643a:	e145      	b.n	80066c8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800643c:	7bbb      	ldrb	r3, [r7, #14]
 800643e:	2b03      	cmp	r3, #3
 8006440:	f040 8142 	bne.w	80066c8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800644a:	3301      	adds	r3, #1
 800644c:	b2da      	uxtb	r2, r3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800645a:	2b03      	cmp	r3, #3
 800645c:	d903      	bls.n	8006466 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	220d      	movs	r2, #13
 8006462:	701a      	strb	r2, [r3, #0]
      break;
 8006464:	e130      	b.n	80066c8 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	795b      	ldrb	r3, [r3, #5]
 800646a:	4619      	mov	r1, r3
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 ff67 	bl	8007340 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	791b      	ldrb	r3, [r3, #4]
 8006476:	4619      	mov	r1, r3
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 ff61 	bl	8007340 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	701a      	strb	r2, [r3, #0]
      break;
 800648a:	e11d      	b.n	80066c8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800648c:	2101      	movs	r1, #1
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 fa68 	bl	8006964 <USBH_SetAddress>
 8006494:	4603      	mov	r3, r0
 8006496:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006498:	7bbb      	ldrb	r3, [r7, #14]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d132      	bne.n	8006504 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800649e:	2002      	movs	r0, #2
 80064a0:	f001 fa44 	bl	800792c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2203      	movs	r2, #3
 80064b0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	7919      	ldrb	r1, [r3, #4]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80064c6:	b292      	uxth	r2, r2
 80064c8:	9202      	str	r2, [sp, #8]
 80064ca:	2200      	movs	r2, #0
 80064cc:	9201      	str	r2, [sp, #4]
 80064ce:	9300      	str	r3, [sp, #0]
 80064d0:	4603      	mov	r3, r0
 80064d2:	2280      	movs	r2, #128	; 0x80
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 fee3 	bl	80072a0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	7959      	ldrb	r1, [r3, #5]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80064ee:	b292      	uxth	r2, r2
 80064f0:	9202      	str	r2, [sp, #8]
 80064f2:	2200      	movs	r2, #0
 80064f4:	9201      	str	r2, [sp, #4]
 80064f6:	9300      	str	r3, [sp, #0]
 80064f8:	4603      	mov	r3, r0
 80064fa:	2200      	movs	r2, #0
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 fecf 	bl	80072a0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006502:	e0e3      	b.n	80066cc <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006504:	7bbb      	ldrb	r3, [r7, #14]
 8006506:	2b03      	cmp	r3, #3
 8006508:	f040 80e0 	bne.w	80066cc <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	220d      	movs	r2, #13
 8006510:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	705a      	strb	r2, [r3, #1]
      break;
 8006518:	e0d8      	b.n	80066cc <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800651a:	2109      	movs	r1, #9
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 f99d 	bl	800685c <USBH_Get_CfgDesc>
 8006522:	4603      	mov	r3, r0
 8006524:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006526:	7bbb      	ldrb	r3, [r7, #14]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d103      	bne.n	8006534 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2204      	movs	r2, #4
 8006530:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006532:	e0cd      	b.n	80066d0 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006534:	7bbb      	ldrb	r3, [r7, #14]
 8006536:	2b03      	cmp	r3, #3
 8006538:	f040 80ca 	bne.w	80066d0 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006542:	3301      	adds	r3, #1
 8006544:	b2da      	uxtb	r2, r3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006552:	2b03      	cmp	r3, #3
 8006554:	d903      	bls.n	800655e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	220d      	movs	r2, #13
 800655a:	701a      	strb	r2, [r3, #0]
      break;
 800655c:	e0b8      	b.n	80066d0 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	795b      	ldrb	r3, [r3, #5]
 8006562:	4619      	mov	r1, r3
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 feeb 	bl	8007340 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	791b      	ldrb	r3, [r3, #4]
 800656e:	4619      	mov	r1, r3
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 fee5 	bl	8007340 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	701a      	strb	r2, [r3, #0]
      break;
 8006582:	e0a5      	b.n	80066d0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800658a:	4619      	mov	r1, r3
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 f965 	bl	800685c <USBH_Get_CfgDesc>
 8006592:	4603      	mov	r3, r0
 8006594:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006596:	7bbb      	ldrb	r3, [r7, #14]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d103      	bne.n	80065a4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2205      	movs	r2, #5
 80065a0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80065a2:	e097      	b.n	80066d4 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80065a4:	7bbb      	ldrb	r3, [r7, #14]
 80065a6:	2b03      	cmp	r3, #3
 80065a8:	f040 8094 	bne.w	80066d4 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80065b2:	3301      	adds	r3, #1
 80065b4:	b2da      	uxtb	r2, r3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80065c2:	2b03      	cmp	r3, #3
 80065c4:	d903      	bls.n	80065ce <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	220d      	movs	r2, #13
 80065ca:	701a      	strb	r2, [r3, #0]
      break;
 80065cc:	e082      	b.n	80066d4 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	795b      	ldrb	r3, [r3, #5]
 80065d2:	4619      	mov	r1, r3
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f000 feb3 	bl	8007340 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	791b      	ldrb	r3, [r3, #4]
 80065de:	4619      	mov	r1, r3
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 fead 	bl	8007340 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	701a      	strb	r2, [r3, #0]
      break;
 80065f2:	e06f      	b.n	80066d4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d019      	beq.n	8006632 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800660a:	23ff      	movs	r3, #255	; 0xff
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 f949 	bl	80068a4 <USBH_Get_StringDesc>
 8006612:	4603      	mov	r3, r0
 8006614:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006616:	7bbb      	ldrb	r3, [r7, #14]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d103      	bne.n	8006624 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2206      	movs	r2, #6
 8006620:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006622:	e059      	b.n	80066d8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006624:	7bbb      	ldrb	r3, [r7, #14]
 8006626:	2b03      	cmp	r3, #3
 8006628:	d156      	bne.n	80066d8 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2206      	movs	r2, #6
 800662e:	705a      	strb	r2, [r3, #1]
      break;
 8006630:	e052      	b.n	80066d8 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2206      	movs	r2, #6
 8006636:	705a      	strb	r2, [r3, #1]
      break;
 8006638:	e04e      	b.n	80066d8 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006640:	2b00      	cmp	r3, #0
 8006642:	d019      	beq.n	8006678 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006650:	23ff      	movs	r3, #255	; 0xff
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 f926 	bl	80068a4 <USBH_Get_StringDesc>
 8006658:	4603      	mov	r3, r0
 800665a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800665c:	7bbb      	ldrb	r3, [r7, #14]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d103      	bne.n	800666a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2207      	movs	r2, #7
 8006666:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006668:	e038      	b.n	80066dc <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800666a:	7bbb      	ldrb	r3, [r7, #14]
 800666c:	2b03      	cmp	r3, #3
 800666e:	d135      	bne.n	80066dc <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2207      	movs	r2, #7
 8006674:	705a      	strb	r2, [r3, #1]
      break;
 8006676:	e031      	b.n	80066dc <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2207      	movs	r2, #7
 800667c:	705a      	strb	r2, [r3, #1]
      break;
 800667e:	e02d      	b.n	80066dc <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006686:	2b00      	cmp	r3, #0
 8006688:	d017      	beq.n	80066ba <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006696:	23ff      	movs	r3, #255	; 0xff
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 f903 	bl	80068a4 <USBH_Get_StringDesc>
 800669e:	4603      	mov	r3, r0
 80066a0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80066a2:	7bbb      	ldrb	r3, [r7, #14]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d102      	bne.n	80066ae <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80066a8:	2300      	movs	r3, #0
 80066aa:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80066ac:	e018      	b.n	80066e0 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80066ae:	7bbb      	ldrb	r3, [r7, #14]
 80066b0:	2b03      	cmp	r3, #3
 80066b2:	d115      	bne.n	80066e0 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80066b4:	2300      	movs	r3, #0
 80066b6:	73fb      	strb	r3, [r7, #15]
      break;
 80066b8:	e012      	b.n	80066e0 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80066ba:	2300      	movs	r3, #0
 80066bc:	73fb      	strb	r3, [r7, #15]
      break;
 80066be:	e00f      	b.n	80066e0 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80066c0:	bf00      	nop
 80066c2:	e00e      	b.n	80066e2 <USBH_HandleEnum+0x3be>
      break;
 80066c4:	bf00      	nop
 80066c6:	e00c      	b.n	80066e2 <USBH_HandleEnum+0x3be>
      break;
 80066c8:	bf00      	nop
 80066ca:	e00a      	b.n	80066e2 <USBH_HandleEnum+0x3be>
      break;
 80066cc:	bf00      	nop
 80066ce:	e008      	b.n	80066e2 <USBH_HandleEnum+0x3be>
      break;
 80066d0:	bf00      	nop
 80066d2:	e006      	b.n	80066e2 <USBH_HandleEnum+0x3be>
      break;
 80066d4:	bf00      	nop
 80066d6:	e004      	b.n	80066e2 <USBH_HandleEnum+0x3be>
      break;
 80066d8:	bf00      	nop
 80066da:	e002      	b.n	80066e2 <USBH_HandleEnum+0x3be>
      break;
 80066dc:	bf00      	nop
 80066de:	e000      	b.n	80066e2 <USBH_HandleEnum+0x3be>
      break;
 80066e0:	bf00      	nop
  }
  return Status;
 80066e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3710      	adds	r7, #16
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	683a      	ldr	r2, [r7, #0]
 80066fa:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80066fe:	bf00      	nop
 8006700:	370c      	adds	r7, #12
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr

0800670a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800670a:	b580      	push	{r7, lr}
 800670c:	b082      	sub	sp, #8
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006718:	1c5a      	adds	r2, r3, #1
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 f804 	bl	800672e <USBH_HandleSof>
}
 8006726:	bf00      	nop
 8006728:	3708      	adds	r7, #8
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b082      	sub	sp, #8
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	b2db      	uxtb	r3, r3
 800673c:	2b0b      	cmp	r3, #11
 800673e:	d10a      	bne.n	8006756 <USBH_HandleSof+0x28>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006746:	2b00      	cmp	r3, #0
 8006748:	d005      	beq.n	8006756 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006750:	699b      	ldr	r3, [r3, #24]
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	4798      	blx	r3
  }
}
 8006756:	bf00      	nop
 8006758:	3708      	adds	r7, #8
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}

0800675e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800675e:	b480      	push	{r7}
 8006760:	b083      	sub	sp, #12
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2201      	movs	r2, #1
 800676a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800676e:	bf00      	nop
}
 8006770:	370c      	adds	r7, #12
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr

0800677a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800677a:	b480      	push	{r7}
 800677c:	b083      	sub	sp, #12
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800678a:	bf00      	nop
}
 800678c:	370c      	adds	r7, #12
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr

08006796 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006796:	b480      	push	{r7}
 8006798:	b083      	sub	sp, #12
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2201      	movs	r2, #1
 80067a2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	370c      	adds	r7, #12
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b082      	sub	sp, #8
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 ff5a 	bl	800769e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	791b      	ldrb	r3, [r3, #4]
 80067ee:	4619      	mov	r1, r3
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 fda5 	bl	8007340 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	795b      	ldrb	r3, [r3, #5]
 80067fa:	4619      	mov	r1, r3
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 fd9f 	bl	8007340 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	3708      	adds	r7, #8
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b086      	sub	sp, #24
 8006810:	af02      	add	r7, sp, #8
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	460b      	mov	r3, r1
 8006816:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800681e:	78fb      	ldrb	r3, [r7, #3]
 8006820:	b29b      	uxth	r3, r3
 8006822:	9300      	str	r3, [sp, #0]
 8006824:	4613      	mov	r3, r2
 8006826:	f44f 7280 	mov.w	r2, #256	; 0x100
 800682a:	2100      	movs	r1, #0
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 f864 	bl	80068fa <USBH_GetDescriptor>
 8006832:	4603      	mov	r3, r0
 8006834:	73fb      	strb	r3, [r7, #15]
 8006836:	7bfb      	ldrb	r3, [r7, #15]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d10a      	bne.n	8006852 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006848:	78fa      	ldrb	r2, [r7, #3]
 800684a:	b292      	uxth	r2, r2
 800684c:	4619      	mov	r1, r3
 800684e:	f000 f918 	bl	8006a82 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8006852:	7bfb      	ldrb	r3, [r7, #15]
}
 8006854:	4618      	mov	r0, r3
 8006856:	3710      	adds	r7, #16
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800685c:	b580      	push	{r7, lr}
 800685e:	b086      	sub	sp, #24
 8006860:	af02      	add	r7, sp, #8
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	460b      	mov	r3, r1
 8006866:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	331c      	adds	r3, #28
 800686c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800686e:	887b      	ldrh	r3, [r7, #2]
 8006870:	9300      	str	r3, [sp, #0]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006878:	2100      	movs	r1, #0
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 f83d 	bl	80068fa <USBH_GetDescriptor>
 8006880:	4603      	mov	r3, r0
 8006882:	72fb      	strb	r3, [r7, #11]
 8006884:	7afb      	ldrb	r3, [r7, #11]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d107      	bne.n	800689a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006890:	887a      	ldrh	r2, [r7, #2]
 8006892:	68f9      	ldr	r1, [r7, #12]
 8006894:	4618      	mov	r0, r3
 8006896:	f000 f964 	bl	8006b62 <USBH_ParseCfgDesc>
  }

  return status;
 800689a:	7afb      	ldrb	r3, [r7, #11]
}
 800689c:	4618      	mov	r0, r3
 800689e:	3710      	adds	r7, #16
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b088      	sub	sp, #32
 80068a8:	af02      	add	r7, sp, #8
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	607a      	str	r2, [r7, #4]
 80068ae:	461a      	mov	r2, r3
 80068b0:	460b      	mov	r3, r1
 80068b2:	72fb      	strb	r3, [r7, #11]
 80068b4:	4613      	mov	r3, r2
 80068b6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80068b8:	7afb      	ldrb	r3, [r7, #11]
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80068c0:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80068c8:	893b      	ldrh	r3, [r7, #8]
 80068ca:	9300      	str	r3, [sp, #0]
 80068cc:	460b      	mov	r3, r1
 80068ce:	2100      	movs	r1, #0
 80068d0:	68f8      	ldr	r0, [r7, #12]
 80068d2:	f000 f812 	bl	80068fa <USBH_GetDescriptor>
 80068d6:	4603      	mov	r3, r0
 80068d8:	75fb      	strb	r3, [r7, #23]
 80068da:	7dfb      	ldrb	r3, [r7, #23]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d107      	bne.n	80068f0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80068e6:	893a      	ldrh	r2, [r7, #8]
 80068e8:	6879      	ldr	r1, [r7, #4]
 80068ea:	4618      	mov	r0, r3
 80068ec:	f000 fa37 	bl	8006d5e <USBH_ParseStringDesc>
  }

  return status;
 80068f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3718      	adds	r7, #24
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}

080068fa <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80068fa:	b580      	push	{r7, lr}
 80068fc:	b084      	sub	sp, #16
 80068fe:	af00      	add	r7, sp, #0
 8006900:	60f8      	str	r0, [r7, #12]
 8006902:	607b      	str	r3, [r7, #4]
 8006904:	460b      	mov	r3, r1
 8006906:	72fb      	strb	r3, [r7, #11]
 8006908:	4613      	mov	r3, r2
 800690a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	789b      	ldrb	r3, [r3, #2]
 8006910:	2b01      	cmp	r3, #1
 8006912:	d11c      	bne.n	800694e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006914:	7afb      	ldrb	r3, [r7, #11]
 8006916:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800691a:	b2da      	uxtb	r2, r3
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2206      	movs	r2, #6
 8006924:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	893a      	ldrh	r2, [r7, #8]
 800692a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800692c:	893b      	ldrh	r3, [r7, #8]
 800692e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006932:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006936:	d104      	bne.n	8006942 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f240 4209 	movw	r2, #1033	; 0x409
 800693e:	829a      	strh	r2, [r3, #20]
 8006940:	e002      	b.n	8006948 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2200      	movs	r2, #0
 8006946:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	8b3a      	ldrh	r2, [r7, #24]
 800694c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800694e:	8b3b      	ldrh	r3, [r7, #24]
 8006950:	461a      	mov	r2, r3
 8006952:	6879      	ldr	r1, [r7, #4]
 8006954:	68f8      	ldr	r0, [r7, #12]
 8006956:	f000 fa50 	bl	8006dfa <USBH_CtlReq>
 800695a:	4603      	mov	r3, r0
}
 800695c:	4618      	mov	r0, r3
 800695e:	3710      	adds	r7, #16
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	460b      	mov	r3, r1
 800696e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	789b      	ldrb	r3, [r3, #2]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d10f      	bne.n	8006998 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2205      	movs	r2, #5
 8006982:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006984:	78fb      	ldrb	r3, [r7, #3]
 8006986:	b29a      	uxth	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006998:	2200      	movs	r2, #0
 800699a:	2100      	movs	r1, #0
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 fa2c 	bl	8006dfa <USBH_CtlReq>
 80069a2:	4603      	mov	r3, r0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3708      	adds	r7, #8
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b082      	sub	sp, #8
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	460b      	mov	r3, r1
 80069b6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	789b      	ldrb	r3, [r3, #2]
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d10e      	bne.n	80069de <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2209      	movs	r2, #9
 80069ca:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	887a      	ldrh	r2, [r7, #2]
 80069d0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80069de:	2200      	movs	r2, #0
 80069e0:	2100      	movs	r1, #0
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 fa09 	bl	8006dfa <USBH_CtlReq>
 80069e8:	4603      	mov	r3, r0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3708      	adds	r7, #8
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80069f2:	b580      	push	{r7, lr}
 80069f4:	b082      	sub	sp, #8
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
 80069fa:	460b      	mov	r3, r1
 80069fc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	789b      	ldrb	r3, [r3, #2]
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d10f      	bne.n	8006a26 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2203      	movs	r2, #3
 8006a10:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006a12:	78fb      	ldrb	r3, [r7, #3]
 8006a14:	b29a      	uxth	r2, r3
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006a26:	2200      	movs	r2, #0
 8006a28:	2100      	movs	r1, #0
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 f9e5 	bl	8006dfa <USBH_CtlReq>
 8006a30:	4603      	mov	r3, r0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3708      	adds	r7, #8
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}

08006a3a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006a3a:	b580      	push	{r7, lr}
 8006a3c:	b082      	sub	sp, #8
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
 8006a42:	460b      	mov	r3, r1
 8006a44:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	789b      	ldrb	r3, [r3, #2]
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d10f      	bne.n	8006a6e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2202      	movs	r2, #2
 8006a52:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006a60:	78fb      	ldrb	r3, [r7, #3]
 8006a62:	b29a      	uxth	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8006a6e:	2200      	movs	r2, #0
 8006a70:	2100      	movs	r1, #0
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 f9c1 	bl	8006dfa <USBH_CtlReq>
 8006a78:	4603      	mov	r3, r0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3708      	adds	r7, #8
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8006a82:	b480      	push	{r7}
 8006a84:	b085      	sub	sp, #20
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	60f8      	str	r0, [r7, #12]
 8006a8a:	60b9      	str	r1, [r7, #8]
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	781a      	ldrb	r2, [r3, #0]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	785a      	ldrb	r2, [r3, #1]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	3302      	adds	r3, #2
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	b29a      	uxth	r2, r3
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	3303      	adds	r3, #3
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	021b      	lsls	r3, r3, #8
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	b29a      	uxth	r2, r3
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	791a      	ldrb	r2, [r3, #4]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	795a      	ldrb	r2, [r3, #5]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	799a      	ldrb	r2, [r3, #6]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	79da      	ldrb	r2, [r3, #7]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8006adc:	88fb      	ldrh	r3, [r7, #6]
 8006ade:	2b08      	cmp	r3, #8
 8006ae0:	d939      	bls.n	8006b56 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	3308      	adds	r3, #8
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	b29a      	uxth	r2, r3
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	3309      	adds	r3, #9
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	021b      	lsls	r3, r3, #8
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	4313      	orrs	r3, r2
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	330a      	adds	r3, #10
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	b29a      	uxth	r2, r3
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	330b      	adds	r3, #11
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	021b      	lsls	r3, r3, #8
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	4313      	orrs	r3, r2
 8006b14:	b29a      	uxth	r2, r3
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	330c      	adds	r3, #12
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	b29a      	uxth	r2, r3
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	330d      	adds	r3, #13
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	021b      	lsls	r3, r3, #8
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	b29a      	uxth	r2, r3
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	7b9a      	ldrb	r2, [r3, #14]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	7bda      	ldrb	r2, [r3, #15]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	7c1a      	ldrb	r2, [r3, #16]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	7c5a      	ldrb	r2, [r3, #17]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	745a      	strb	r2, [r3, #17]
  }
}
 8006b56:	bf00      	nop
 8006b58:	3714      	adds	r7, #20
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr

08006b62 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b08a      	sub	sp, #40	; 0x28
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	60f8      	str	r0, [r7, #12]
 8006b6a:	60b9      	str	r1, [r7, #8]
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006b74:	2300      	movs	r3, #0
 8006b76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	781a      	ldrb	r2, [r3, #0]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	785a      	ldrb	r2, [r3, #1]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	3302      	adds	r3, #2
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	b29a      	uxth	r2, r3
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	3303      	adds	r3, #3
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	021b      	lsls	r3, r3, #8
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	b29a      	uxth	r2, r3
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	791a      	ldrb	r2, [r3, #4]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	795a      	ldrb	r2, [r3, #5]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	799a      	ldrb	r2, [r3, #6]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	79da      	ldrb	r2, [r3, #7]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	7a1a      	ldrb	r2, [r3, #8]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006bd8:	88fb      	ldrh	r3, [r7, #6]
 8006bda:	2b09      	cmp	r3, #9
 8006bdc:	d95f      	bls.n	8006c9e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8006bde:	2309      	movs	r3, #9
 8006be0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8006be2:	2300      	movs	r3, #0
 8006be4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006be6:	e051      	b.n	8006c8c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006be8:	f107 0316 	add.w	r3, r7, #22
 8006bec:	4619      	mov	r1, r3
 8006bee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006bf0:	f000 f8e8 	bl	8006dc4 <USBH_GetNextDesc>
 8006bf4:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf8:	785b      	ldrb	r3, [r3, #1]
 8006bfa:	2b04      	cmp	r3, #4
 8006bfc:	d146      	bne.n	8006c8c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8006bfe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c02:	221a      	movs	r2, #26
 8006c04:	fb02 f303 	mul.w	r3, r2, r3
 8006c08:	3308      	adds	r3, #8
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	3302      	adds	r3, #2
 8006c10:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006c12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c14:	69f8      	ldr	r0, [r7, #28]
 8006c16:	f000 f846 	bl	8006ca6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8006c20:	2300      	movs	r3, #0
 8006c22:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006c24:	e022      	b.n	8006c6c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006c26:	f107 0316 	add.w	r3, r7, #22
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c2e:	f000 f8c9 	bl	8006dc4 <USBH_GetNextDesc>
 8006c32:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8006c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c36:	785b      	ldrb	r3, [r3, #1]
 8006c38:	2b05      	cmp	r3, #5
 8006c3a:	d117      	bne.n	8006c6c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006c3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c40:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006c44:	3201      	adds	r2, #1
 8006c46:	00d2      	lsls	r2, r2, #3
 8006c48:	211a      	movs	r1, #26
 8006c4a:	fb01 f303 	mul.w	r3, r1, r3
 8006c4e:	4413      	add	r3, r2
 8006c50:	3308      	adds	r3, #8
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	4413      	add	r3, r2
 8006c56:	3304      	adds	r3, #4
 8006c58:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8006c5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c5c:	69b8      	ldr	r0, [r7, #24]
 8006c5e:	f000 f851 	bl	8006d04 <USBH_ParseEPDesc>
            ep_ix++;
 8006c62:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006c66:	3301      	adds	r3, #1
 8006c68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	791b      	ldrb	r3, [r3, #4]
 8006c70:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d204      	bcs.n	8006c82 <USBH_ParseCfgDesc+0x120>
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	885a      	ldrh	r2, [r3, #2]
 8006c7c:	8afb      	ldrh	r3, [r7, #22]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d8d1      	bhi.n	8006c26 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8006c82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c86:	3301      	adds	r3, #1
 8006c88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006c8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d804      	bhi.n	8006c9e <USBH_ParseCfgDesc+0x13c>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	885a      	ldrh	r2, [r3, #2]
 8006c98:	8afb      	ldrh	r3, [r7, #22]
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d8a4      	bhi.n	8006be8 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8006c9e:	bf00      	nop
 8006ca0:	3728      	adds	r7, #40	; 0x28
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8006ca6:	b480      	push	{r7}
 8006ca8:	b083      	sub	sp, #12
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
 8006cae:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	781a      	ldrb	r2, [r3, #0]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	785a      	ldrb	r2, [r3, #1]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	789a      	ldrb	r2, [r3, #2]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	78da      	ldrb	r2, [r3, #3]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	791a      	ldrb	r2, [r3, #4]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	795a      	ldrb	r2, [r3, #5]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	799a      	ldrb	r2, [r3, #6]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	79da      	ldrb	r2, [r3, #7]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	7a1a      	ldrb	r2, [r3, #8]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	721a      	strb	r2, [r3, #8]
}
 8006cf8:	bf00      	nop
 8006cfa:	370c      	adds	r7, #12
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	781a      	ldrb	r2, [r3, #0]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	785a      	ldrb	r2, [r3, #1]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	789a      	ldrb	r2, [r3, #2]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	78da      	ldrb	r2, [r3, #3]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	3304      	adds	r3, #4
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	b29a      	uxth	r2, r3
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	3305      	adds	r3, #5
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	021b      	lsls	r3, r3, #8
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	4313      	orrs	r3, r2
 8006d44:	b29a      	uxth	r2, r3
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	799a      	ldrb	r2, [r3, #6]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	719a      	strb	r2, [r3, #6]
}
 8006d52:	bf00      	nop
 8006d54:	370c      	adds	r7, #12
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr

08006d5e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006d5e:	b480      	push	{r7}
 8006d60:	b087      	sub	sp, #28
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	60f8      	str	r0, [r7, #12]
 8006d66:	60b9      	str	r1, [r7, #8]
 8006d68:	4613      	mov	r3, r2
 8006d6a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	3301      	adds	r3, #1
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	2b03      	cmp	r3, #3
 8006d74:	d120      	bne.n	8006db8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	1e9a      	subs	r2, r3, #2
 8006d7c:	88fb      	ldrh	r3, [r7, #6]
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	bf28      	it	cs
 8006d82:	4613      	movcs	r3, r2
 8006d84:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	3302      	adds	r3, #2
 8006d8a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	82fb      	strh	r3, [r7, #22]
 8006d90:	e00b      	b.n	8006daa <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006d92:	8afb      	ldrh	r3, [r7, #22]
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	4413      	add	r3, r2
 8006d98:	781a      	ldrb	r2, [r3, #0]
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	3301      	adds	r3, #1
 8006da2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006da4:	8afb      	ldrh	r3, [r7, #22]
 8006da6:	3302      	adds	r3, #2
 8006da8:	82fb      	strh	r3, [r7, #22]
 8006daa:	8afa      	ldrh	r2, [r7, #22]
 8006dac:	8abb      	ldrh	r3, [r7, #20]
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d3ef      	bcc.n	8006d92 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	2200      	movs	r2, #0
 8006db6:	701a      	strb	r2, [r3, #0]
  }
}
 8006db8:	bf00      	nop
 8006dba:	371c      	adds	r7, #28
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b085      	sub	sp, #20
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	881a      	ldrh	r2, [r3, #0]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	4413      	add	r3, r2
 8006dda:	b29a      	uxth	r2, r3
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4413      	add	r3, r2
 8006dea:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006dec:	68fb      	ldr	r3, [r7, #12]
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3714      	adds	r7, #20
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr

08006dfa <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b086      	sub	sp, #24
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	60f8      	str	r0, [r7, #12]
 8006e02:	60b9      	str	r1, [r7, #8]
 8006e04:	4613      	mov	r3, r2
 8006e06:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	789b      	ldrb	r3, [r3, #2]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d002      	beq.n	8006e1a <USBH_CtlReq+0x20>
 8006e14:	2b02      	cmp	r3, #2
 8006e16:	d00f      	beq.n	8006e38 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006e18:	e027      	b.n	8006e6a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	68ba      	ldr	r2, [r7, #8]
 8006e1e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	88fa      	ldrh	r2, [r7, #6]
 8006e24:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2202      	movs	r2, #2
 8006e30:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006e32:	2301      	movs	r3, #1
 8006e34:	75fb      	strb	r3, [r7, #23]
      break;
 8006e36:	e018      	b.n	8006e6a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006e38:	68f8      	ldr	r0, [r7, #12]
 8006e3a:	f000 f81b 	bl	8006e74 <USBH_HandleControl>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006e42:	7dfb      	ldrb	r3, [r7, #23]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d002      	beq.n	8006e4e <USBH_CtlReq+0x54>
 8006e48:	7dfb      	ldrb	r3, [r7, #23]
 8006e4a:	2b03      	cmp	r3, #3
 8006e4c:	d106      	bne.n	8006e5c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2201      	movs	r2, #1
 8006e52:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2200      	movs	r2, #0
 8006e58:	761a      	strb	r2, [r3, #24]
      break;
 8006e5a:	e005      	b.n	8006e68 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8006e5c:	7dfb      	ldrb	r3, [r7, #23]
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d102      	bne.n	8006e68 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2201      	movs	r2, #1
 8006e66:	709a      	strb	r2, [r3, #2]
      break;
 8006e68:	bf00      	nop
  }
  return status;
 8006e6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3718      	adds	r7, #24
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b086      	sub	sp, #24
 8006e78:	af02      	add	r7, sp, #8
 8006e7a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006e80:	2300      	movs	r3, #0
 8006e82:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	7e1b      	ldrb	r3, [r3, #24]
 8006e88:	3b01      	subs	r3, #1
 8006e8a:	2b0a      	cmp	r3, #10
 8006e8c:	f200 8158 	bhi.w	8007140 <USBH_HandleControl+0x2cc>
 8006e90:	a201      	add	r2, pc, #4	; (adr r2, 8006e98 <USBH_HandleControl+0x24>)
 8006e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e96:	bf00      	nop
 8006e98:	08006ec5 	.word	0x08006ec5
 8006e9c:	08006edf 	.word	0x08006edf
 8006ea0:	08006f49 	.word	0x08006f49
 8006ea4:	08006f6f 	.word	0x08006f6f
 8006ea8:	08006fa7 	.word	0x08006fa7
 8006eac:	08006fd3 	.word	0x08006fd3
 8006eb0:	08007025 	.word	0x08007025
 8006eb4:	08007047 	.word	0x08007047
 8006eb8:	08007083 	.word	0x08007083
 8006ebc:	080070ab 	.word	0x080070ab
 8006ec0:	080070e9 	.word	0x080070e9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f103 0110 	add.w	r1, r3, #16
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	795b      	ldrb	r3, [r3, #5]
 8006ece:	461a      	mov	r2, r3
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 f945 	bl	8007160 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2202      	movs	r2, #2
 8006eda:	761a      	strb	r2, [r3, #24]
      break;
 8006edc:	e13b      	b.n	8007156 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	795b      	ldrb	r3, [r3, #5]
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 fcc7 	bl	8007878 <USBH_LL_GetURBState>
 8006eea:	4603      	mov	r3, r0
 8006eec:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8006eee:	7bbb      	ldrb	r3, [r7, #14]
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d11e      	bne.n	8006f32 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	7c1b      	ldrb	r3, [r3, #16]
 8006ef8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006efc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	8adb      	ldrh	r3, [r3, #22]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d00a      	beq.n	8006f1c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8006f06:	7b7b      	ldrb	r3, [r7, #13]
 8006f08:	2b80      	cmp	r3, #128	; 0x80
 8006f0a:	d103      	bne.n	8006f14 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2203      	movs	r2, #3
 8006f10:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006f12:	e117      	b.n	8007144 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2205      	movs	r2, #5
 8006f18:	761a      	strb	r2, [r3, #24]
      break;
 8006f1a:	e113      	b.n	8007144 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 8006f1c:	7b7b      	ldrb	r3, [r7, #13]
 8006f1e:	2b80      	cmp	r3, #128	; 0x80
 8006f20:	d103      	bne.n	8006f2a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2209      	movs	r2, #9
 8006f26:	761a      	strb	r2, [r3, #24]
      break;
 8006f28:	e10c      	b.n	8007144 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2207      	movs	r2, #7
 8006f2e:	761a      	strb	r2, [r3, #24]
      break;
 8006f30:	e108      	b.n	8007144 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006f32:	7bbb      	ldrb	r3, [r7, #14]
 8006f34:	2b04      	cmp	r3, #4
 8006f36:	d003      	beq.n	8006f40 <USBH_HandleControl+0xcc>
 8006f38:	7bbb      	ldrb	r3, [r7, #14]
 8006f3a:	2b02      	cmp	r3, #2
 8006f3c:	f040 8102 	bne.w	8007144 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	220b      	movs	r2, #11
 8006f44:	761a      	strb	r2, [r3, #24]
      break;
 8006f46:	e0fd      	b.n	8007144 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006f4e:	b29a      	uxth	r2, r3
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6899      	ldr	r1, [r3, #8]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	899a      	ldrh	r2, [r3, #12]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	791b      	ldrb	r3, [r3, #4]
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 f93c 	bl	80071de <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2204      	movs	r2, #4
 8006f6a:	761a      	strb	r2, [r3, #24]
      break;
 8006f6c:	e0f3      	b.n	8007156 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	791b      	ldrb	r3, [r3, #4]
 8006f72:	4619      	mov	r1, r3
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 fc7f 	bl	8007878 <USBH_LL_GetURBState>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8006f7e:	7bbb      	ldrb	r3, [r7, #14]
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d102      	bne.n	8006f8a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2209      	movs	r2, #9
 8006f88:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8006f8a:	7bbb      	ldrb	r3, [r7, #14]
 8006f8c:	2b05      	cmp	r3, #5
 8006f8e:	d102      	bne.n	8006f96 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8006f90:	2303      	movs	r3, #3
 8006f92:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006f94:	e0d8      	b.n	8007148 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8006f96:	7bbb      	ldrb	r3, [r7, #14]
 8006f98:	2b04      	cmp	r3, #4
 8006f9a:	f040 80d5 	bne.w	8007148 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	220b      	movs	r2, #11
 8006fa2:	761a      	strb	r2, [r3, #24]
      break;
 8006fa4:	e0d0      	b.n	8007148 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6899      	ldr	r1, [r3, #8]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	899a      	ldrh	r2, [r3, #12]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	7958      	ldrb	r0, [r3, #5]
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	9300      	str	r3, [sp, #0]
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 f8eb 	bl	8007194 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006fc4:	b29a      	uxth	r2, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2206      	movs	r2, #6
 8006fce:	761a      	strb	r2, [r3, #24]
      break;
 8006fd0:	e0c1      	b.n	8007156 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	795b      	ldrb	r3, [r3, #5]
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 fc4d 	bl	8007878 <USBH_LL_GetURBState>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006fe2:	7bbb      	ldrb	r3, [r7, #14]
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d103      	bne.n	8006ff0 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2207      	movs	r2, #7
 8006fec:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006fee:	e0ad      	b.n	800714c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 8006ff0:	7bbb      	ldrb	r3, [r7, #14]
 8006ff2:	2b05      	cmp	r3, #5
 8006ff4:	d105      	bne.n	8007002 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	220c      	movs	r2, #12
 8006ffa:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8006ffc:	2303      	movs	r3, #3
 8006ffe:	73fb      	strb	r3, [r7, #15]
      break;
 8007000:	e0a4      	b.n	800714c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007002:	7bbb      	ldrb	r3, [r7, #14]
 8007004:	2b02      	cmp	r3, #2
 8007006:	d103      	bne.n	8007010 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2205      	movs	r2, #5
 800700c:	761a      	strb	r2, [r3, #24]
      break;
 800700e:	e09d      	b.n	800714c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 8007010:	7bbb      	ldrb	r3, [r7, #14]
 8007012:	2b04      	cmp	r3, #4
 8007014:	f040 809a 	bne.w	800714c <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	220b      	movs	r2, #11
 800701c:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800701e:	2302      	movs	r3, #2
 8007020:	73fb      	strb	r3, [r7, #15]
      break;
 8007022:	e093      	b.n	800714c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	791b      	ldrb	r3, [r3, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	2100      	movs	r1, #0
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 f8d6 	bl	80071de <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007038:	b29a      	uxth	r2, r3
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2208      	movs	r2, #8
 8007042:	761a      	strb	r2, [r3, #24]

      break;
 8007044:	e087      	b.n	8007156 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	791b      	ldrb	r3, [r3, #4]
 800704a:	4619      	mov	r1, r3
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 fc13 	bl	8007878 <USBH_LL_GetURBState>
 8007052:	4603      	mov	r3, r0
 8007054:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007056:	7bbb      	ldrb	r3, [r7, #14]
 8007058:	2b01      	cmp	r3, #1
 800705a:	d105      	bne.n	8007068 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	220d      	movs	r2, #13
 8007060:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007062:	2300      	movs	r3, #0
 8007064:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007066:	e073      	b.n	8007150 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8007068:	7bbb      	ldrb	r3, [r7, #14]
 800706a:	2b04      	cmp	r3, #4
 800706c:	d103      	bne.n	8007076 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	220b      	movs	r2, #11
 8007072:	761a      	strb	r2, [r3, #24]
      break;
 8007074:	e06c      	b.n	8007150 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 8007076:	7bbb      	ldrb	r3, [r7, #14]
 8007078:	2b05      	cmp	r3, #5
 800707a:	d169      	bne.n	8007150 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 800707c:	2303      	movs	r3, #3
 800707e:	73fb      	strb	r3, [r7, #15]
      break;
 8007080:	e066      	b.n	8007150 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	795a      	ldrb	r2, [r3, #5]
 8007086:	2301      	movs	r3, #1
 8007088:	9300      	str	r3, [sp, #0]
 800708a:	4613      	mov	r3, r2
 800708c:	2200      	movs	r2, #0
 800708e:	2100      	movs	r1, #0
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 f87f 	bl	8007194 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800709c:	b29a      	uxth	r2, r3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	220a      	movs	r2, #10
 80070a6:	761a      	strb	r2, [r3, #24]
      break;
 80070a8:	e055      	b.n	8007156 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	795b      	ldrb	r3, [r3, #5]
 80070ae:	4619      	mov	r1, r3
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 fbe1 	bl	8007878 <USBH_LL_GetURBState>
 80070b6:	4603      	mov	r3, r0
 80070b8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80070ba:	7bbb      	ldrb	r3, [r7, #14]
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d105      	bne.n	80070cc <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 80070c0:	2300      	movs	r3, #0
 80070c2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	220d      	movs	r2, #13
 80070c8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80070ca:	e043      	b.n	8007154 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 80070cc:	7bbb      	ldrb	r3, [r7, #14]
 80070ce:	2b02      	cmp	r3, #2
 80070d0:	d103      	bne.n	80070da <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2209      	movs	r2, #9
 80070d6:	761a      	strb	r2, [r3, #24]
      break;
 80070d8:	e03c      	b.n	8007154 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 80070da:	7bbb      	ldrb	r3, [r7, #14]
 80070dc:	2b04      	cmp	r3, #4
 80070de:	d139      	bne.n	8007154 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	220b      	movs	r2, #11
 80070e4:	761a      	strb	r2, [r3, #24]
      break;
 80070e6:	e035      	b.n	8007154 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	7e5b      	ldrb	r3, [r3, #25]
 80070ec:	3301      	adds	r3, #1
 80070ee:	b2da      	uxtb	r2, r3
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	765a      	strb	r2, [r3, #25]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	7e5b      	ldrb	r3, [r3, #25]
 80070f8:	2b02      	cmp	r3, #2
 80070fa:	d806      	bhi.n	800710a <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2201      	movs	r2, #1
 8007106:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007108:	e025      	b.n	8007156 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007110:	2106      	movs	r1, #6
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	795b      	ldrb	r3, [r3, #5]
 8007120:	4619      	mov	r1, r3
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 f90c 	bl	8007340 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	791b      	ldrb	r3, [r3, #4]
 800712c:	4619      	mov	r1, r3
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 f906 	bl	8007340 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800713a:	2302      	movs	r3, #2
 800713c:	73fb      	strb	r3, [r7, #15]
      break;
 800713e:	e00a      	b.n	8007156 <USBH_HandleControl+0x2e2>

    default:
      break;
 8007140:	bf00      	nop
 8007142:	e008      	b.n	8007156 <USBH_HandleControl+0x2e2>
      break;
 8007144:	bf00      	nop
 8007146:	e006      	b.n	8007156 <USBH_HandleControl+0x2e2>
      break;
 8007148:	bf00      	nop
 800714a:	e004      	b.n	8007156 <USBH_HandleControl+0x2e2>
      break;
 800714c:	bf00      	nop
 800714e:	e002      	b.n	8007156 <USBH_HandleControl+0x2e2>
      break;
 8007150:	bf00      	nop
 8007152:	e000      	b.n	8007156 <USBH_HandleControl+0x2e2>
      break;
 8007154:	bf00      	nop
  }

  return status;
 8007156:	7bfb      	ldrb	r3, [r7, #15]
}
 8007158:	4618      	mov	r0, r3
 800715a:	3710      	adds	r7, #16
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b088      	sub	sp, #32
 8007164:	af04      	add	r7, sp, #16
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	4613      	mov	r3, r2
 800716c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800716e:	79f9      	ldrb	r1, [r7, #7]
 8007170:	2300      	movs	r3, #0
 8007172:	9303      	str	r3, [sp, #12]
 8007174:	2308      	movs	r3, #8
 8007176:	9302      	str	r3, [sp, #8]
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	9301      	str	r3, [sp, #4]
 800717c:	2300      	movs	r3, #0
 800717e:	9300      	str	r3, [sp, #0]
 8007180:	2300      	movs	r3, #0
 8007182:	2200      	movs	r2, #0
 8007184:	68f8      	ldr	r0, [r7, #12]
 8007186:	f000 fb46 	bl	8007816 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	3710      	adds	r7, #16
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b088      	sub	sp, #32
 8007198:	af04      	add	r7, sp, #16
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	4611      	mov	r1, r2
 80071a0:	461a      	mov	r2, r3
 80071a2:	460b      	mov	r3, r1
 80071a4:	80fb      	strh	r3, [r7, #6]
 80071a6:	4613      	mov	r3, r2
 80071a8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d001      	beq.n	80071b8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80071b4:	2300      	movs	r3, #0
 80071b6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80071b8:	7979      	ldrb	r1, [r7, #5]
 80071ba:	7e3b      	ldrb	r3, [r7, #24]
 80071bc:	9303      	str	r3, [sp, #12]
 80071be:	88fb      	ldrh	r3, [r7, #6]
 80071c0:	9302      	str	r3, [sp, #8]
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	9301      	str	r3, [sp, #4]
 80071c6:	2301      	movs	r3, #1
 80071c8:	9300      	str	r3, [sp, #0]
 80071ca:	2300      	movs	r3, #0
 80071cc:	2200      	movs	r2, #0
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	f000 fb21 	bl	8007816 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3710      	adds	r7, #16
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}

080071de <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80071de:	b580      	push	{r7, lr}
 80071e0:	b088      	sub	sp, #32
 80071e2:	af04      	add	r7, sp, #16
 80071e4:	60f8      	str	r0, [r7, #12]
 80071e6:	60b9      	str	r1, [r7, #8]
 80071e8:	4611      	mov	r1, r2
 80071ea:	461a      	mov	r2, r3
 80071ec:	460b      	mov	r3, r1
 80071ee:	80fb      	strh	r3, [r7, #6]
 80071f0:	4613      	mov	r3, r2
 80071f2:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80071f4:	7979      	ldrb	r1, [r7, #5]
 80071f6:	2300      	movs	r3, #0
 80071f8:	9303      	str	r3, [sp, #12]
 80071fa:	88fb      	ldrh	r3, [r7, #6]
 80071fc:	9302      	str	r3, [sp, #8]
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	9301      	str	r3, [sp, #4]
 8007202:	2301      	movs	r3, #1
 8007204:	9300      	str	r3, [sp, #0]
 8007206:	2300      	movs	r3, #0
 8007208:	2201      	movs	r2, #1
 800720a:	68f8      	ldr	r0, [r7, #12]
 800720c:	f000 fb03 	bl	8007816 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007210:	2300      	movs	r3, #0

}
 8007212:	4618      	mov	r0, r3
 8007214:	3710      	adds	r7, #16
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}

0800721a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800721a:	b580      	push	{r7, lr}
 800721c:	b088      	sub	sp, #32
 800721e:	af04      	add	r7, sp, #16
 8007220:	60f8      	str	r0, [r7, #12]
 8007222:	60b9      	str	r1, [r7, #8]
 8007224:	4611      	mov	r1, r2
 8007226:	461a      	mov	r2, r3
 8007228:	460b      	mov	r3, r1
 800722a:	80fb      	strh	r3, [r7, #6]
 800722c:	4613      	mov	r3, r2
 800722e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007236:	2b00      	cmp	r3, #0
 8007238:	d001      	beq.n	800723e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800723a:	2300      	movs	r3, #0
 800723c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800723e:	7979      	ldrb	r1, [r7, #5]
 8007240:	7e3b      	ldrb	r3, [r7, #24]
 8007242:	9303      	str	r3, [sp, #12]
 8007244:	88fb      	ldrh	r3, [r7, #6]
 8007246:	9302      	str	r3, [sp, #8]
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	9301      	str	r3, [sp, #4]
 800724c:	2301      	movs	r3, #1
 800724e:	9300      	str	r3, [sp, #0]
 8007250:	2302      	movs	r3, #2
 8007252:	2200      	movs	r2, #0
 8007254:	68f8      	ldr	r0, [r7, #12]
 8007256:	f000 fade 	bl	8007816 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800725a:	2300      	movs	r3, #0
}
 800725c:	4618      	mov	r0, r3
 800725e:	3710      	adds	r7, #16
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b088      	sub	sp, #32
 8007268:	af04      	add	r7, sp, #16
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	4611      	mov	r1, r2
 8007270:	461a      	mov	r2, r3
 8007272:	460b      	mov	r3, r1
 8007274:	80fb      	strh	r3, [r7, #6]
 8007276:	4613      	mov	r3, r2
 8007278:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800727a:	7979      	ldrb	r1, [r7, #5]
 800727c:	2300      	movs	r3, #0
 800727e:	9303      	str	r3, [sp, #12]
 8007280:	88fb      	ldrh	r3, [r7, #6]
 8007282:	9302      	str	r3, [sp, #8]
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	9301      	str	r3, [sp, #4]
 8007288:	2301      	movs	r3, #1
 800728a:	9300      	str	r3, [sp, #0]
 800728c:	2302      	movs	r3, #2
 800728e:	2201      	movs	r2, #1
 8007290:	68f8      	ldr	r0, [r7, #12]
 8007292:	f000 fac0 	bl	8007816 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007296:	2300      	movs	r3, #0
}
 8007298:	4618      	mov	r0, r3
 800729a:	3710      	adds	r7, #16
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b086      	sub	sp, #24
 80072a4:	af04      	add	r7, sp, #16
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	4608      	mov	r0, r1
 80072aa:	4611      	mov	r1, r2
 80072ac:	461a      	mov	r2, r3
 80072ae:	4603      	mov	r3, r0
 80072b0:	70fb      	strb	r3, [r7, #3]
 80072b2:	460b      	mov	r3, r1
 80072b4:	70bb      	strb	r3, [r7, #2]
 80072b6:	4613      	mov	r3, r2
 80072b8:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80072ba:	7878      	ldrb	r0, [r7, #1]
 80072bc:	78ba      	ldrb	r2, [r7, #2]
 80072be:	78f9      	ldrb	r1, [r7, #3]
 80072c0:	8b3b      	ldrh	r3, [r7, #24]
 80072c2:	9302      	str	r3, [sp, #8]
 80072c4:	7d3b      	ldrb	r3, [r7, #20]
 80072c6:	9301      	str	r3, [sp, #4]
 80072c8:	7c3b      	ldrb	r3, [r7, #16]
 80072ca:	9300      	str	r3, [sp, #0]
 80072cc:	4603      	mov	r3, r0
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 fa53 	bl	800777a <USBH_LL_OpenPipe>

  return USBH_OK;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3708      	adds	r7, #8
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}

080072de <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80072de:	b580      	push	{r7, lr}
 80072e0:	b082      	sub	sp, #8
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
 80072e6:	460b      	mov	r3, r1
 80072e8:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80072ea:	78fb      	ldrb	r3, [r7, #3]
 80072ec:	4619      	mov	r1, r3
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 fa72 	bl	80077d8 <USBH_LL_ClosePipe>

  return USBH_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3708      	adds	r7, #8
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b084      	sub	sp, #16
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
 8007306:	460b      	mov	r3, r1
 8007308:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 f837 	bl	800737e <USBH_GetFreePipe>
 8007310:	4603      	mov	r3, r0
 8007312:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007314:	89fb      	ldrh	r3, [r7, #14]
 8007316:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800731a:	4293      	cmp	r3, r2
 800731c:	d00a      	beq.n	8007334 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800731e:	89fb      	ldrh	r3, [r7, #14]
 8007320:	f003 030f 	and.w	r3, r3, #15
 8007324:	78fa      	ldrb	r2, [r7, #3]
 8007326:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800732a:	6879      	ldr	r1, [r7, #4]
 800732c:	33e0      	adds	r3, #224	; 0xe0
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	440b      	add	r3, r1
 8007332:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007334:	89fb      	ldrh	r3, [r7, #14]
 8007336:	b2db      	uxtb	r3, r3
}
 8007338:	4618      	mov	r0, r3
 800733a:	3710      	adds	r7, #16
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	460b      	mov	r3, r1
 800734a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800734c:	78fb      	ldrb	r3, [r7, #3]
 800734e:	2b0a      	cmp	r3, #10
 8007350:	d80e      	bhi.n	8007370 <USBH_FreePipe+0x30>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007352:	78f8      	ldrb	r0, [r7, #3]
 8007354:	78fb      	ldrb	r3, [r7, #3]
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	33e0      	adds	r3, #224	; 0xe0
 800735a:	009b      	lsls	r3, r3, #2
 800735c:	4413      	add	r3, r2
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007364:	6879      	ldr	r1, [r7, #4]
 8007366:	f100 03e0 	add.w	r3, r0, #224	; 0xe0
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	440b      	add	r3, r1
 800736e:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	370c      	adds	r7, #12
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr

0800737e <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800737e:	b480      	push	{r7}
 8007380:	b085      	sub	sp, #20
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007386:	2300      	movs	r3, #0
 8007388:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800738a:	2300      	movs	r3, #0
 800738c:	73fb      	strb	r3, [r7, #15]
 800738e:	e00f      	b.n	80073b0 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007390:	7bfb      	ldrb	r3, [r7, #15]
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	33e0      	adds	r3, #224	; 0xe0
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	4413      	add	r3, r2
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d102      	bne.n	80073aa <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80073a4:	7bfb      	ldrb	r3, [r7, #15]
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	e007      	b.n	80073ba <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80073aa:	7bfb      	ldrb	r3, [r7, #15]
 80073ac:	3301      	adds	r3, #1
 80073ae:	73fb      	strb	r3, [r7, #15]
 80073b0:	7bfb      	ldrb	r3, [r7, #15]
 80073b2:	2b0a      	cmp	r3, #10
 80073b4:	d9ec      	bls.n	8007390 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80073b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3714      	adds	r7, #20
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr
	...

080073c8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80073cc:	2201      	movs	r2, #1
 80073ce:	490e      	ldr	r1, [pc, #56]	; (8007408 <MX_USB_HOST_Init+0x40>)
 80073d0:	480e      	ldr	r0, [pc, #56]	; (800740c <MX_USB_HOST_Init+0x44>)
 80073d2:	f7fe fc9d 	bl	8005d10 <USBH_Init>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d001      	beq.n	80073e0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80073dc:	f7f9 fb72 	bl	8000ac4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80073e0:	490b      	ldr	r1, [pc, #44]	; (8007410 <MX_USB_HOST_Init+0x48>)
 80073e2:	480a      	ldr	r0, [pc, #40]	; (800740c <MX_USB_HOST_Init+0x44>)
 80073e4:	f7fe fd22 	bl	8005e2c <USBH_RegisterClass>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d001      	beq.n	80073f2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80073ee:	f7f9 fb69 	bl	8000ac4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80073f2:	4806      	ldr	r0, [pc, #24]	; (800740c <MX_USB_HOST_Init+0x44>)
 80073f4:	f7fe fda6 	bl	8005f44 <USBH_Start>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d001      	beq.n	8007402 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80073fe:	f7f9 fb61 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007402:	bf00      	nop
 8007404:	bd80      	pop	{r7, pc}
 8007406:	bf00      	nop
 8007408:	08007429 	.word	0x08007429
 800740c:	200001b4 	.word	0x200001b4
 8007410:	2000000c 	.word	0x2000000c

08007414 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007418:	4802      	ldr	r0, [pc, #8]	; (8007424 <MX_USB_HOST_Process+0x10>)
 800741a:	f7fe fda3 	bl	8005f64 <USBH_Process>
}
 800741e:	bf00      	nop
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop
 8007424:	200001b4 	.word	0x200001b4

08007428 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	460b      	mov	r3, r1
 8007432:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007434:	78fb      	ldrb	r3, [r7, #3]
 8007436:	3b01      	subs	r3, #1
 8007438:	2b04      	cmp	r3, #4
 800743a:	d819      	bhi.n	8007470 <USBH_UserProcess+0x48>
 800743c:	a201      	add	r2, pc, #4	; (adr r2, 8007444 <USBH_UserProcess+0x1c>)
 800743e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007442:	bf00      	nop
 8007444:	08007471 	.word	0x08007471
 8007448:	08007461 	.word	0x08007461
 800744c:	08007471 	.word	0x08007471
 8007450:	08007469 	.word	0x08007469
 8007454:	08007459 	.word	0x08007459
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007458:	4b09      	ldr	r3, [pc, #36]	; (8007480 <USBH_UserProcess+0x58>)
 800745a:	2203      	movs	r2, #3
 800745c:	701a      	strb	r2, [r3, #0]
  break;
 800745e:	e008      	b.n	8007472 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007460:	4b07      	ldr	r3, [pc, #28]	; (8007480 <USBH_UserProcess+0x58>)
 8007462:	2202      	movs	r2, #2
 8007464:	701a      	strb	r2, [r3, #0]
  break;
 8007466:	e004      	b.n	8007472 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007468:	4b05      	ldr	r3, [pc, #20]	; (8007480 <USBH_UserProcess+0x58>)
 800746a:	2201      	movs	r2, #1
 800746c:	701a      	strb	r2, [r3, #0]
  break;
 800746e:	e000      	b.n	8007472 <USBH_UserProcess+0x4a>

  default:
  break;
 8007470:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007472:	bf00      	nop
 8007474:	370c      	adds	r7, #12
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr
 800747e:	bf00      	nop
 8007480:	200000b0 	.word	0x200000b0

08007484 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b08a      	sub	sp, #40	; 0x28
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800748c:	f107 0314 	add.w	r3, r7, #20
 8007490:	2200      	movs	r2, #0
 8007492:	601a      	str	r2, [r3, #0]
 8007494:	605a      	str	r2, [r3, #4]
 8007496:	609a      	str	r2, [r3, #8]
 8007498:	60da      	str	r2, [r3, #12]
 800749a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074a4:	d147      	bne.n	8007536 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074a6:	2300      	movs	r3, #0
 80074a8:	613b      	str	r3, [r7, #16]
 80074aa:	4a25      	ldr	r2, [pc, #148]	; (8007540 <HAL_HCD_MspInit+0xbc>)
 80074ac:	4b24      	ldr	r3, [pc, #144]	; (8007540 <HAL_HCD_MspInit+0xbc>)
 80074ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074b0:	f043 0301 	orr.w	r3, r3, #1
 80074b4:	6313      	str	r3, [r2, #48]	; 0x30
 80074b6:	4b22      	ldr	r3, [pc, #136]	; (8007540 <HAL_HCD_MspInit+0xbc>)
 80074b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ba:	f003 0301 	and.w	r3, r3, #1
 80074be:	613b      	str	r3, [r7, #16]
 80074c0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80074c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80074c8:	2300      	movs	r3, #0
 80074ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074cc:	2300      	movs	r3, #0
 80074ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80074d0:	f107 0314 	add.w	r3, r7, #20
 80074d4:	4619      	mov	r1, r3
 80074d6:	481b      	ldr	r0, [pc, #108]	; (8007544 <HAL_HCD_MspInit+0xc0>)
 80074d8:	f7f9 fdb4 	bl	8001044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80074dc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80074e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074e2:	2302      	movs	r3, #2
 80074e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074e6:	2300      	movs	r3, #0
 80074e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074ea:	2300      	movs	r3, #0
 80074ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80074ee:	230a      	movs	r3, #10
 80074f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074f2:	f107 0314 	add.w	r3, r7, #20
 80074f6:	4619      	mov	r1, r3
 80074f8:	4812      	ldr	r0, [pc, #72]	; (8007544 <HAL_HCD_MspInit+0xc0>)
 80074fa:	f7f9 fda3 	bl	8001044 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80074fe:	4a10      	ldr	r2, [pc, #64]	; (8007540 <HAL_HCD_MspInit+0xbc>)
 8007500:	4b0f      	ldr	r3, [pc, #60]	; (8007540 <HAL_HCD_MspInit+0xbc>)
 8007502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007508:	6353      	str	r3, [r2, #52]	; 0x34
 800750a:	2300      	movs	r3, #0
 800750c:	60fb      	str	r3, [r7, #12]
 800750e:	4a0c      	ldr	r2, [pc, #48]	; (8007540 <HAL_HCD_MspInit+0xbc>)
 8007510:	4b0b      	ldr	r3, [pc, #44]	; (8007540 <HAL_HCD_MspInit+0xbc>)
 8007512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007514:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007518:	6453      	str	r3, [r2, #68]	; 0x44
 800751a:	4b09      	ldr	r3, [pc, #36]	; (8007540 <HAL_HCD_MspInit+0xbc>)
 800751c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800751e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007522:	60fb      	str	r3, [r7, #12]
 8007524:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007526:	2200      	movs	r2, #0
 8007528:	2100      	movs	r1, #0
 800752a:	2043      	movs	r0, #67	; 0x43
 800752c:	f7f9 fd53 	bl	8000fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007530:	2043      	movs	r0, #67	; 0x43
 8007532:	f7f9 fd6c 	bl	800100e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007536:	bf00      	nop
 8007538:	3728      	adds	r7, #40	; 0x28
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
 800753e:	bf00      	nop
 8007540:	40023800 	.word	0x40023800
 8007544:	40020000 	.word	0x40020000

08007548 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b082      	sub	sp, #8
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007556:	4618      	mov	r0, r3
 8007558:	f7ff f8d7 	bl	800670a <USBH_LL_IncTimer>
}
 800755c:	bf00      	nop
 800755e:	3708      	adds	r7, #8
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007572:	4618      	mov	r0, r3
 8007574:	f7ff f90f 	bl	8006796 <USBH_LL_Connect>
}
 8007578:	bf00      	nop
 800757a:	3708      	adds	r7, #8
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800758e:	4618      	mov	r0, r3
 8007590:	f7ff f918 	bl	80067c4 <USBH_LL_Disconnect>
}
 8007594:	bf00      	nop
 8007596:	3708      	adds	r7, #8
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	460b      	mov	r3, r1
 80075a6:	70fb      	strb	r3, [r7, #3]
 80075a8:	4613      	mov	r3, r2
 80075aa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80075ac:	bf00      	nop
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b082      	sub	sp, #8
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80075c6:	4618      	mov	r0, r3
 80075c8:	f7ff f8c9 	bl	800675e <USBH_LL_PortEnabled>
}
 80075cc:	bf00      	nop
 80075ce:	3708      	adds	r7, #8
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80075e2:	4618      	mov	r0, r3
 80075e4:	f7ff f8c9 	bl	800677a <USBH_LL_PortDisabled>
}
 80075e8:	bf00      	nop
 80075ea:	3708      	adds	r7, #8
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d12a      	bne.n	8007658 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007602:	4a18      	ldr	r2, [pc, #96]	; (8007664 <USBH_LL_Init+0x74>)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4a15      	ldr	r2, [pc, #84]	; (8007664 <USBH_LL_Init+0x74>)
 800760e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007612:	4b14      	ldr	r3, [pc, #80]	; (8007664 <USBH_LL_Init+0x74>)
 8007614:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007618:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800761a:	4b12      	ldr	r3, [pc, #72]	; (8007664 <USBH_LL_Init+0x74>)
 800761c:	2208      	movs	r2, #8
 800761e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007620:	4b10      	ldr	r3, [pc, #64]	; (8007664 <USBH_LL_Init+0x74>)
 8007622:	2201      	movs	r2, #1
 8007624:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007626:	4b0f      	ldr	r3, [pc, #60]	; (8007664 <USBH_LL_Init+0x74>)
 8007628:	2200      	movs	r2, #0
 800762a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800762c:	4b0d      	ldr	r3, [pc, #52]	; (8007664 <USBH_LL_Init+0x74>)
 800762e:	2202      	movs	r2, #2
 8007630:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007632:	4b0c      	ldr	r3, [pc, #48]	; (8007664 <USBH_LL_Init+0x74>)
 8007634:	2200      	movs	r2, #0
 8007636:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007638:	480a      	ldr	r0, [pc, #40]	; (8007664 <USBH_LL_Init+0x74>)
 800763a:	f7f9 fece 	bl	80013da <HAL_HCD_Init>
 800763e:	4603      	mov	r3, r0
 8007640:	2b00      	cmp	r3, #0
 8007642:	d001      	beq.n	8007648 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007644:	f7f9 fa3e 	bl	8000ac4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007648:	4806      	ldr	r0, [pc, #24]	; (8007664 <USBH_LL_Init+0x74>)
 800764a:	f7fa faab 	bl	8001ba4 <HAL_HCD_GetCurrentFrame>
 800764e:	4603      	mov	r3, r0
 8007650:	4619      	mov	r1, r3
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f7ff f84a 	bl	80066ec <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007658:	2300      	movs	r3, #0
}
 800765a:	4618      	mov	r0, r3
 800765c:	3708      	adds	r7, #8
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	2000058c 	.word	0x2000058c

08007668 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007670:	2300      	movs	r3, #0
 8007672:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007674:	2300      	movs	r3, #0
 8007676:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800767e:	4618      	mov	r0, r3
 8007680:	f7fa fa1a 	bl	8001ab8 <HAL_HCD_Start>
 8007684:	4603      	mov	r3, r0
 8007686:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007688:	7bfb      	ldrb	r3, [r7, #15]
 800768a:	4618      	mov	r0, r3
 800768c:	f000 f95a 	bl	8007944 <USBH_Get_USB_Status>
 8007690:	4603      	mov	r3, r0
 8007692:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007694:	7bbb      	ldrb	r3, [r7, #14]
}
 8007696:	4618      	mov	r0, r3
 8007698:	3710      	adds	r7, #16
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800769e:	b580      	push	{r7, lr}
 80076a0:	b084      	sub	sp, #16
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076a6:	2300      	movs	r3, #0
 80076a8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80076aa:	2300      	movs	r3, #0
 80076ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80076b4:	4618      	mov	r0, r3
 80076b6:	f7fa fa22 	bl	8001afe <HAL_HCD_Stop>
 80076ba:	4603      	mov	r3, r0
 80076bc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80076be:	7bfb      	ldrb	r3, [r7, #15]
 80076c0:	4618      	mov	r0, r3
 80076c2:	f000 f93f 	bl	8007944 <USBH_Get_USB_Status>
 80076c6:	4603      	mov	r3, r0
 80076c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3710      	adds	r7, #16
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b084      	sub	sp, #16
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80076dc:	2301      	movs	r3, #1
 80076de:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7fa fa6a 	bl	8001bc0 <HAL_HCD_GetCurrentSpeed>
 80076ec:	4603      	mov	r3, r0
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d007      	beq.n	8007702 <USBH_LL_GetSpeed+0x2e>
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d302      	bcc.n	80076fc <USBH_LL_GetSpeed+0x28>
 80076f6:	2b02      	cmp	r3, #2
 80076f8:	d006      	beq.n	8007708 <USBH_LL_GetSpeed+0x34>
 80076fa:	e008      	b.n	800770e <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80076fc:	2300      	movs	r3, #0
 80076fe:	73fb      	strb	r3, [r7, #15]
    break;
 8007700:	e008      	b.n	8007714 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007702:	2301      	movs	r3, #1
 8007704:	73fb      	strb	r3, [r7, #15]
    break;
 8007706:	e005      	b.n	8007714 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007708:	2302      	movs	r3, #2
 800770a:	73fb      	strb	r3, [r7, #15]
    break;
 800770c:	e002      	b.n	8007714 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800770e:	2301      	movs	r3, #1
 8007710:	73fb      	strb	r3, [r7, #15]
    break;
 8007712:	bf00      	nop
  }
  return  speed;
 8007714:	7bfb      	ldrb	r3, [r7, #15]
}
 8007716:	4618      	mov	r0, r3
 8007718:	3710      	adds	r7, #16
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800771e:	b580      	push	{r7, lr}
 8007720:	b084      	sub	sp, #16
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007726:	2300      	movs	r3, #0
 8007728:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800772a:	2300      	movs	r3, #0
 800772c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007734:	4618      	mov	r0, r3
 8007736:	f7fa f9ff 	bl	8001b38 <HAL_HCD_ResetPort>
 800773a:	4603      	mov	r3, r0
 800773c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800773e:	7bfb      	ldrb	r3, [r7, #15]
 8007740:	4618      	mov	r0, r3
 8007742:	f000 f8ff 	bl	8007944 <USBH_Get_USB_Status>
 8007746:	4603      	mov	r3, r0
 8007748:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800774a:	7bbb      	ldrb	r3, [r7, #14]
}
 800774c:	4618      	mov	r0, r3
 800774e:	3710      	adds	r7, #16
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b082      	sub	sp, #8
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	460b      	mov	r3, r1
 800775e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007766:	78fa      	ldrb	r2, [r7, #3]
 8007768:	4611      	mov	r1, r2
 800776a:	4618      	mov	r0, r3
 800776c:	f7fa fa06 	bl	8001b7c <HAL_HCD_HC_GetXferCount>
 8007770:	4603      	mov	r3, r0
}
 8007772:	4618      	mov	r0, r3
 8007774:	3708      	adds	r7, #8
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}

0800777a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800777a:	b590      	push	{r4, r7, lr}
 800777c:	b089      	sub	sp, #36	; 0x24
 800777e:	af04      	add	r7, sp, #16
 8007780:	6078      	str	r0, [r7, #4]
 8007782:	4608      	mov	r0, r1
 8007784:	4611      	mov	r1, r2
 8007786:	461a      	mov	r2, r3
 8007788:	4603      	mov	r3, r0
 800778a:	70fb      	strb	r3, [r7, #3]
 800778c:	460b      	mov	r3, r1
 800778e:	70bb      	strb	r3, [r7, #2]
 8007790:	4613      	mov	r3, r2
 8007792:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007794:	2300      	movs	r3, #0
 8007796:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007798:	2300      	movs	r3, #0
 800779a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80077a2:	787c      	ldrb	r4, [r7, #1]
 80077a4:	78ba      	ldrb	r2, [r7, #2]
 80077a6:	78f9      	ldrb	r1, [r7, #3]
 80077a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80077aa:	9302      	str	r3, [sp, #8]
 80077ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80077b0:	9301      	str	r3, [sp, #4]
 80077b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80077b6:	9300      	str	r3, [sp, #0]
 80077b8:	4623      	mov	r3, r4
 80077ba:	f7f9 fe70 	bl	800149e <HAL_HCD_HC_Init>
 80077be:	4603      	mov	r3, r0
 80077c0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80077c2:	7bfb      	ldrb	r3, [r7, #15]
 80077c4:	4618      	mov	r0, r3
 80077c6:	f000 f8bd 	bl	8007944 <USBH_Get_USB_Status>
 80077ca:	4603      	mov	r3, r0
 80077cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3714      	adds	r7, #20
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd90      	pop	{r4, r7, pc}

080077d8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	460b      	mov	r3, r1
 80077e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077e4:	2300      	movs	r3, #0
 80077e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80077e8:	2300      	movs	r3, #0
 80077ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80077f2:	78fa      	ldrb	r2, [r7, #3]
 80077f4:	4611      	mov	r1, r2
 80077f6:	4618      	mov	r0, r3
 80077f8:	f7f9 fee0 	bl	80015bc <HAL_HCD_HC_Halt>
 80077fc:	4603      	mov	r3, r0
 80077fe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007800:	7bfb      	ldrb	r3, [r7, #15]
 8007802:	4618      	mov	r0, r3
 8007804:	f000 f89e 	bl	8007944 <USBH_Get_USB_Status>
 8007808:	4603      	mov	r3, r0
 800780a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800780c:	7bbb      	ldrb	r3, [r7, #14]
}
 800780e:	4618      	mov	r0, r3
 8007810:	3710      	adds	r7, #16
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}

08007816 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007816:	b590      	push	{r4, r7, lr}
 8007818:	b089      	sub	sp, #36	; 0x24
 800781a:	af04      	add	r7, sp, #16
 800781c:	6078      	str	r0, [r7, #4]
 800781e:	4608      	mov	r0, r1
 8007820:	4611      	mov	r1, r2
 8007822:	461a      	mov	r2, r3
 8007824:	4603      	mov	r3, r0
 8007826:	70fb      	strb	r3, [r7, #3]
 8007828:	460b      	mov	r3, r1
 800782a:	70bb      	strb	r3, [r7, #2]
 800782c:	4613      	mov	r3, r2
 800782e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007830:	2300      	movs	r3, #0
 8007832:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007834:	2300      	movs	r3, #0
 8007836:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800783e:	787c      	ldrb	r4, [r7, #1]
 8007840:	78ba      	ldrb	r2, [r7, #2]
 8007842:	78f9      	ldrb	r1, [r7, #3]
 8007844:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007848:	9303      	str	r3, [sp, #12]
 800784a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800784c:	9302      	str	r3, [sp, #8]
 800784e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007850:	9301      	str	r3, [sp, #4]
 8007852:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007856:	9300      	str	r3, [sp, #0]
 8007858:	4623      	mov	r3, r4
 800785a:	f7f9 fed3 	bl	8001604 <HAL_HCD_HC_SubmitRequest>
 800785e:	4603      	mov	r3, r0
 8007860:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007862:	7bfb      	ldrb	r3, [r7, #15]
 8007864:	4618      	mov	r0, r3
 8007866:	f000 f86d 	bl	8007944 <USBH_Get_USB_Status>
 800786a:	4603      	mov	r3, r0
 800786c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800786e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007870:	4618      	mov	r0, r3
 8007872:	3714      	adds	r7, #20
 8007874:	46bd      	mov	sp, r7
 8007876:	bd90      	pop	{r4, r7, pc}

08007878 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b082      	sub	sp, #8
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	460b      	mov	r3, r1
 8007882:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800788a:	78fa      	ldrb	r2, [r7, #3]
 800788c:	4611      	mov	r1, r2
 800788e:	4618      	mov	r0, r3
 8007890:	f7fa f960 	bl	8001b54 <HAL_HCD_HC_GetURBState>
 8007894:	4603      	mov	r3, r0
}
 8007896:	4618      	mov	r0, r3
 8007898:	3708      	adds	r7, #8
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}

0800789e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800789e:	b580      	push	{r7, lr}
 80078a0:	b082      	sub	sp, #8
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
 80078a6:	460b      	mov	r3, r1
 80078a8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d103      	bne.n	80078bc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80078b4:	78fb      	ldrb	r3, [r7, #3]
 80078b6:	4618      	mov	r0, r3
 80078b8:	f000 f870 	bl	800799c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80078bc:	20c8      	movs	r0, #200	; 0xc8
 80078be:	f7f9 fa8f 	bl	8000de0 <HAL_Delay>
  return USBH_OK;
 80078c2:	2300      	movs	r3, #0
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3708      	adds	r7, #8
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b085      	sub	sp, #20
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	460b      	mov	r3, r1
 80078d6:	70fb      	strb	r3, [r7, #3]
 80078d8:	4613      	mov	r3, r2
 80078da:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80078e2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80078e4:	78fb      	ldrb	r3, [r7, #3]
 80078e6:	68fa      	ldr	r2, [r7, #12]
 80078e8:	212c      	movs	r1, #44	; 0x2c
 80078ea:	fb01 f303 	mul.w	r3, r1, r3
 80078ee:	4413      	add	r3, r2
 80078f0:	333b      	adds	r3, #59	; 0x3b
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d009      	beq.n	800790c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80078f8:	78fb      	ldrb	r3, [r7, #3]
 80078fa:	68fa      	ldr	r2, [r7, #12]
 80078fc:	212c      	movs	r1, #44	; 0x2c
 80078fe:	fb01 f303 	mul.w	r3, r1, r3
 8007902:	4413      	add	r3, r2
 8007904:	3354      	adds	r3, #84	; 0x54
 8007906:	78ba      	ldrb	r2, [r7, #2]
 8007908:	701a      	strb	r2, [r3, #0]
 800790a:	e008      	b.n	800791e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800790c:	78fb      	ldrb	r3, [r7, #3]
 800790e:	68fa      	ldr	r2, [r7, #12]
 8007910:	212c      	movs	r1, #44	; 0x2c
 8007912:	fb01 f303 	mul.w	r3, r1, r3
 8007916:	4413      	add	r3, r2
 8007918:	3355      	adds	r3, #85	; 0x55
 800791a:	78ba      	ldrb	r2, [r7, #2]
 800791c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800791e:	2300      	movs	r3, #0
}
 8007920:	4618      	mov	r0, r3
 8007922:	3714      	adds	r7, #20
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b082      	sub	sp, #8
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f7f9 fa53 	bl	8000de0 <HAL_Delay>
}
 800793a:	bf00      	nop
 800793c:	3708      	adds	r7, #8
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
	...

08007944 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007944:	b480      	push	{r7}
 8007946:	b085      	sub	sp, #20
 8007948:	af00      	add	r7, sp, #0
 800794a:	4603      	mov	r3, r0
 800794c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800794e:	2300      	movs	r3, #0
 8007950:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007952:	79fb      	ldrb	r3, [r7, #7]
 8007954:	2b03      	cmp	r3, #3
 8007956:	d817      	bhi.n	8007988 <USBH_Get_USB_Status+0x44>
 8007958:	a201      	add	r2, pc, #4	; (adr r2, 8007960 <USBH_Get_USB_Status+0x1c>)
 800795a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800795e:	bf00      	nop
 8007960:	08007971 	.word	0x08007971
 8007964:	08007977 	.word	0x08007977
 8007968:	0800797d 	.word	0x0800797d
 800796c:	08007983 	.word	0x08007983
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007970:	2300      	movs	r3, #0
 8007972:	73fb      	strb	r3, [r7, #15]
    break;
 8007974:	e00b      	b.n	800798e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007976:	2302      	movs	r3, #2
 8007978:	73fb      	strb	r3, [r7, #15]
    break;
 800797a:	e008      	b.n	800798e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800797c:	2301      	movs	r3, #1
 800797e:	73fb      	strb	r3, [r7, #15]
    break;
 8007980:	e005      	b.n	800798e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007982:	2302      	movs	r3, #2
 8007984:	73fb      	strb	r3, [r7, #15]
    break;
 8007986:	e002      	b.n	800798e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007988:	2302      	movs	r3, #2
 800798a:	73fb      	strb	r3, [r7, #15]
    break;
 800798c:	bf00      	nop
  }
  return usb_status;
 800798e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007990:	4618      	mov	r0, r3
 8007992:	3714      	adds	r7, #20
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr

0800799c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b084      	sub	sp, #16
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	4603      	mov	r3, r0
 80079a4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80079a6:	79fb      	ldrb	r3, [r7, #7]
 80079a8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80079aa:	79fb      	ldrb	r3, [r7, #7]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d102      	bne.n	80079b6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80079b0:	2301      	movs	r3, #1
 80079b2:	73fb      	strb	r3, [r7, #15]
 80079b4:	e001      	b.n	80079ba <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80079b6:	2300      	movs	r3, #0
 80079b8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80079ba:	7bfb      	ldrb	r3, [r7, #15]
 80079bc:	461a      	mov	r2, r3
 80079be:	2101      	movs	r1, #1
 80079c0:	4803      	ldr	r0, [pc, #12]	; (80079d0 <MX_DriverVbusFS+0x34>)
 80079c2:	f7f9 fcf1 	bl	80013a8 <HAL_GPIO_WritePin>
}
 80079c6:	bf00      	nop
 80079c8:	3710      	adds	r7, #16
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop
 80079d0:	40020800 	.word	0x40020800

080079d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80079d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007a0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80079d8:	480d      	ldr	r0, [pc, #52]	; (8007a10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80079da:	490e      	ldr	r1, [pc, #56]	; (8007a14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80079dc:	4a0e      	ldr	r2, [pc, #56]	; (8007a18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80079de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80079e0:	e002      	b.n	80079e8 <LoopCopyDataInit>

080079e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80079e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80079e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80079e6:	3304      	adds	r3, #4

080079e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80079e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80079ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80079ec:	d3f9      	bcc.n	80079e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80079ee:	4a0b      	ldr	r2, [pc, #44]	; (8007a1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80079f0:	4c0b      	ldr	r4, [pc, #44]	; (8007a20 <LoopFillZerobss+0x26>)
  movs r3, #0
 80079f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80079f4:	e001      	b.n	80079fa <LoopFillZerobss>

080079f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80079f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80079f8:	3204      	adds	r2, #4

080079fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80079fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80079fc:	d3fb      	bcc.n	80079f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80079fe:	f7f9 f96b 	bl	8000cd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007a02:	f000 f817 	bl	8007a34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007a06:	f7f8 ff73 	bl	80008f0 <main>
  bx  lr    
 8007a0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007a0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007a10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007a14:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8007a18:	08007c6c 	.word	0x08007c6c
  ldr r2, =_sbss
 8007a1c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8007a20:	20000894 	.word	0x20000894

08007a24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007a24:	e7fe      	b.n	8007a24 <ADC_IRQHandler>
	...

08007a28 <__errno>:
 8007a28:	4b01      	ldr	r3, [pc, #4]	; (8007a30 <__errno+0x8>)
 8007a2a:	6818      	ldr	r0, [r3, #0]
 8007a2c:	4770      	bx	lr
 8007a2e:	bf00      	nop
 8007a30:	2000002c 	.word	0x2000002c

08007a34 <__libc_init_array>:
 8007a34:	b570      	push	{r4, r5, r6, lr}
 8007a36:	4e0d      	ldr	r6, [pc, #52]	; (8007a6c <__libc_init_array+0x38>)
 8007a38:	4c0d      	ldr	r4, [pc, #52]	; (8007a70 <__libc_init_array+0x3c>)
 8007a3a:	1ba4      	subs	r4, r4, r6
 8007a3c:	10a4      	asrs	r4, r4, #2
 8007a3e:	2500      	movs	r5, #0
 8007a40:	42a5      	cmp	r5, r4
 8007a42:	d109      	bne.n	8007a58 <__libc_init_array+0x24>
 8007a44:	4e0b      	ldr	r6, [pc, #44]	; (8007a74 <__libc_init_array+0x40>)
 8007a46:	4c0c      	ldr	r4, [pc, #48]	; (8007a78 <__libc_init_array+0x44>)
 8007a48:	f000 f8ee 	bl	8007c28 <_init>
 8007a4c:	1ba4      	subs	r4, r4, r6
 8007a4e:	10a4      	asrs	r4, r4, #2
 8007a50:	2500      	movs	r5, #0
 8007a52:	42a5      	cmp	r5, r4
 8007a54:	d105      	bne.n	8007a62 <__libc_init_array+0x2e>
 8007a56:	bd70      	pop	{r4, r5, r6, pc}
 8007a58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007a5c:	4798      	blx	r3
 8007a5e:	3501      	adds	r5, #1
 8007a60:	e7ee      	b.n	8007a40 <__libc_init_array+0xc>
 8007a62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007a66:	4798      	blx	r3
 8007a68:	3501      	adds	r5, #1
 8007a6a:	e7f2      	b.n	8007a52 <__libc_init_array+0x1e>
 8007a6c:	08007c64 	.word	0x08007c64
 8007a70:	08007c64 	.word	0x08007c64
 8007a74:	08007c64 	.word	0x08007c64
 8007a78:	08007c68 	.word	0x08007c68

08007a7c <malloc>:
 8007a7c:	4b02      	ldr	r3, [pc, #8]	; (8007a88 <malloc+0xc>)
 8007a7e:	4601      	mov	r1, r0
 8007a80:	6818      	ldr	r0, [r3, #0]
 8007a82:	f000 b861 	b.w	8007b48 <_malloc_r>
 8007a86:	bf00      	nop
 8007a88:	2000002c 	.word	0x2000002c

08007a8c <free>:
 8007a8c:	4b02      	ldr	r3, [pc, #8]	; (8007a98 <free+0xc>)
 8007a8e:	4601      	mov	r1, r0
 8007a90:	6818      	ldr	r0, [r3, #0]
 8007a92:	f000 b80b 	b.w	8007aac <_free_r>
 8007a96:	bf00      	nop
 8007a98:	2000002c 	.word	0x2000002c

08007a9c <memset>:
 8007a9c:	4402      	add	r2, r0
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d100      	bne.n	8007aa6 <memset+0xa>
 8007aa4:	4770      	bx	lr
 8007aa6:	f803 1b01 	strb.w	r1, [r3], #1
 8007aaa:	e7f9      	b.n	8007aa0 <memset+0x4>

08007aac <_free_r>:
 8007aac:	b538      	push	{r3, r4, r5, lr}
 8007aae:	4605      	mov	r5, r0
 8007ab0:	2900      	cmp	r1, #0
 8007ab2:	d045      	beq.n	8007b40 <_free_r+0x94>
 8007ab4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ab8:	1f0c      	subs	r4, r1, #4
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	bfb8      	it	lt
 8007abe:	18e4      	addlt	r4, r4, r3
 8007ac0:	f000 f8b0 	bl	8007c24 <__malloc_lock>
 8007ac4:	4a1f      	ldr	r2, [pc, #124]	; (8007b44 <_free_r+0x98>)
 8007ac6:	6813      	ldr	r3, [r2, #0]
 8007ac8:	4610      	mov	r0, r2
 8007aca:	b933      	cbnz	r3, 8007ada <_free_r+0x2e>
 8007acc:	6063      	str	r3, [r4, #4]
 8007ace:	6014      	str	r4, [r2, #0]
 8007ad0:	4628      	mov	r0, r5
 8007ad2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ad6:	f000 b8a6 	b.w	8007c26 <__malloc_unlock>
 8007ada:	42a3      	cmp	r3, r4
 8007adc:	d90c      	bls.n	8007af8 <_free_r+0x4c>
 8007ade:	6821      	ldr	r1, [r4, #0]
 8007ae0:	1862      	adds	r2, r4, r1
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	bf04      	itt	eq
 8007ae6:	681a      	ldreq	r2, [r3, #0]
 8007ae8:	685b      	ldreq	r3, [r3, #4]
 8007aea:	6063      	str	r3, [r4, #4]
 8007aec:	bf04      	itt	eq
 8007aee:	1852      	addeq	r2, r2, r1
 8007af0:	6022      	streq	r2, [r4, #0]
 8007af2:	6004      	str	r4, [r0, #0]
 8007af4:	e7ec      	b.n	8007ad0 <_free_r+0x24>
 8007af6:	4613      	mov	r3, r2
 8007af8:	685a      	ldr	r2, [r3, #4]
 8007afa:	b10a      	cbz	r2, 8007b00 <_free_r+0x54>
 8007afc:	42a2      	cmp	r2, r4
 8007afe:	d9fa      	bls.n	8007af6 <_free_r+0x4a>
 8007b00:	6819      	ldr	r1, [r3, #0]
 8007b02:	1858      	adds	r0, r3, r1
 8007b04:	42a0      	cmp	r0, r4
 8007b06:	d10b      	bne.n	8007b20 <_free_r+0x74>
 8007b08:	6820      	ldr	r0, [r4, #0]
 8007b0a:	4401      	add	r1, r0
 8007b0c:	1858      	adds	r0, r3, r1
 8007b0e:	4282      	cmp	r2, r0
 8007b10:	6019      	str	r1, [r3, #0]
 8007b12:	d1dd      	bne.n	8007ad0 <_free_r+0x24>
 8007b14:	6810      	ldr	r0, [r2, #0]
 8007b16:	6852      	ldr	r2, [r2, #4]
 8007b18:	605a      	str	r2, [r3, #4]
 8007b1a:	4401      	add	r1, r0
 8007b1c:	6019      	str	r1, [r3, #0]
 8007b1e:	e7d7      	b.n	8007ad0 <_free_r+0x24>
 8007b20:	d902      	bls.n	8007b28 <_free_r+0x7c>
 8007b22:	230c      	movs	r3, #12
 8007b24:	602b      	str	r3, [r5, #0]
 8007b26:	e7d3      	b.n	8007ad0 <_free_r+0x24>
 8007b28:	6820      	ldr	r0, [r4, #0]
 8007b2a:	1821      	adds	r1, r4, r0
 8007b2c:	428a      	cmp	r2, r1
 8007b2e:	bf04      	itt	eq
 8007b30:	6811      	ldreq	r1, [r2, #0]
 8007b32:	6852      	ldreq	r2, [r2, #4]
 8007b34:	6062      	str	r2, [r4, #4]
 8007b36:	bf04      	itt	eq
 8007b38:	1809      	addeq	r1, r1, r0
 8007b3a:	6021      	streq	r1, [r4, #0]
 8007b3c:	605c      	str	r4, [r3, #4]
 8007b3e:	e7c7      	b.n	8007ad0 <_free_r+0x24>
 8007b40:	bd38      	pop	{r3, r4, r5, pc}
 8007b42:	bf00      	nop
 8007b44:	200000b4 	.word	0x200000b4

08007b48 <_malloc_r>:
 8007b48:	b570      	push	{r4, r5, r6, lr}
 8007b4a:	1ccd      	adds	r5, r1, #3
 8007b4c:	f025 0503 	bic.w	r5, r5, #3
 8007b50:	3508      	adds	r5, #8
 8007b52:	2d0c      	cmp	r5, #12
 8007b54:	bf38      	it	cc
 8007b56:	250c      	movcc	r5, #12
 8007b58:	2d00      	cmp	r5, #0
 8007b5a:	4606      	mov	r6, r0
 8007b5c:	db01      	blt.n	8007b62 <_malloc_r+0x1a>
 8007b5e:	42a9      	cmp	r1, r5
 8007b60:	d903      	bls.n	8007b6a <_malloc_r+0x22>
 8007b62:	230c      	movs	r3, #12
 8007b64:	6033      	str	r3, [r6, #0]
 8007b66:	2000      	movs	r0, #0
 8007b68:	bd70      	pop	{r4, r5, r6, pc}
 8007b6a:	f000 f85b 	bl	8007c24 <__malloc_lock>
 8007b6e:	4a23      	ldr	r2, [pc, #140]	; (8007bfc <_malloc_r+0xb4>)
 8007b70:	6814      	ldr	r4, [r2, #0]
 8007b72:	4621      	mov	r1, r4
 8007b74:	b991      	cbnz	r1, 8007b9c <_malloc_r+0x54>
 8007b76:	4c22      	ldr	r4, [pc, #136]	; (8007c00 <_malloc_r+0xb8>)
 8007b78:	6823      	ldr	r3, [r4, #0]
 8007b7a:	b91b      	cbnz	r3, 8007b84 <_malloc_r+0x3c>
 8007b7c:	4630      	mov	r0, r6
 8007b7e:	f000 f841 	bl	8007c04 <_sbrk_r>
 8007b82:	6020      	str	r0, [r4, #0]
 8007b84:	4629      	mov	r1, r5
 8007b86:	4630      	mov	r0, r6
 8007b88:	f000 f83c 	bl	8007c04 <_sbrk_r>
 8007b8c:	1c43      	adds	r3, r0, #1
 8007b8e:	d126      	bne.n	8007bde <_malloc_r+0x96>
 8007b90:	230c      	movs	r3, #12
 8007b92:	6033      	str	r3, [r6, #0]
 8007b94:	4630      	mov	r0, r6
 8007b96:	f000 f846 	bl	8007c26 <__malloc_unlock>
 8007b9a:	e7e4      	b.n	8007b66 <_malloc_r+0x1e>
 8007b9c:	680b      	ldr	r3, [r1, #0]
 8007b9e:	1b5b      	subs	r3, r3, r5
 8007ba0:	d41a      	bmi.n	8007bd8 <_malloc_r+0x90>
 8007ba2:	2b0b      	cmp	r3, #11
 8007ba4:	d90f      	bls.n	8007bc6 <_malloc_r+0x7e>
 8007ba6:	600b      	str	r3, [r1, #0]
 8007ba8:	50cd      	str	r5, [r1, r3]
 8007baa:	18cc      	adds	r4, r1, r3
 8007bac:	4630      	mov	r0, r6
 8007bae:	f000 f83a 	bl	8007c26 <__malloc_unlock>
 8007bb2:	f104 000b 	add.w	r0, r4, #11
 8007bb6:	1d23      	adds	r3, r4, #4
 8007bb8:	f020 0007 	bic.w	r0, r0, #7
 8007bbc:	1ac3      	subs	r3, r0, r3
 8007bbe:	d01b      	beq.n	8007bf8 <_malloc_r+0xb0>
 8007bc0:	425a      	negs	r2, r3
 8007bc2:	50e2      	str	r2, [r4, r3]
 8007bc4:	bd70      	pop	{r4, r5, r6, pc}
 8007bc6:	428c      	cmp	r4, r1
 8007bc8:	bf0d      	iteet	eq
 8007bca:	6863      	ldreq	r3, [r4, #4]
 8007bcc:	684b      	ldrne	r3, [r1, #4]
 8007bce:	6063      	strne	r3, [r4, #4]
 8007bd0:	6013      	streq	r3, [r2, #0]
 8007bd2:	bf18      	it	ne
 8007bd4:	460c      	movne	r4, r1
 8007bd6:	e7e9      	b.n	8007bac <_malloc_r+0x64>
 8007bd8:	460c      	mov	r4, r1
 8007bda:	6849      	ldr	r1, [r1, #4]
 8007bdc:	e7ca      	b.n	8007b74 <_malloc_r+0x2c>
 8007bde:	1cc4      	adds	r4, r0, #3
 8007be0:	f024 0403 	bic.w	r4, r4, #3
 8007be4:	42a0      	cmp	r0, r4
 8007be6:	d005      	beq.n	8007bf4 <_malloc_r+0xac>
 8007be8:	1a21      	subs	r1, r4, r0
 8007bea:	4630      	mov	r0, r6
 8007bec:	f000 f80a 	bl	8007c04 <_sbrk_r>
 8007bf0:	3001      	adds	r0, #1
 8007bf2:	d0cd      	beq.n	8007b90 <_malloc_r+0x48>
 8007bf4:	6025      	str	r5, [r4, #0]
 8007bf6:	e7d9      	b.n	8007bac <_malloc_r+0x64>
 8007bf8:	bd70      	pop	{r4, r5, r6, pc}
 8007bfa:	bf00      	nop
 8007bfc:	200000b4 	.word	0x200000b4
 8007c00:	200000b8 	.word	0x200000b8

08007c04 <_sbrk_r>:
 8007c04:	b538      	push	{r3, r4, r5, lr}
 8007c06:	4c06      	ldr	r4, [pc, #24]	; (8007c20 <_sbrk_r+0x1c>)
 8007c08:	2300      	movs	r3, #0
 8007c0a:	4605      	mov	r5, r0
 8007c0c:	4608      	mov	r0, r1
 8007c0e:	6023      	str	r3, [r4, #0]
 8007c10:	f7f9 f836 	bl	8000c80 <_sbrk>
 8007c14:	1c43      	adds	r3, r0, #1
 8007c16:	d102      	bne.n	8007c1e <_sbrk_r+0x1a>
 8007c18:	6823      	ldr	r3, [r4, #0]
 8007c1a:	b103      	cbz	r3, 8007c1e <_sbrk_r+0x1a>
 8007c1c:	602b      	str	r3, [r5, #0]
 8007c1e:	bd38      	pop	{r3, r4, r5, pc}
 8007c20:	20000890 	.word	0x20000890

08007c24 <__malloc_lock>:
 8007c24:	4770      	bx	lr

08007c26 <__malloc_unlock>:
 8007c26:	4770      	bx	lr

08007c28 <_init>:
 8007c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c2a:	bf00      	nop
 8007c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c2e:	bc08      	pop	{r3}
 8007c30:	469e      	mov	lr, r3
 8007c32:	4770      	bx	lr

08007c34 <_fini>:
 8007c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c36:	bf00      	nop
 8007c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c3a:	bc08      	pop	{r3}
 8007c3c:	469e      	mov	lr, r3
 8007c3e:	4770      	bx	lr
